/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu";
exports.ids = ["vendor-chunks/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu"];
exports.modules = {

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/common.js":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/common.js ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst replacements = [\n  ['january', '1'],\n  ['february', '2'],\n  ['march', '3'],\n  ['april', '4'],\n  ['may', '5'],\n  ['june', '6'],\n  ['july', '7'],\n  ['august', '8'],\n  ['september', '9'],\n  ['october', '10'],\n  ['november', '11'],\n  ['december', '12'],\n  ['jan', '1'],\n  ['feb', '2'],\n  ['mar', '3'],\n  ['apr', '4'],\n  ['may', '5'],\n  ['jun', '6'],\n  ['jul', '7'],\n  ['aug', '8'],\n  ['sep', '9'],\n  ['oct', '10'],\n  ['nov', '11'],\n  ['dec', '12'],\n  ['sunday', '0'],\n  ['monday', '1'],\n  ['tuesday', '2'],\n  ['wednesday', '3'],\n  ['thursday', '4'],\n  ['friday', '5'],\n  ['saturday', '6'],\n  ['sun', '0'],\n  ['mon', '1'],\n  ['tue', '2'],\n  ['wed', '3'],\n  ['thu', '4'],\n  ['fri', '5'],\n  ['sat', '6'],\n];\n\n/**\n * Replaces names in cron expressions\n */\nfunction replaceCronNames(cronExpression) {\n  return replacements.reduce(\n    // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n    (acc, [name, replacement]) => acc.replace(new RegExp(name, 'gi'), replacement),\n    cronExpression,\n  );\n}\n\nexports.replaceCronNames = replaceCronNames;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9jcm9uL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZS1jb3JlQDEwLjE5LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wX0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYXN5bmMtaG9va3NAMi4xLjBfQF8yZ2RocjZrdmRwd2huamRpb3lta2I0ZGJndS9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL2Nyb24vY29tbW9uLmpzPzUyMjUiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHJlcGxhY2VtZW50cyA9IFtcbiAgWydqYW51YXJ5JywgJzEnXSxcbiAgWydmZWJydWFyeScsICcyJ10sXG4gIFsnbWFyY2gnLCAnMyddLFxuICBbJ2FwcmlsJywgJzQnXSxcbiAgWydtYXknLCAnNSddLFxuICBbJ2p1bmUnLCAnNiddLFxuICBbJ2p1bHknLCAnNyddLFxuICBbJ2F1Z3VzdCcsICc4J10sXG4gIFsnc2VwdGVtYmVyJywgJzknXSxcbiAgWydvY3RvYmVyJywgJzEwJ10sXG4gIFsnbm92ZW1iZXInLCAnMTEnXSxcbiAgWydkZWNlbWJlcicsICcxMiddLFxuICBbJ2phbicsICcxJ10sXG4gIFsnZmViJywgJzInXSxcbiAgWydtYXInLCAnMyddLFxuICBbJ2FwcicsICc0J10sXG4gIFsnbWF5JywgJzUnXSxcbiAgWydqdW4nLCAnNiddLFxuICBbJ2p1bCcsICc3J10sXG4gIFsnYXVnJywgJzgnXSxcbiAgWydzZXAnLCAnOSddLFxuICBbJ29jdCcsICcxMCddLFxuICBbJ25vdicsICcxMSddLFxuICBbJ2RlYycsICcxMiddLFxuICBbJ3N1bmRheScsICcwJ10sXG4gIFsnbW9uZGF5JywgJzEnXSxcbiAgWyd0dWVzZGF5JywgJzInXSxcbiAgWyd3ZWRuZXNkYXknLCAnMyddLFxuICBbJ3RodXJzZGF5JywgJzQnXSxcbiAgWydmcmlkYXknLCAnNSddLFxuICBbJ3NhdHVyZGF5JywgJzYnXSxcbiAgWydzdW4nLCAnMCddLFxuICBbJ21vbicsICcxJ10sXG4gIFsndHVlJywgJzInXSxcbiAgWyd3ZWQnLCAnMyddLFxuICBbJ3RodScsICc0J10sXG4gIFsnZnJpJywgJzUnXSxcbiAgWydzYXQnLCAnNiddLFxuXTtcblxuLyoqXG4gKiBSZXBsYWNlcyBuYW1lcyBpbiBjcm9uIGV4cHJlc3Npb25zXG4gKi9cbmZ1bmN0aW9uIHJlcGxhY2VDcm9uTmFtZXMoY3JvbkV4cHJlc3Npb24pIHtcbiAgcmV0dXJuIHJlcGxhY2VtZW50cy5yZWR1Y2UoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBzZW50cnktaW50ZXJuYWwvc2RrL25vLXJlZ2V4cC1jb25zdHJ1Y3RvclxuICAgIChhY2MsIFtuYW1lLCByZXBsYWNlbWVudF0pID0+IGFjYy5yZXBsYWNlKG5ldyBSZWdFeHAobmFtZSwgJ2dpJyksIHJlcGxhY2VtZW50KSxcbiAgICBjcm9uRXhwcmVzc2lvbixcbiAgKTtcbn1cblxuZXhwb3J0cy5yZXBsYWNlQ3Jvbk5hbWVzID0gcmVwbGFjZUNyb25OYW1lcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbW1vbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/common.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/cron.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/cron.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/common.js\");\n\nconst ERROR_TEXT = 'Automatic instrumentation of CronJob only supports crontab string';\n\n/**\n * Instruments the `cron` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import { CronJob } from 'cron';\n *\n * const CronJobWithCheckIn = Sentry.cron.instrumentCron(CronJob, 'my-cron-job');\n *\n * // use the constructor\n * const job = new CronJobWithCheckIn('* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n *\n * // or from\n * const job = CronJobWithCheckIn.from({ cronTime: '* * * * *', onTick: () => {\n *   console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentCron(lib, monitorSlug) {\n  let jobScheduled = false;\n\n  return new Proxy(lib, {\n    construct(target, args) {\n      const [cronTime, onTick, onComplete, start, timeZone, ...rest] = args;\n\n      if (typeof cronTime !== 'string') {\n        throw new Error(ERROR_TEXT);\n      }\n\n      if (jobScheduled) {\n        throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n      }\n\n      jobScheduled = true;\n\n      const cronString = common.replaceCronNames(cronTime);\n\n      async function monitoredTick(context, onComplete) {\n        return core.withMonitor(\n          monitorSlug,\n          async () => {\n            try {\n              await onTick(context, onComplete);\n            } catch (e) {\n              core.captureException(e, {\n                mechanism: {\n                  handled: false,\n                  type: 'auto.function.cron.instrumentCron',\n                },\n              });\n              throw e;\n            }\n          },\n          {\n            schedule: { type: 'crontab', value: cronString },\n            timezone: timeZone || undefined,\n          },\n        );\n      }\n\n      return new target(cronTime, monitoredTick, onComplete, start, timeZone, ...rest);\n    },\n    get(target, prop) {\n      if (prop === 'from') {\n        return (param) => {\n          const { cronTime, onTick, timeZone } = param;\n\n          if (typeof cronTime !== 'string') {\n            throw new Error(ERROR_TEXT);\n          }\n\n          if (jobScheduled) {\n            throw new Error(`A job named '${monitorSlug}' has already been scheduled`);\n          }\n\n          jobScheduled = true;\n\n          const cronString = common.replaceCronNames(cronTime);\n\n          param.onTick = async (context, onComplete) => {\n            return core.withMonitor(\n              monitorSlug,\n              async () => {\n                try {\n                  await onTick(context, onComplete);\n                } catch (e) {\n                  core.captureException(e, {\n                    mechanism: {\n                      handled: false,\n                      type: 'auto.function.cron.instrumentCron',\n                    },\n                  });\n                  throw e;\n                }\n              },\n              {\n                schedule: { type: 'crontab', value: cronString },\n                timezone: timeZone || undefined,\n              },\n            );\n          };\n\n          return target.from(param);\n        };\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n\nexports.instrumentCron = instrumentCron;\n//# sourceMappingURL=cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9jcm9uL2Nyb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQywyT0FBYTs7QUFFcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDLFlBQVk7QUFDcEQ7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGVBQWU7QUFDZjtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0Esd0JBQXdCLG9DQUFvQztBQUM1RDtBQUNBLFdBQVc7QUFDWDtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw2QkFBNkI7O0FBRS9DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRDQUE0QyxZQUFZO0FBQ3hEOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixtQkFBbUI7QUFDbkI7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBLDRCQUE0QixvQ0FBb0M7QUFDaEU7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvY3Jvbi9jcm9uLmpzP2E2M2MiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbmNvbnN0IEVSUk9SX1RFWFQgPSAnQXV0b21hdGljIGluc3RydW1lbnRhdGlvbiBvZiBDcm9uSm9iIG9ubHkgc3VwcG9ydHMgY3JvbnRhYiBzdHJpbmcnO1xuXG4vKipcbiAqIEluc3RydW1lbnRzIHRoZSBgY3JvbmAgbGlicmFyeSB0byBzZW5kIGEgY2hlY2staW4gZXZlbnQgdG8gU2VudHJ5IGZvciBlYWNoIGpvYiBleGVjdXRpb24uXG4gKlxuICogYGBgdHNcbiAqIGltcG9ydCAqIGFzIFNlbnRyeSBmcm9tICdAc2VudHJ5L25vZGUnO1xuICogaW1wb3J0IHsgQ3JvbkpvYiB9IGZyb20gJ2Nyb24nO1xuICpcbiAqIGNvbnN0IENyb25Kb2JXaXRoQ2hlY2tJbiA9IFNlbnRyeS5jcm9uLmluc3RydW1lbnRDcm9uKENyb25Kb2IsICdteS1jcm9uLWpvYicpO1xuICpcbiAqIC8vIHVzZSB0aGUgY29uc3RydWN0b3JcbiAqIGNvbnN0IGpvYiA9IG5ldyBDcm9uSm9iV2l0aENoZWNrSW4oJyogKiAqICogKicsICgpID0+IHtcbiAqICBjb25zb2xlLmxvZygnWW91IHdpbGwgc2VlIHRoaXMgbWVzc2FnZSBldmVyeSBtaW51dGUnKTtcbiAqIH0pO1xuICpcbiAqIC8vIG9yIGZyb21cbiAqIGNvbnN0IGpvYiA9IENyb25Kb2JXaXRoQ2hlY2tJbi5mcm9tKHsgY3JvblRpbWU6ICcqICogKiAqIConLCBvblRpY2s6ICgpID0+IHtcbiAqICAgY29uc29sZS5sb2coJ1lvdSB3aWxsIHNlZSB0aGlzIG1lc3NhZ2UgZXZlcnkgbWludXRlJyk7XG4gKiB9KTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50Q3JvbihsaWIsIG1vbml0b3JTbHVnKSB7XG4gIGxldCBqb2JTY2hlZHVsZWQgPSBmYWxzZTtcblxuICByZXR1cm4gbmV3IFByb3h5KGxpYiwge1xuICAgIGNvbnN0cnVjdCh0YXJnZXQsIGFyZ3MpIHtcbiAgICAgIGNvbnN0IFtjcm9uVGltZSwgb25UaWNrLCBvbkNvbXBsZXRlLCBzdGFydCwgdGltZVpvbmUsIC4uLnJlc3RdID0gYXJncztcblxuICAgICAgaWYgKHR5cGVvZiBjcm9uVGltZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKEVSUk9SX1RFWFQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoam9iU2NoZWR1bGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBqb2IgbmFtZWQgJyR7bW9uaXRvclNsdWd9JyBoYXMgYWxyZWFkeSBiZWVuIHNjaGVkdWxlZGApO1xuICAgICAgfVxuXG4gICAgICBqb2JTY2hlZHVsZWQgPSB0cnVlO1xuXG4gICAgICBjb25zdCBjcm9uU3RyaW5nID0gY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoY3JvblRpbWUpO1xuXG4gICAgICBhc3luYyBmdW5jdGlvbiBtb25pdG9yZWRUaWNrKGNvbnRleHQsIG9uQ29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYXdhaXQgb25UaWNrKGNvbnRleHQsIG9uQ29tcGxldGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSwge1xuICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICB0eXBlOiAnYXV0by5mdW5jdGlvbi5jcm9uLmluc3RydW1lbnRDcm9uJyxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHNjaGVkdWxlOiB7IHR5cGU6ICdjcm9udGFiJywgdmFsdWU6IGNyb25TdHJpbmcgfSxcbiAgICAgICAgICAgIHRpbWV6b25lOiB0aW1lWm9uZSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyB0YXJnZXQoY3JvblRpbWUsIG1vbml0b3JlZFRpY2ssIG9uQ29tcGxldGUsIHN0YXJ0LCB0aW1lWm9uZSwgLi4ucmVzdCk7XG4gICAgfSxcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ2Zyb20nKSB7XG4gICAgICAgIHJldHVybiAocGFyYW0pID0+IHtcbiAgICAgICAgICBjb25zdCB7IGNyb25UaW1lLCBvblRpY2ssIHRpbWVab25lIH0gPSBwYXJhbTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgY3JvblRpbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoRVJST1JfVEVYVCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGpvYlNjaGVkdWxlZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBIGpvYiBuYW1lZCAnJHttb25pdG9yU2x1Z30nIGhhcyBhbHJlYWR5IGJlZW4gc2NoZWR1bGVkYCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgam9iU2NoZWR1bGVkID0gdHJ1ZTtcblxuICAgICAgICAgIGNvbnN0IGNyb25TdHJpbmcgPSBjb21tb24ucmVwbGFjZUNyb25OYW1lcyhjcm9uVGltZSk7XG5cbiAgICAgICAgICBwYXJhbS5vblRpY2sgPSBhc3luYyAoY29udGV4dCwgb25Db21wbGV0ZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgICAgIG1vbml0b3JTbHVnLFxuICAgICAgICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGF3YWl0IG9uVGljayhjb250ZXh0LCBvbkNvbXBsZXRlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSwge1xuICAgICAgICAgICAgICAgICAgICBtZWNoYW5pc206IHtcbiAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXV0by5mdW5jdGlvbi5jcm9uLmluc3RydW1lbnRDcm9uJyxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzY2hlZHVsZTogeyB0eXBlOiAnY3JvbnRhYicsIHZhbHVlOiBjcm9uU3RyaW5nIH0sXG4gICAgICAgICAgICAgICAgdGltZXpvbmU6IHRpbWVab25lIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiB0YXJnZXQuZnJvbShwYXJhbSk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGFyZ2V0W3Byb3BdO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLmluc3RydW1lbnRDcm9uID0gaW5zdHJ1bWVudENyb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcm9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/cron.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/index.js":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/index.js ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst cron$1 = __webpack_require__(/*! ./cron.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/cron.js\");\nconst nodeCron = __webpack_require__(/*! ./node-cron.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/node-cron.js\");\nconst nodeSchedule = __webpack_require__(/*! ./node-schedule.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/node-schedule.js\");\n\n/** Methods to instrument cron libraries for Sentry check-ins */\nconst cron = {\n  instrumentCron: cron$1.instrumentCron,\n  instrumentNodeCron: nodeCron.instrumentNodeCron,\n  instrumentNodeSchedule: nodeSchedule.instrumentNodeSchedule,\n};\n\nexports.cron = cron;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9jcm9uL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGVBQWUsbUJBQU8sQ0FBQyx1T0FBVztBQUNsQyxpQkFBaUIsbUJBQU8sQ0FBQyxpUEFBZ0I7QUFDekMscUJBQXFCLG1CQUFPLENBQUMseVBBQW9COztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTtBQUNaIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9jcm9uL2luZGV4LmpzPzdkZjIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNyb24kMSA9IHJlcXVpcmUoJy4vY3Jvbi5qcycpO1xuY29uc3Qgbm9kZUNyb24gPSByZXF1aXJlKCcuL25vZGUtY3Jvbi5qcycpO1xuY29uc3Qgbm9kZVNjaGVkdWxlID0gcmVxdWlyZSgnLi9ub2RlLXNjaGVkdWxlLmpzJyk7XG5cbi8qKiBNZXRob2RzIHRvIGluc3RydW1lbnQgY3JvbiBsaWJyYXJpZXMgZm9yIFNlbnRyeSBjaGVjay1pbnMgKi9cbmNvbnN0IGNyb24gPSB7XG4gIGluc3RydW1lbnRDcm9uOiBjcm9uJDEuaW5zdHJ1bWVudENyb24sXG4gIGluc3RydW1lbnROb2RlQ3Jvbjogbm9kZUNyb24uaW5zdHJ1bWVudE5vZGVDcm9uLFxuICBpbnN0cnVtZW50Tm9kZVNjaGVkdWxlOiBub2RlU2NoZWR1bGUuaW5zdHJ1bWVudE5vZGVTY2hlZHVsZSxcbn07XG5cbmV4cG9ydHMuY3JvbiA9IGNyb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/node-cron.js":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/node-cron.js ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/common.js\");\n\n/**\n * Wraps the `node-cron` library with check-in monitoring.\n *\n * ```ts\n * import * as Sentry from \"@sentry/node\";\n * import * as cron from \"node-cron\";\n *\n * const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n *\n * cronWithCheckIn.schedule(\n *   \"* * * * *\",\n *   () => {\n *     console.log(\"running a task every minute\");\n *   },\n *   { name: \"my-cron-job\" },\n * );\n * ```\n */\nfunction instrumentNodeCron(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'schedule' && target.schedule) {\n        // When 'get' is called for schedule, return a proxied version of the schedule function\n        return new Proxy(target.schedule, {\n          apply(target, thisArg, argArray) {\n            const [expression, callback, options] = argArray;\n\n            const name = options?.name;\n            const timezone = options?.timezone;\n\n            if (!name) {\n              throw new Error('Missing \"name\" for scheduled job. A name is required for Sentry check-in monitoring.');\n            }\n\n            const monitoredCallback = async () => {\n              return core.withMonitor(\n                name,\n                async () => {\n                  // We have to manually catch here and capture the exception because node-cron swallows errors\n                  // https://github.com/node-cron/node-cron/issues/399\n                  try {\n                    return await callback();\n                  } catch (e) {\n                    core.captureException(e, {\n                      mechanism: {\n                        handled: false,\n                        type: 'auto.function.node-cron.instrumentNodeCron',\n                      },\n                    });\n                    throw e;\n                  }\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                  timezone,\n                },\n              );\n            };\n\n            return target.apply(thisArg, [expression, monitoredCallback, options]);\n          },\n        });\n      } else {\n        return target[prop ];\n      }\n    },\n  });\n}\n\nexports.instrumentNodeCron = instrumentNodeCron;\n//# sourceMappingURL=node-cron.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9jcm9uL25vZGUtY3Jvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLDJPQUFhOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixPQUFPLHFCQUFxQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSw4QkFBOEIsNkRBQTZEO0FBQzNGO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQSxXQUFXO0FBQ1gsU0FBUztBQUNULFFBQVE7QUFDUjtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQSwwQkFBMEI7QUFDMUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZS1jb3JlQDEwLjE5LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wX0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYXN5bmMtaG9va3NAMi4xLjBfQF8yZ2RocjZrdmRwd2huamRpb3lta2I0ZGJndS9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL2Nyb24vbm9kZS1jcm9uLmpzPzkyOWYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbi8qKlxuICogV3JhcHMgdGhlIGBub2RlLWNyb25gIGxpYnJhcnkgd2l0aCBjaGVjay1pbiBtb25pdG9yaW5nLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgKiBhcyBTZW50cnkgZnJvbSBcIkBzZW50cnkvbm9kZVwiO1xuICogaW1wb3J0ICogYXMgY3JvbiBmcm9tIFwibm9kZS1jcm9uXCI7XG4gKlxuICogY29uc3QgY3JvbldpdGhDaGVja0luID0gU2VudHJ5LmNyb24uaW5zdHJ1bWVudE5vZGVDcm9uKGNyb24pO1xuICpcbiAqIGNyb25XaXRoQ2hlY2tJbi5zY2hlZHVsZShcbiAqICAgXCIqICogKiAqICpcIixcbiAqICAgKCkgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKFwicnVubmluZyBhIHRhc2sgZXZlcnkgbWludXRlXCIpO1xuICogICB9LFxuICogICB7IG5hbWU6IFwibXktY3Jvbi1qb2JcIiB9LFxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50Tm9kZUNyb24obGliKSB7XG4gIHJldHVybiBuZXcgUHJveHkobGliLCB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCkge1xuICAgICAgaWYgKHByb3AgPT09ICdzY2hlZHVsZScgJiYgdGFyZ2V0LnNjaGVkdWxlKSB7XG4gICAgICAgIC8vIFdoZW4gJ2dldCcgaXMgY2FsbGVkIGZvciBzY2hlZHVsZSwgcmV0dXJuIGEgcHJveGllZCB2ZXJzaW9uIG9mIHRoZSBzY2hlZHVsZSBmdW5jdGlvblxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHRhcmdldC5zY2hlZHVsZSwge1xuICAgICAgICAgIGFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJnQXJyYXkpIHtcbiAgICAgICAgICAgIGNvbnN0IFtleHByZXNzaW9uLCBjYWxsYmFjaywgb3B0aW9uc10gPSBhcmdBcnJheTtcblxuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG9wdGlvbnM/Lm5hbWU7XG4gICAgICAgICAgICBjb25zdCB0aW1lem9uZSA9IG9wdGlvbnM/LnRpbWV6b25lO1xuXG4gICAgICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIFwibmFtZVwiIGZvciBzY2hlZHVsZWQgam9iLiBBIG5hbWUgaXMgcmVxdWlyZWQgZm9yIFNlbnRyeSBjaGVjay1pbiBtb25pdG9yaW5nLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBtb25pdG9yZWRDYWxsYmFjayA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRvIG1hbnVhbGx5IGNhdGNoIGhlcmUgYW5kIGNhcHR1cmUgdGhlIGV4Y2VwdGlvbiBiZWNhdXNlIG5vZGUtY3JvbiBzd2FsbG93cyBlcnJvcnNcbiAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlLWNyb24vbm9kZS1jcm9uL2lzc3Vlcy8zOTlcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBjYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZSwge1xuICAgICAgICAgICAgICAgICAgICAgIG1lY2hhbmlzbToge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXV0by5mdW5jdGlvbi5ub2RlLWNyb24uaW5zdHJ1bWVudE5vZGVDcm9uJyxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHNjaGVkdWxlOiB7IHR5cGU6ICdjcm9udGFiJywgdmFsdWU6IGNvbW1vbi5yZXBsYWNlQ3Jvbk5hbWVzKGV4cHJlc3Npb24pIH0sXG4gICAgICAgICAgICAgICAgICB0aW1lem9uZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzQXJnLCBbZXhwcmVzc2lvbiwgbW9uaXRvcmVkQ2FsbGJhY2ssIG9wdGlvbnNdKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRbcHJvcCBdO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xufVxuXG5leHBvcnRzLmluc3RydW1lbnROb2RlQ3JvbiA9IGluc3RydW1lbnROb2RlQ3Jvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtY3Jvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/node-cron.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/node-schedule.js":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/node-schedule.js ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/common.js\");\n\n/**\n * Instruments the `node-schedule` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import * as schedule from 'node-schedule';\n *\n * const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n *\n * const job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentNodeSchedule(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'scheduleJob') {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return new Proxy(target.scheduleJob, {\n          apply(target, thisArg, argArray) {\n            const [nameOrExpression, expressionOrCallback, callback] = argArray;\n\n            if (\n              typeof nameOrExpression !== 'string' ||\n              typeof expressionOrCallback !== 'string' ||\n              typeof callback !== 'function'\n            ) {\n              throw new Error(\n                \"Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string\",\n              );\n            }\n\n            const monitorSlug = nameOrExpression;\n            const expression = expressionOrCallback;\n\n            async function monitoredCallback() {\n              return core.withMonitor(\n                monitorSlug,\n                async () => {\n                  await callback?.();\n                },\n                {\n                  schedule: { type: 'crontab', value: common.replaceCronNames(expression) },\n                },\n              );\n            }\n\n            return target.apply(thisArg, [monitorSlug, expression, monitoredCallback]);\n          },\n        });\n      }\n\n      return target[prop];\n    },\n  });\n}\n\nexports.instrumentNodeSchedule = instrumentNodeSchedule;\n//# sourceMappingURL=node-schedule.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9jcm9uL25vZGUtc2NoZWR1bGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLGVBQWUsbUJBQU8sQ0FBQywyT0FBYTs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsOEJBQThCLDZEQUE2RDtBQUMzRixpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7O0FBRUE7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBLDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvY3Jvbi9ub2RlLXNjaGVkdWxlLmpzPzIyNTMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uLmpzJyk7XG5cbi8qKlxuICogSW5zdHJ1bWVudHMgdGhlIGBub2RlLXNjaGVkdWxlYCBsaWJyYXJ5IHRvIHNlbmQgYSBjaGVjay1pbiBldmVudCB0byBTZW50cnkgZm9yIGVhY2ggam9iIGV4ZWN1dGlvbi5cbiAqXG4gKiBgYGB0c1xuICogaW1wb3J0ICogYXMgU2VudHJ5IGZyb20gJ0BzZW50cnkvbm9kZSc7XG4gKiBpbXBvcnQgKiBhcyBzY2hlZHVsZSBmcm9tICdub2RlLXNjaGVkdWxlJztcbiAqXG4gKiBjb25zdCBzY2hlZHVsZVdpdGhDaGVja0luID0gU2VudHJ5LmNyb24uaW5zdHJ1bWVudE5vZGVTY2hlZHVsZShzY2hlZHVsZSk7XG4gKlxuICogY29uc3Qgam9iID0gc2NoZWR1bGVXaXRoQ2hlY2tJbi5zY2hlZHVsZUpvYignbXktY3Jvbi1qb2InLCAnKiAqICogKiAqJywgKCkgPT4ge1xuICogIGNvbnNvbGUubG9nKCdZb3Ugd2lsbCBzZWUgdGhpcyBtZXNzYWdlIGV2ZXJ5IG1pbnV0ZScpO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudE5vZGVTY2hlZHVsZShsaWIpIHtcbiAgcmV0dXJuIG5ldyBQcm94eShsaWIsIHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wKSB7XG4gICAgICBpZiAocHJvcCA9PT0gJ3NjaGVkdWxlSm9iJykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodGFyZ2V0LnNjaGVkdWxlSm9iLCB7XG4gICAgICAgICAgYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdBcnJheSkge1xuICAgICAgICAgICAgY29uc3QgW25hbWVPckV4cHJlc3Npb24sIGV4cHJlc3Npb25PckNhbGxiYWNrLCBjYWxsYmFja10gPSBhcmdBcnJheTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB0eXBlb2YgbmFtZU9yRXhwcmVzc2lvbiAhPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgICAgdHlwZW9mIGV4cHJlc3Npb25PckNhbGxiYWNrICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgICB0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJBdXRvbWF0aWMgaW5zdHJ1bWVudGF0aW9uIG9mICdub2RlLXNjaGVkdWxlJyByZXF1aXJlcyB0aGUgZmlyc3QgcGFyYW1ldGVyIG9mICdzY2hlZHVsZUpvYicgdG8gYmUgYSBqb2IgbmFtZSBzdHJpbmcgYW5kIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIGJlIGEgY3JvbnRhYiBzdHJpbmdcIixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbW9uaXRvclNsdWcgPSBuYW1lT3JFeHByZXNzaW9uO1xuICAgICAgICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IGV4cHJlc3Npb25PckNhbGxiYWNrO1xuXG4gICAgICAgICAgICBhc3luYyBmdW5jdGlvbiBtb25pdG9yZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNvcmUud2l0aE1vbml0b3IoXG4gICAgICAgICAgICAgICAgbW9uaXRvclNsdWcsXG4gICAgICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgYXdhaXQgY2FsbGJhY2s/LigpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc2NoZWR1bGU6IHsgdHlwZTogJ2Nyb250YWInLCB2YWx1ZTogY29tbW9uLnJlcGxhY2VDcm9uTmFtZXMoZXhwcmVzc2lvbikgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIFttb25pdG9yU2x1ZywgZXhwcmVzc2lvbiwgbW9uaXRvcmVkQ2FsbGJhY2tdKTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldFtwcm9wXTtcbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0cy5pbnN0cnVtZW50Tm9kZVNjaGVkdWxlID0gaW5zdHJ1bWVudE5vZGVTY2hlZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vZGUtc2NoZWR1bGUuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/node-schedule.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/debug-build.js":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/debug-build.js ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = ( false || false);\n\nexports.DEBUG_BUILD = DEBUG_BUILD;\n//# sourceMappingURL=debug-build.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9kZWJ1Zy1idWlsZC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE1BQXVDLElBQUksS0FBZ0I7O0FBRWhGLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvZGVidWctYnVpbGQuanM/ZjVmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBUaGlzIHNlcnZlcyBhcyBhIGJ1aWxkIHRpbWUgZmxhZyB0aGF0IHdpbGwgYmUgdHJ1ZSBieSBkZWZhdWx0LCBidXQgZmFsc2UgaW4gbm9uLWRlYnVnIGJ1aWxkcyBvciBpZiB1c2VycyByZXBsYWNlIGBfX1NFTlRSWV9ERUJVR19fYCBpbiB0aGVpciBnZW5lcmF0ZWQgY29kZS5cbiAqXG4gKiBBVFRFTlRJT046IFRoaXMgY29uc3RhbnQgbXVzdCBuZXZlciBjcm9zcyBwYWNrYWdlIGJvdW5kYXJpZXMgKGkuZS4gYmUgZXhwb3J0ZWQpIHRvIGd1YXJhbnRlZSB0aGF0IGl0IGNhbiBiZSB1c2VkIGZvciB0cmVlIHNoYWtpbmcuXG4gKi9cbmNvbnN0IERFQlVHX0JVSUxEID0gKHR5cGVvZiBfX1NFTlRSWV9ERUJVR19fID09PSAndW5kZWZpbmVkJyB8fCBfX1NFTlRSWV9ERUJVR19fKTtcblxuZXhwb3J0cy5ERUJVR19CVUlMRCA9IERFQlVHX0JVSUxEO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVidWctYnVpbGQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/debug-build.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/index.js":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/index.js ***!
  \***********************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst exports$1 = __webpack_require__(/*! ./logs/exports.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/logs/exports.js\");\nconst index = __webpack_require__(/*! ./integrations/http/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/index.js\");\nconst httpServerSpansIntegration = __webpack_require__(/*! ./integrations/http/httpServerSpansIntegration.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/httpServerSpansIntegration.js\");\nconst httpServerIntegration = __webpack_require__(/*! ./integrations/http/httpServerIntegration.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/httpServerIntegration.js\");\nconst SentryHttpInstrumentation = __webpack_require__(/*! ./integrations/http/SentryHttpInstrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/SentryHttpInstrumentation.js\");\nconst index$1 = __webpack_require__(/*! ./integrations/node-fetch/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/index.js\");\nconst SentryNodeFetchInstrumentation = __webpack_require__(/*! ./integrations/node-fetch/SentryNodeFetchInstrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js\");\nconst context = __webpack_require__(/*! ./integrations/context.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ./integrations/contextlines.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/contextlines.js\");\nconst index$2 = __webpack_require__(/*! ./integrations/local-variables/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ./integrations/modules.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/modules.js\");\nconst onuncaughtexception = __webpack_require__(/*! ./integrations/onuncaughtexception.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ./integrations/onunhandledrejection.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/onunhandledrejection.js\");\nconst index$3 = __webpack_require__(/*! ./integrations/anr/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/anr/index.js\");\nconst spotlight = __webpack_require__(/*! ./integrations/spotlight.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/spotlight.js\");\nconst systemError = __webpack_require__(/*! ./integrations/systemError.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/systemError.js\");\nconst childProcess = __webpack_require__(/*! ./integrations/childProcess.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/childProcess.js\");\nconst winston = __webpack_require__(/*! ./integrations/winston.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/winston.js\");\nconst pino = __webpack_require__(/*! ./integrations/pino.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/pino.js\");\nconst contextManager = __webpack_require__(/*! ./otel/contextManager.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/contextManager.js\");\nconst logger = __webpack_require__(/*! ./otel/logger.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/logger.js\");\nconst instrument = __webpack_require__(/*! ./otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/instrument.js\");\nconst index$4 = __webpack_require__(/*! ./sdk/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/index.js\");\nconst scope = __webpack_require__(/*! ./sdk/scope.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/scope.js\");\nconst api = __webpack_require__(/*! ./sdk/api.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/api.js\");\nconst module$1 = __webpack_require__(/*! ./utils/module.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/module.js\");\nconst addOriginToSpan = __webpack_require__(/*! ./utils/addOriginToSpan.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/addOriginToSpan.js\");\nconst getRequestUrl = __webpack_require__(/*! ./utils/getRequestUrl.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/getRequestUrl.js\");\nconst esmLoader = __webpack_require__(/*! ./sdk/esmLoader.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/esmLoader.js\");\nconst detection = __webpack_require__(/*! ./utils/detection.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/detection.js\");\nconst ensureIsWrapped = __webpack_require__(/*! ./utils/ensureIsWrapped.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/ensureIsWrapped.js\");\nconst createMissingInstrumentationContext = __webpack_require__(/*! ./utils/createMissingInstrumentationContext.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/createMissingInstrumentationContext.js\");\nconst envToBool = __webpack_require__(/*! ./utils/envToBool.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/envToBool.js\");\nconst http = __webpack_require__(/*! ./transports/http.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/transports/http.js\");\nconst client = __webpack_require__(/*! ./sdk/client.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/client.js\");\nconst index$5 = __webpack_require__(/*! ./cron/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/cron/index.js\");\nconst nodeVersion = __webpack_require__(/*! ./nodeVersion.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/nodeVersion.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_5qhoifmlgqufioqeczcfzlo2z4/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n\n\nexports.logger = exports$1;\nexports.httpIntegration = index.httpIntegration;\nexports.httpServerSpansIntegration = httpServerSpansIntegration.httpServerSpansIntegration;\nexports.httpServerIntegration = httpServerIntegration.httpServerIntegration;\nexports.SentryHttpInstrumentation = SentryHttpInstrumentation.SentryHttpInstrumentation;\nexports.nativeNodeFetchIntegration = index$1.nativeNodeFetchIntegration;\nexports.SentryNodeFetchInstrumentation = SentryNodeFetchInstrumentation.SentryNodeFetchInstrumentation;\nexports.nodeContextIntegration = context.nodeContextIntegration;\nexports.contextLinesIntegration = contextlines.contextLinesIntegration;\nexports.localVariablesIntegration = index$2.localVariablesIntegration;\nexports.modulesIntegration = modules.modulesIntegration;\nexports.onUncaughtExceptionIntegration = onuncaughtexception.onUncaughtExceptionIntegration;\nexports.onUnhandledRejectionIntegration = onunhandledrejection.onUnhandledRejectionIntegration;\nexports.anrIntegration = index$3.anrIntegration;\nexports.disableAnrDetectionForCallback = index$3.disableAnrDetectionForCallback;\nexports.spotlightIntegration = spotlight.spotlightIntegration;\nexports.systemErrorIntegration = systemError.systemErrorIntegration;\nexports.childProcessIntegration = childProcess.childProcessIntegration;\nexports.createSentryWinstonTransport = winston.createSentryWinstonTransport;\nexports.pinoIntegration = pino.pinoIntegration;\nexports.SentryContextManager = contextManager.SentryContextManager;\nexports.setupOpenTelemetryLogger = logger.setupOpenTelemetryLogger;\nexports.INSTRUMENTED = instrument.INSTRUMENTED;\nexports.generateInstrumentOnce = instrument.generateInstrumentOnce;\nexports.instrumentWhenWrapped = instrument.instrumentWhenWrapped;\nexports.getDefaultIntegrations = index$4.getDefaultIntegrations;\nexports.init = index$4.init;\nexports.initWithoutDefaultIntegrations = index$4.initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = index$4.validateOpenTelemetrySetup;\nexports.setIsolationScope = scope.setIsolationScope;\nexports.defaultStackParser = api.defaultStackParser;\nexports.getSentryRelease = api.getSentryRelease;\nexports.createGetModuleFromFilename = module$1.createGetModuleFromFilename;\nexports.addOriginToSpan = addOriginToSpan.addOriginToSpan;\nexports.getRequestUrl = getRequestUrl.getRequestUrl;\nexports.initializeEsmLoader = esmLoader.initializeEsmLoader;\nexports.isCjs = detection.isCjs;\nexports.ensureIsWrapped = ensureIsWrapped.ensureIsWrapped;\nexports.createMissingInstrumentationContext = createMissingInstrumentationContext.createMissingInstrumentationContext;\nexports.envToBool = envToBool.envToBool;\nexports.makeNodeTransport = http.makeNodeTransport;\nexports.NodeClient = client.NodeClient;\nexports.cron = index$5.cron;\nexports.NODE_VERSION = nodeVersion.NODE_VERSION;\nexports.setNodeAsyncContextStrategy = opentelemetry.setOpenTelemetryContextAsyncContextStrategy;\nexports.SDK_VERSION = core.SDK_VERSION;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_OP = core.SEMANTIC_ATTRIBUTE_SENTRY_OP;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = core.SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE;\nexports.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = core.SEMANTIC_ATTRIBUTE_SENTRY_SOURCE;\nexports.Scope = core.Scope;\nexports.addBreadcrumb = core.addBreadcrumb;\nexports.addEventProcessor = core.addEventProcessor;\nexports.addIntegration = core.addIntegration;\nexports.captureCheckIn = core.captureCheckIn;\nexports.captureConsoleIntegration = core.captureConsoleIntegration;\nexports.captureEvent = core.captureEvent;\nexports.captureException = core.captureException;\nexports.captureFeedback = core.captureFeedback;\nexports.captureMessage = core.captureMessage;\nexports.captureSession = core.captureSession;\nexports.close = core.close;\nexports.consoleIntegration = core.consoleIntegration;\nexports.consoleLoggingIntegration = core.consoleLoggingIntegration;\nexports.continueTrace = core.continueTrace;\nexports.createConsolaReporter = core.createConsolaReporter;\nexports.createTransport = core.createTransport;\nexports.dedupeIntegration = core.dedupeIntegration;\nexports.endSession = core.endSession;\nexports.eventFiltersIntegration = core.eventFiltersIntegration;\nexports.extraErrorDataIntegration = core.extraErrorDataIntegration;\nexports.featureFlagsIntegration = core.featureFlagsIntegration;\nexports.flush = core.flush;\nexports.functionToStringIntegration = core.functionToStringIntegration;\nexports.getActiveSpan = core.getActiveSpan;\nexports.getClient = core.getClient;\nexports.getCurrentScope = core.getCurrentScope;\nexports.getGlobalScope = core.getGlobalScope;\nexports.getIsolationScope = core.getIsolationScope;\nexports.getRootSpan = core.getRootSpan;\nexports.getSpanDescendants = core.getSpanDescendants;\nexports.getSpanStatusFromHttpCode = core.getSpanStatusFromHttpCode;\nexports.getTraceData = core.getTraceData;\nexports.getTraceMetaTags = core.getTraceMetaTags;\nexports.inboundFiltersIntegration = core.inboundFiltersIntegration;\nexports.instrumentSupabaseClient = core.instrumentSupabaseClient;\nexports.isEnabled = core.isEnabled;\nexports.isInitialized = core.isInitialized;\nexports.lastEventId = core.lastEventId;\nexports.linkedErrorsIntegration = core.linkedErrorsIntegration;\nexports.metrics = core.metrics;\nexports.parameterize = core.parameterize;\nexports.profiler = core.profiler;\nexports.requestDataIntegration = core.requestDataIntegration;\nexports.rewriteFramesIntegration = core.rewriteFramesIntegration;\nexports.setContext = core.setContext;\nexports.setCurrentClient = core.setCurrentClient;\nexports.setExtra = core.setExtra;\nexports.setExtras = core.setExtras;\nexports.setHttpStatus = core.setHttpStatus;\nexports.setMeasurement = core.setMeasurement;\nexports.setTag = core.setTag;\nexports.setTags = core.setTags;\nexports.setUser = core.setUser;\nexports.spanToBaggageHeader = core.spanToBaggageHeader;\nexports.spanToJSON = core.spanToJSON;\nexports.spanToTraceHeader = core.spanToTraceHeader;\nexports.startInactiveSpan = core.startInactiveSpan;\nexports.startNewTrace = core.startNewTrace;\nexports.startSession = core.startSession;\nexports.startSpan = core.startSpan;\nexports.startSpanManual = core.startSpanManual;\nexports.supabaseIntegration = core.supabaseIntegration;\nexports.suppressTracing = core.suppressTracing;\nexports.trpcMiddleware = core.trpcMiddleware;\nexports.updateSpanName = core.updateSpanName;\nexports.withActiveSpan = core.withActiveSpan;\nexports.withIsolationScope = core.withIsolationScope;\nexports.withMonitor = core.withMonitor;\nexports.withScope = core.withScope;\nexports.wrapMcpServerWithSentry = core.wrapMcpServerWithSentry;\nexports.zodErrorsIntegration = core.zodErrorsIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/anr/index.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/anr/index.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/nodeVersion.js\");\nconst debug = __webpack_require__(/*! ../../utils/debug.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/debug.js\");\n\nconst { isPromise } = util.types;\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = '';\n\nconst DEFAULT_INTERVAL = 50;\nconst DEFAULT_HANG_THRESHOLD = 5000;\n\nfunction log(message, ...args) {\n  core.debug.log(`[ANR] ${message}`, ...args);\n}\n\nfunction globalWithScopeFetchFn() {\n  return core.GLOBAL_OBJ;\n}\n\n/** Fetches merged scope data */\nfunction getScopeData() {\n  const scope = core.getGlobalScope().getScopeData();\n  core.mergeScopeData(scope, core.getIsolationScope().getScopeData());\n  core.mergeScopeData(scope, core.getCurrentScope().getScopeData());\n\n  // We remove attachments because they likely won't serialize well as json\n  scope.attachments = [];\n  // We can't serialize event processor functions\n  scope.eventProcessors = [];\n\n  return scope;\n}\n\n/**\n * Gets contexts by calling all event processors. This shouldn't be called until all integrations are setup\n */\nasync function getContexts(client) {\n  let event = { message: 'ANR' };\n  const eventHint = {};\n\n  for (const processor of client.getEventProcessors()) {\n    if (event === null) break;\n    event = await processor(event, eventHint);\n  }\n\n  return event?.contexts || {};\n}\n\nconst INTEGRATION_NAME = 'Anr';\n\n// eslint-disable-next-line deprecation/deprecation\nconst _anrIntegration = ((options = {}) => {\n  if (nodeVersion.NODE_VERSION.major < 16 || (nodeVersion.NODE_VERSION.major === 16 && nodeVersion.NODE_VERSION.minor < 17)) {\n    throw new Error('ANR detection requires Node 16.17.0 or later');\n  }\n\n  let worker;\n  let client;\n\n  // Hookup the scope fetch function to the global object so that it can be called from the worker thread via the\n  // debugger when it pauses\n  const gbl = globalWithScopeFetchFn();\n  gbl.__SENTRY_GET_SCOPES__ = getScopeData;\n\n  return {\n    name: INTEGRATION_NAME,\n    startWorker: () => {\n      if (worker) {\n        return;\n      }\n\n      if (client) {\n        worker = _startWorker(client, options);\n      }\n    },\n    stopWorker: () => {\n      if (worker) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        worker.then(stop => {\n          stop();\n          worker = undefined;\n        });\n      }\n    },\n    async setup(initClient) {\n      client = initClient;\n\n      if (options.captureStackTrace && (await debug.isDebuggerEnabled())) {\n        core.debug.warn('ANR captureStackTrace has been disabled because the debugger was already enabled');\n        options.captureStackTrace = false;\n      }\n\n      // setImmediate is used to ensure that all other integrations have had their setup called first.\n      // This allows us to call into all integrations to fetch the full context\n      setImmediate(() => this.startWorker());\n    },\n  } ;\n}) ;\n\n// eslint-disable-next-line deprecation/deprecation\n\n/**\n * Application Not Responding (ANR) integration for Node.js applications.\n *\n * @deprecated The ANR integration has been deprecated. Use `eventLoopBlockIntegration` from `@sentry/node-native` instead.\n *\n * Detects when the Node.js main thread event loop is blocked for more than the configured\n * threshold (5 seconds by default) and reports these as Sentry events.\n *\n * ANR detection uses a worker thread to monitor the event loop in the main app thread.\n * The main app thread sends a heartbeat message to the ANR worker thread every 50ms by default.\n * If the ANR worker does not receive a heartbeat message for the configured threshold duration,\n * it triggers an ANR event.\n *\n * - Node.js 16.17.0 or higher\n * - Only supported in the Node.js runtime (not browsers)\n * - Not supported for Node.js clusters\n *\n * Overhead should be minimal:\n * - Main thread: Only polling the ANR worker over IPC every 50ms\n * - Worker thread: Consumes around 10-20 MB of RAM\n * - When ANR detected: Brief pause in debugger to capture stack trace (negligible compared to the blocking)\n *\n * @example\n * ```javascript\n * Sentry.init({\n *   dsn: \"https://examplePublicKey@o0.ingest.sentry.io/0\",\n *   integrations: [\n *     Sentry.anrIntegration({\n *       anrThreshold: 5000,\n *       captureStackTrace: true,\n *       pollInterval: 50,\n *     }),\n *   ],\n * });\n * ```\n */\nconst anrIntegration = core.defineIntegration(_anrIntegration) ;\n\n/**\n * Starts the ANR worker thread\n *\n * @returns A function to stop the worker\n */\nasync function _startWorker(\n  client,\n  // eslint-disable-next-line deprecation/deprecation\n  integrationOptions,\n) {\n  const dsn = client.getDsn();\n\n  if (!dsn) {\n    return () => {\n      //\n    };\n  }\n\n  const contexts = await getContexts(client);\n\n  // These will not be accurate if sent later from the worker thread\n  delete contexts.app?.app_memory;\n  delete contexts.device?.free_memory;\n\n  const initOptions = client.getOptions();\n\n  const sdkMetadata = client.getSdkMetadata() || {};\n  if (sdkMetadata.sdk) {\n    sdkMetadata.sdk.integrations = initOptions.integrations.map(i => i.name);\n  }\n\n  const options = {\n    debug: core.debug.isEnabled(),\n    dsn,\n    tunnel: initOptions.tunnel,\n    environment: initOptions.environment || 'production',\n    release: initOptions.release,\n    dist: initOptions.dist,\n    sdkMetadata,\n    appRootPath: integrationOptions.appRootPath,\n    pollInterval: integrationOptions.pollInterval || DEFAULT_INTERVAL,\n    anrThreshold: integrationOptions.anrThreshold || DEFAULT_HANG_THRESHOLD,\n    captureStackTrace: !!integrationOptions.captureStackTrace,\n    maxAnrEvents: integrationOptions.maxAnrEvents || 1,\n    staticTags: integrationOptions.staticTags || {},\n    contexts,\n  };\n\n  if (options.captureStackTrace) {\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n    workerData: options,\n    // We don't want any Node args to be passed to the worker\n    execArgv: [],\n    env: { ...process.env, NODE_OPTIONS: undefined },\n  });\n\n  process.on('exit', () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n  });\n\n  const timer = setInterval(() => {\n    try {\n      const currentSession = core.getIsolationScope().getSession();\n      // We need to copy the session object and remove the toJSON method so it can be sent to the worker\n      // serialized without making it a SerializedSession\n      const session = currentSession ? { ...currentSession, toJSON: undefined } : undefined;\n      // message the worker to tell it the main event loop is still running\n      worker.postMessage({ session, debugImages: core.getFilenameToDebugIdMap(initOptions.stackParser) });\n    } catch {\n      //\n    }\n  }, options.pollInterval);\n  // Timer should not block exit\n  timer.unref();\n\n  worker.on('message', (msg) => {\n    if (msg === 'session-ended') {\n      log('ANR event sent from ANR worker. Clearing session in this thread.');\n      core.getIsolationScope().setSession(undefined);\n    }\n  });\n\n  worker.once('error', (err) => {\n    clearInterval(timer);\n    log('ANR worker error', err);\n  });\n\n  worker.once('exit', (code) => {\n    clearInterval(timer);\n    log('ANR worker exit', code);\n  });\n\n  // Ensure this thread can't block app exit\n  worker.unref();\n\n  return () => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    worker.terminate();\n    clearInterval(timer);\n  };\n}\n\n/**\n * Temporarily disables ANR detection for the duration of a callback function.\n *\n * This utility function allows you to disable ANR detection during operations that\n * are expected to block the event loop, such as intensive computational tasks or\n * synchronous I/O operations.\n *\n * @deprecated The ANR integration has been deprecated. Use `eventLoopBlockIntegration` from `@sentry/node-native` instead.\n */\nfunction disableAnrDetectionForCallback(callback) {\n  const integration = core.getClient()?.getIntegrationByName(INTEGRATION_NAME) ;\n\n  if (!integration) {\n    return callback();\n  }\n\n  integration.stopWorker();\n\n  const result = callback();\n  if (isPromise(result)) {\n    return result.finally(() => integration.startWorker());\n  }\n\n  integration.startWorker();\n  return result;\n}\n\nexports.anrIntegration = anrIntegration;\nexports.base64WorkerScript = base64WorkerScript;\nexports.disableAnrDetectionForCallback = disableAnrDetectionForCallback;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/anr/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/childProcess.js":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/childProcess.js ***!
  \*******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'ChildProcess';\n\n/**\n * Capture breadcrumbs and events for child processes and worker threads.\n */\nconst childProcessIntegration = core.defineIntegration((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    setup() {\n      diagnosticsChannel.channel('child_process').subscribe((event) => {\n        if (event && typeof event === 'object' && 'process' in event) {\n          captureChildProcessEvents(event.process , options);\n        }\n      });\n\n      diagnosticsChannel.channel('worker_threads').subscribe((event) => {\n        if (event && typeof event === 'object' && 'worker' in event) {\n          captureWorkerThreadEvents(event.worker , options);\n        }\n      });\n    },\n  };\n});\n\nfunction captureChildProcessEvents(child, options) {\n  let hasExited = false;\n  let data;\n\n  child\n    .on('spawn', () => {\n      // This is Sentry getting macOS OS context\n      if (child.spawnfile === '/usr/bin/sw_vers') {\n        hasExited = true;\n        return;\n      }\n\n      data = { spawnfile: child.spawnfile };\n      if (options.includeChildProcessArgs) {\n        data.spawnargs = child.spawnargs;\n      }\n    })\n    .on('exit', code => {\n      if (!hasExited) {\n        hasExited = true;\n\n        // Only log for non-zero exit codes\n        if (code !== null && code !== 0) {\n          core.addBreadcrumb({\n            category: 'child_process',\n            message: `Child process exited with code '${code}'`,\n            level: code === 0 ? 'info' : 'warning',\n            data,\n          });\n        }\n      }\n    })\n    .on('error', error => {\n      if (!hasExited) {\n        hasExited = true;\n\n        core.addBreadcrumb({\n          category: 'child_process',\n          message: `Child process errored with '${error.message}'`,\n          level: 'error',\n          data,\n        });\n      }\n    });\n}\n\nfunction captureWorkerThreadEvents(worker, options) {\n  let threadId;\n\n  worker\n    .on('online', () => {\n      threadId = worker.threadId;\n    })\n    .on('error', error => {\n      if (options.captureWorkerErrors !== false) {\n        core.captureException(error, {\n          mechanism: { type: 'auto.child_process.worker_thread', handled: false, data: { threadId: String(threadId) } },\n        });\n      } else {\n        core.addBreadcrumb({\n          category: 'worker_thread',\n          message: `Worker thread errored with '${error.message}'`,\n          level: 'error',\n          data: { threadId },\n        });\n      }\n    });\n}\n\nexports.childProcessIntegration = childProcessIntegration;\n//# sourceMappingURL=childProcess.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvY2hpbGRQcm9jZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDJCQUEyQixtQkFBTyxDQUFDLDBEQUEwQjtBQUM3RCxhQUFhLG1CQUFPLENBQUMsNkhBQWM7O0FBRW5DOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRTtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsS0FBSztBQUM3RDtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrREFBa0QsY0FBYztBQUNoRTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixrRUFBa0UsOEJBQThCO0FBQ3ZILFNBQVM7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBLGtEQUFrRCxjQUFjO0FBQ2hFO0FBQ0Esa0JBQWtCLFVBQVU7QUFDNUIsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMOztBQUVBLCtCQUErQjtBQUMvQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2NoaWxkUHJvY2Vzcy5qcz8zNzI0Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBkaWFnbm9zdGljc0NoYW5uZWwgPSByZXF1aXJlKCdub2RlOmRpYWdub3N0aWNzX2NoYW5uZWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdDaGlsZFByb2Nlc3MnO1xuXG4vKipcbiAqIENhcHR1cmUgYnJlYWRjcnVtYnMgYW5kIGV2ZW50cyBmb3IgY2hpbGQgcHJvY2Vzc2VzIGFuZCB3b3JrZXIgdGhyZWFkcy5cbiAqL1xuY29uc3QgY2hpbGRQcm9jZXNzSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKChvcHRpb25zID0ge30pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKCkge1xuICAgICAgZGlhZ25vc3RpY3NDaGFubmVsLmNoYW5uZWwoJ2NoaWxkX3Byb2Nlc3MnKS5zdWJzY3JpYmUoKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudCAmJiB0eXBlb2YgZXZlbnQgPT09ICdvYmplY3QnICYmICdwcm9jZXNzJyBpbiBldmVudCkge1xuICAgICAgICAgIGNhcHR1cmVDaGlsZFByb2Nlc3NFdmVudHMoZXZlbnQucHJvY2VzcyAsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgZGlhZ25vc3RpY3NDaGFubmVsLmNoYW5uZWwoJ3dvcmtlcl90aHJlYWRzJykuc3Vic2NyaWJlKChldmVudCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnQgJiYgdHlwZW9mIGV2ZW50ID09PSAnb2JqZWN0JyAmJiAnd29ya2VyJyBpbiBldmVudCkge1xuICAgICAgICAgIGNhcHR1cmVXb3JrZXJUaHJlYWRFdmVudHMoZXZlbnQud29ya2VyICwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuZnVuY3Rpb24gY2FwdHVyZUNoaWxkUHJvY2Vzc0V2ZW50cyhjaGlsZCwgb3B0aW9ucykge1xuICBsZXQgaGFzRXhpdGVkID0gZmFsc2U7XG4gIGxldCBkYXRhO1xuXG4gIGNoaWxkXG4gICAgLm9uKCdzcGF3bicsICgpID0+IHtcbiAgICAgIC8vIFRoaXMgaXMgU2VudHJ5IGdldHRpbmcgbWFjT1MgT1MgY29udGV4dFxuICAgICAgaWYgKGNoaWxkLnNwYXduZmlsZSA9PT0gJy91c3IvYmluL3N3X3ZlcnMnKSB7XG4gICAgICAgIGhhc0V4aXRlZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGF0YSA9IHsgc3Bhd25maWxlOiBjaGlsZC5zcGF3bmZpbGUgfTtcbiAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVDaGlsZFByb2Nlc3NBcmdzKSB7XG4gICAgICAgIGRhdGEuc3Bhd25hcmdzID0gY2hpbGQuc3Bhd25hcmdzO1xuICAgICAgfVxuICAgIH0pXG4gICAgLm9uKCdleGl0JywgY29kZSA9PiB7XG4gICAgICBpZiAoIWhhc0V4aXRlZCkge1xuICAgICAgICBoYXNFeGl0ZWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIE9ubHkgbG9nIGZvciBub24temVybyBleGl0IGNvZGVzXG4gICAgICAgIGlmIChjb2RlICE9PSBudWxsICYmIGNvZGUgIT09IDApIHtcbiAgICAgICAgICBjb3JlLmFkZEJyZWFkY3J1bWIoe1xuICAgICAgICAgICAgY2F0ZWdvcnk6ICdjaGlsZF9wcm9jZXNzJyxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBDaGlsZCBwcm9jZXNzIGV4aXRlZCB3aXRoIGNvZGUgJyR7Y29kZX0nYCxcbiAgICAgICAgICAgIGxldmVsOiBjb2RlID09PSAwID8gJ2luZm8nIDogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gICAgLm9uKCdlcnJvcicsIGVycm9yID0+IHtcbiAgICAgIGlmICghaGFzRXhpdGVkKSB7XG4gICAgICAgIGhhc0V4aXRlZCA9IHRydWU7XG5cbiAgICAgICAgY29yZS5hZGRCcmVhZGNydW1iKHtcbiAgICAgICAgICBjYXRlZ29yeTogJ2NoaWxkX3Byb2Nlc3MnLFxuICAgICAgICAgIG1lc3NhZ2U6IGBDaGlsZCBwcm9jZXNzIGVycm9yZWQgd2l0aCAnJHtlcnJvci5tZXNzYWdlfSdgLFxuICAgICAgICAgIGxldmVsOiAnZXJyb3InLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjYXB0dXJlV29ya2VyVGhyZWFkRXZlbnRzKHdvcmtlciwgb3B0aW9ucykge1xuICBsZXQgdGhyZWFkSWQ7XG5cbiAgd29ya2VyXG4gICAgLm9uKCdvbmxpbmUnLCAoKSA9PiB7XG4gICAgICB0aHJlYWRJZCA9IHdvcmtlci50aHJlYWRJZDtcbiAgICB9KVxuICAgIC5vbignZXJyb3InLCBlcnJvciA9PiB7XG4gICAgICBpZiAob3B0aW9ucy5jYXB0dXJlV29ya2VyRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24oZXJyb3IsIHtcbiAgICAgICAgICBtZWNoYW5pc206IHsgdHlwZTogJ2F1dG8uY2hpbGRfcHJvY2Vzcy53b3JrZXJfdGhyZWFkJywgaGFuZGxlZDogZmFsc2UsIGRhdGE6IHsgdGhyZWFkSWQ6IFN0cmluZyh0aHJlYWRJZCkgfSB9LFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvcmUuYWRkQnJlYWRjcnVtYih7XG4gICAgICAgICAgY2F0ZWdvcnk6ICd3b3JrZXJfdGhyZWFkJyxcbiAgICAgICAgICBtZXNzYWdlOiBgV29ya2VyIHRocmVhZCBlcnJvcmVkIHdpdGggJyR7ZXJyb3IubWVzc2FnZX0nYCxcbiAgICAgICAgICBsZXZlbDogJ2Vycm9yJyxcbiAgICAgICAgICBkYXRhOiB7IHRocmVhZElkIH0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xufVxuXG5leHBvcnRzLmNoaWxkUHJvY2Vzc0ludGVncmF0aW9uID0gY2hpbGRQcm9jZXNzSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaGlsZFByb2Nlc3MuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/childProcess.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/context.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/context.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_child_process = __webpack_require__(/*! node:child_process */ \"node:child_process\");\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/* eslint-disable max-lines */\n\n\nconst readFileAsync = util.promisify(node_fs.readFile);\nconst readDirAsync = util.promisify(node_fs.readdir);\n\n// Process enhanced with methods from Node 18, 20, 22 as @types/node\n// is on `14.18.0` to match minimum version requirements of the SDK\n\nconst INTEGRATION_NAME = 'Context';\n\nconst _nodeContextIntegration = ((options = {}) => {\n  let cachedContext;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event) {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    // TODO(v11): conditional with `sendDefaultPii` here?\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ...event.contexts?.app },\n      os: { ...updatedContext.os, ...event.contexts?.os },\n      device: { ...updatedContext.device, ...event.contexts?.device },\n      culture: { ...updatedContext.culture, ...event.contexts?.culture },\n      cloud_resource: { ...updatedContext.cloud_resource, ...event.contexts?.cloud_resource },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts() {\n    const contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) ;\n\n/**\n * Capture context about the environment and the device that the client is running on, to events.\n */\nconst nodeContextIntegration = core.defineIntegration(_nodeContextIntegration);\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts) {\n  // Only update properties if they exist\n\n  if (contexts.app?.app_memory) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (contexts.app?.free_memory && typeof (process ).availableMemory === 'function') {\n    const freeMemory = (process ).availableMemory?.();\n    if (freeMemory != null) {\n      contexts.app.free_memory = freeMemory;\n    }\n  }\n\n  if (contexts.device?.free_memory) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext() {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext() {\n  try {\n    if (typeof process.versions.icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch {\n    //\n  }\n\n  return;\n}\n\n/**\n * Get app context information from process\n */\nfunction getAppContext() {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n  // https://nodejs.org/api/process.html#processavailablememory\n  const appContext = { app_start_time, app_memory };\n\n  if (typeof (process ).availableMemory === 'function') {\n    const freeMemory = (process ).availableMemory?.();\n    if (freeMemory != null) {\n      appContext.free_memory = freeMemory;\n    }\n  }\n\n  return appContext;\n}\n\n/**\n * Gets device information from os\n */\nfunction getDeviceContext(deviceOpt) {\n  const device = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime();\n  } catch {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus() ;\n    const firstCpu = cpuInfo?.[0];\n    if (firstCpu) {\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n  ohos: 'OpenHarmony',\n  android: 'Android',\n};\n\n/** Linux version file to check for a distribution. */\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS\n\n = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex, text) {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo() {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise((resolve, reject) => {\n      node_child_process.execFile('/usr/bin/sw_vers', (error, stdout) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name) {\n  return (name.split(' ') )[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo() {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = node_path.join('/etc', distroFile.name);\n    const contents = (await readFileAsync(distroPath, { encoding: 'utf-8' })).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = LINUX_VERSIONS[id]?.(contents);\n  } catch {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext() {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n\nexports.getAppContext = getAppContext;\nexports.getDeviceContext = getDeviceContext;\nexports.nodeContextIntegration = nodeContextIntegration;\nexports.readDirAsync = readDirAsync;\nexports.readFileAsync = readFileAsync;\n//# sourceMappingURL=context.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/context.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/contextlines.js":
/*!*******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/contextlines.js ***!
  \*******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_readline = __webpack_require__(/*! node:readline */ \"node:readline\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/debug-build.js\");\n\nconst LRU_FILE_CONTENTS_CACHE = new core.LRUMap(10);\nconst LRU_FILE_CONTENTS_FS_READ_FAILED = new core.LRUMap(20);\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\n// Determines the upper bound of lineno/colno that we will attempt to read. Large colno values are likely to be\n// minified code while large lineno values are likely to be bundled code.\n// Exported for testing purposes.\nconst MAX_CONTEXTLINES_COLNO = 1000;\nconst MAX_CONTEXTLINES_LINENO = 10000;\n\n/**\n * Get or init map value\n */\nfunction emplace(map, key, contents) {\n  const value = map.get(key);\n\n  if (value === undefined) {\n    map.set(key, contents);\n    return contents;\n  }\n\n  return value;\n}\n\n/**\n * Determines if context lines should be skipped for a file.\n * - .min.(mjs|cjs|js) files are and not useful since they dont point to the original source\n * - node: prefixed modules are part of the runtime and cannot be resolved to a file\n * - data: skip json, wasm and inline js https://nodejs.org/api/esm.html#data-imports\n */\nfunction shouldSkipContextLinesForFile(path) {\n  // Test the most common prefix and extension first. These are the ones we\n  // are most likely to see in user applications and are the ones we can break out of first.\n  if (path.startsWith('node:')) return true;\n  if (path.endsWith('.min.js')) return true;\n  if (path.endsWith('.min.cjs')) return true;\n  if (path.endsWith('.min.mjs')) return true;\n  if (path.startsWith('data:')) return true;\n  return false;\n}\n\n/**\n * Determines if we should skip contextlines based off the max lineno and colno values.\n */\nfunction shouldSkipContextLinesForFrame(frame) {\n  if (frame.lineno !== undefined && frame.lineno > MAX_CONTEXTLINES_LINENO) return true;\n  if (frame.colno !== undefined && frame.colno > MAX_CONTEXTLINES_COLNO) return true;\n  return false;\n}\n/**\n * Checks if we have all the contents that we need in the cache.\n */\nfunction rangeExistsInContentCache(file, range) {\n  const contents = LRU_FILE_CONTENTS_CACHE.get(file);\n  if (contents === undefined) return false;\n\n  for (let i = range[0]; i <= range[1]; i++) {\n    if (contents[i] === undefined) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Creates contiguous ranges of lines to read from a file. In the case where context lines overlap,\n * the ranges are merged to create a single range.\n */\nfunction makeLineReaderRanges(lines, linecontext) {\n  if (!lines.length) {\n    return [];\n  }\n\n  let i = 0;\n  const line = lines[0];\n\n  if (typeof line !== 'number') {\n    return [];\n  }\n\n  let current = makeContextRange(line, linecontext);\n  const out = [];\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (i === lines.length - 1) {\n      out.push(current);\n      break;\n    }\n\n    // If the next line falls into the current range, extend the current range to lineno + linecontext.\n    const next = lines[i + 1];\n    if (typeof next !== 'number') {\n      break;\n    }\n    if (next <= current[1]) {\n      current[1] = next + linecontext;\n    } else {\n      out.push(current);\n      current = makeContextRange(next, linecontext);\n    }\n\n    i++;\n  }\n\n  return out;\n}\n\n/**\n * Extracts lines from a file and stores them in a cache.\n */\nfunction getContextLinesFromFile(path, ranges, output) {\n  return new Promise((resolve, _reject) => {\n    // It is important *not* to have any async code between createInterface and the 'line' event listener\n    // as it will cause the 'line' event to\n    // be emitted before the listener is attached.\n    const stream = node_fs.createReadStream(path);\n    const lineReaded = node_readline.createInterface({\n      input: stream,\n    });\n\n    // We need to explicitly destroy the stream to prevent memory leaks,\n    // removing the listeners on the readline interface is not enough.\n    // See: https://github.com/nodejs/node/issues/9002 and https://github.com/getsentry/sentry-javascript/issues/14892\n    function destroyStreamAndResolve() {\n      stream.destroy();\n      resolve();\n    }\n\n    // Init at zero and increment at the start of the loop because lines are 1 indexed.\n    let lineNumber = 0;\n    let currentRangeIndex = 0;\n    const range = ranges[currentRangeIndex];\n    if (range === undefined) {\n      // We should never reach this point, but if we do, we should resolve the promise to prevent it from hanging.\n      destroyStreamAndResolve();\n      return;\n    }\n    let rangeStart = range[0];\n    let rangeEnd = range[1];\n\n    // We use this inside Promise.all, so we need to resolve the promise even if there is an error\n    // to prevent Promise.all from short circuiting the rest.\n    function onStreamError(e) {\n      // Mark file path as failed to read and prevent multiple read attempts.\n      LRU_FILE_CONTENTS_FS_READ_FAILED.set(path, 1);\n      debugBuild.DEBUG_BUILD && core.debug.error(`Failed to read file: ${path}. Error: ${e}`);\n      lineReaded.close();\n      lineReaded.removeAllListeners();\n      destroyStreamAndResolve();\n    }\n\n    // We need to handle the error event to prevent the process from crashing in < Node 16\n    // https://github.com/nodejs/node/pull/31603\n    stream.on('error', onStreamError);\n    lineReaded.on('error', onStreamError);\n    lineReaded.on('close', destroyStreamAndResolve);\n\n    lineReaded.on('line', line => {\n      lineNumber++;\n      if (lineNumber < rangeStart) return;\n\n      // !Warning: This mutates the cache by storing the snipped line into the cache.\n      output[lineNumber] = core.snipLine(line, 0);\n\n      if (lineNumber >= rangeEnd) {\n        if (currentRangeIndex === ranges.length - 1) {\n          // We need to close the file stream and remove listeners, else the reader will continue to run our listener;\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        currentRangeIndex++;\n        const range = ranges[currentRangeIndex];\n        if (range === undefined) {\n          // This should never happen as it means we have a bug in the context.\n          lineReaded.close();\n          lineReaded.removeAllListeners();\n          return;\n        }\n        rangeStart = range[0];\n        rangeEnd = range[1];\n      }\n    });\n  });\n}\n\n/**\n * Adds surrounding (context) lines of the line that an exception occurred on to the event.\n * This is done by reading the file line by line and extracting the lines. The extracted lines are stored in\n * a cache to prevent multiple reads of the same file. Failures to read a file are similarly cached to prevent multiple\n * failing reads from happening.\n */\n/* eslint-disable complexity */\nasync function addSourceContext(event, contextLines) {\n  // keep a lookup map of which files we've already enqueued to read,\n  // so we don't enqueue the same file multiple times which would cause multiple i/o reads\n  const filesToLines = {};\n\n  if (contextLines > 0 && event.exception?.values) {\n    for (const exception of event.exception.values) {\n      if (!exception.stacktrace?.frames?.length) {\n        continue;\n      }\n\n      // Maps preserve insertion order, so we iterate in reverse, starting at the\n      // outermost frame and closer to where the exception has occurred (poor mans priority)\n      for (let i = exception.stacktrace.frames.length - 1; i >= 0; i--) {\n        const frame = exception.stacktrace.frames[i];\n        const filename = frame?.filename;\n\n        if (\n          !frame ||\n          typeof filename !== 'string' ||\n          typeof frame.lineno !== 'number' ||\n          shouldSkipContextLinesForFile(filename) ||\n          shouldSkipContextLinesForFrame(frame)\n        ) {\n          continue;\n        }\n\n        const filesToLinesOutput = filesToLines[filename];\n        if (!filesToLinesOutput) filesToLines[filename] = [];\n        // @ts-expect-error this is defined above\n        filesToLines[filename].push(frame.lineno);\n      }\n    }\n  }\n\n  const files = Object.keys(filesToLines);\n  if (files.length == 0) {\n    return event;\n  }\n\n  const readlinePromises = [];\n  for (const file of files) {\n    // If we failed to read this before, dont try reading it again.\n    if (LRU_FILE_CONTENTS_FS_READ_FAILED.get(file)) {\n      continue;\n    }\n\n    const filesToLineRanges = filesToLines[file];\n    if (!filesToLineRanges) {\n      continue;\n    }\n\n    // Sort ranges so that they are sorted by line increasing order and match how the file is read.\n    filesToLineRanges.sort((a, b) => a - b);\n    // Check if the contents are already in the cache and if we can avoid reading the file again.\n    const ranges = makeLineReaderRanges(filesToLineRanges, contextLines);\n    if (ranges.every(r => rangeExistsInContentCache(file, r))) {\n      continue;\n    }\n\n    const cache = emplace(LRU_FILE_CONTENTS_CACHE, file, {});\n    readlinePromises.push(getContextLinesFromFile(file, ranges, cache));\n  }\n\n  // The promise rejections are caught in order to prevent them from short circuiting Promise.all\n  await Promise.all(readlinePromises).catch(() => {\n    debugBuild.DEBUG_BUILD && core.debug.log('Failed to read one or more source files and resolve context lines');\n  });\n\n  // Perform the same loop as above, but this time we can assume all files are in the cache\n  // and attempt to add source context to frames.\n  if (contextLines > 0 && event.exception?.values) {\n    for (const exception of event.exception.values) {\n      if (exception.stacktrace?.frames && exception.stacktrace.frames.length > 0) {\n        addSourceContextToFrames(exception.stacktrace.frames, contextLines, LRU_FILE_CONTENTS_CACHE);\n      }\n    }\n  }\n\n  return event;\n}\n/* eslint-enable complexity */\n\n/** Adds context lines to frames */\nfunction addSourceContextToFrames(\n  frames,\n  contextLines,\n  cache,\n) {\n  for (const frame of frames) {\n    // Only add context if we have a filename and it hasn't already been added\n    if (frame.filename && frame.context_line === undefined && typeof frame.lineno === 'number') {\n      const contents = cache.get(frame.filename);\n      if (contents === undefined) {\n        continue;\n      }\n\n      addContextToFrame(frame.lineno, frame, contextLines, contents);\n    }\n  }\n}\n\n/**\n * Clears the context lines from a frame, used to reset a frame to its original state\n * if we fail to resolve all context lines for it.\n */\nfunction clearLineContext(frame) {\n  delete frame.pre_context;\n  delete frame.context_line;\n  delete frame.post_context;\n}\n\n/**\n * Resolves context lines before and after the given line number and appends them to the frame;\n */\nfunction addContextToFrame(\n  lineno,\n  frame,\n  contextLines,\n  contents,\n) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping.\n  // We already check for lineno before calling this, but since StackFrame lineno ism optional, we check it again.\n  if (frame.lineno === undefined || contents === undefined) {\n    debugBuild.DEBUG_BUILD && core.debug.error('Cannot resolve context for frame with no lineno or file contents');\n    return;\n  }\n\n  frame.pre_context = [];\n  for (let i = makeRangeStart(lineno, contextLines); i < lineno; i++) {\n    // We always expect the start context as line numbers cannot be negative. If we dont find a line, then\n    // something went wrong somewhere. Clear the context and return without adding any linecontext.\n    const line = contents[i];\n    if (line === undefined) {\n      clearLineContext(frame);\n      debugBuild.DEBUG_BUILD && core.debug.error(`Could not find line ${i} in file ${frame.filename}`);\n      return;\n    }\n\n    frame.pre_context.push(line);\n  }\n\n  // We should always have the context line. If we dont, something went wrong, so we clear the context and return\n  // without adding any linecontext.\n  if (contents[lineno] === undefined) {\n    clearLineContext(frame);\n    debugBuild.DEBUG_BUILD && core.debug.error(`Could not find line ${lineno} in file ${frame.filename}`);\n    return;\n  }\n\n  frame.context_line = contents[lineno];\n\n  const end = makeRangeEnd(lineno, contextLines);\n  frame.post_context = [];\n  for (let i = lineno + 1; i <= end; i++) {\n    // Since we dont track when the file ends, we cant clear the context if we dont find a line as it could\n    // just be that we reached the end of the file.\n    const line = contents[i];\n    if (line === undefined) {\n      break;\n    }\n    frame.post_context.push(line);\n  }\n}\n\n// Helper functions for generating line context ranges. They take a line number and the number of lines of context to\n// include before and after the line and generate an inclusive range of indices.\n\n// Compute inclusive end context range\nfunction makeRangeStart(line, linecontext) {\n  return Math.max(1, line - linecontext);\n}\n// Compute inclusive start context range\nfunction makeRangeEnd(line, linecontext) {\n  return line + linecontext;\n}\n// Determine start and end indices for context range (inclusive);\nfunction makeContextRange(line, linecontext) {\n  return [makeRangeStart(line, linecontext), makeRangeEnd(line, linecontext)];\n}\n\n/** Exported only for tests, as a type-safe variant. */\nconst _contextLinesIntegration = ((options = {}) => {\n  const contextLines = options.frameContextLines !== undefined ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    },\n  };\n}) ;\n\n/**\n * Capture the lines before and after the frame's context.\n */\nconst contextLinesIntegration = core.defineIntegration(_contextLinesIntegration);\n\nexports.MAX_CONTEXTLINES_COLNO = MAX_CONTEXTLINES_COLNO;\nexports.MAX_CONTEXTLINES_LINENO = MAX_CONTEXTLINES_LINENO;\nexports._contextLinesIntegration = _contextLinesIntegration;\nexports.addContextToFrame = addContextToFrame;\nexports.contextLinesIntegration = contextLinesIntegration;\n//# sourceMappingURL=contextlines.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/contextlines.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/SentryHttpInstrumentation.js":
/*!*************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/SentryHttpInstrumentation.js ***!
  \*************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/debug-build.js\");\nconst getRequestUrl = __webpack_require__(/*! ../../utils/getRequestUrl.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/getRequestUrl.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/constants.js\");\nconst outgoingRequests = __webpack_require__(/*! ./outgoing-requests.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/outgoing-requests.js\");\n\n/**\n * This custom HTTP instrumentation is used to isolate incoming requests and annotate them with additional information.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * Important note: Contrary to other OTEL instrumentation, this one cannot be unwrapped.\n * It only does minimal things though and does not emit any spans.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js/blob/f8ab5592ddea5cba0a3b33bf8d74f27872c0367f/experimental/packages/opentelemetry-instrumentation-http/src/http.ts\n */\nclass SentryHttpInstrumentation extends instrumentation.InstrumentationBase {\n\n   constructor(config = {}) {\n    super(constants.INSTRUMENTATION_NAME, core.SDK_VERSION, config);\n\n    this._propagationDecisionMap = new core.LRUMap(100);\n    this._ignoreOutgoingRequestsMap = new WeakMap();\n  }\n\n  /** @inheritdoc */\n   init() {\n    // We register handlers when either http or https is instrumented\n    // but we only want to register them once, whichever is loaded first\n    let hasRegisteredHandlers = false;\n\n    const onHttpClientResponseFinish = ((_data) => {\n      const data = _data ;\n      this._onOutgoingRequestFinish(data.request, data.response);\n    }) ;\n\n    const onHttpClientRequestError = ((_data) => {\n      const data = _data ;\n      this._onOutgoingRequestFinish(data.request, undefined);\n    }) ;\n\n    const onHttpClientRequestCreated = ((_data) => {\n      const data = _data ;\n      this._onOutgoingRequestCreated(data.request);\n    }) ;\n\n    const wrap = (moduleExports) => {\n      if (hasRegisteredHandlers) {\n        return moduleExports;\n      }\n\n      hasRegisteredHandlers = true;\n\n      diagnosticsChannel.subscribe('http.client.response.finish', onHttpClientResponseFinish);\n\n      // When an error happens, we still want to have a breadcrumb\n      // In this case, `http.client.response.finish` is not triggered\n      diagnosticsChannel.subscribe('http.client.request.error', onHttpClientRequestError);\n\n      // NOTE: This channel only exist since Node 22\n      // Before that, outgoing requests are not patched\n      // and trace headers are not propagated, sadly.\n      if (this.getConfig().propagateTraceInOutgoingRequests) {\n        diagnosticsChannel.subscribe('http.client.request.created', onHttpClientRequestCreated);\n      }\n\n      return moduleExports;\n    };\n\n    const unwrap = () => {\n      diagnosticsChannel.unsubscribe('http.client.response.finish', onHttpClientResponseFinish);\n      diagnosticsChannel.unsubscribe('http.client.request.error', onHttpClientRequestError);\n      diagnosticsChannel.unsubscribe('http.client.request.created', onHttpClientRequestCreated);\n    };\n\n    /**\n     * You may be wondering why we register these diagnostics-channel listeners\n     * in such a convoluted way (as InstrumentationNodeModuleDefinition...)˝,\n     * instead of simply subscribing to the events once in here.\n     * The reason for this is timing semantics: These functions are called once the http or https module is loaded.\n     * If we'd subscribe before that, there seem to be conflicts with the OTEL native instrumentation in some scenarios,\n     * especially the \"import-on-top\" pattern of setting up ESM applications.\n     */\n    return [\n      new instrumentation.InstrumentationNodeModuleDefinition('http', ['*'], wrap, unwrap),\n      new instrumentation.InstrumentationNodeModuleDefinition('https', ['*'], wrap, unwrap),\n    ];\n  }\n\n  /**\n   * This is triggered when an outgoing request finishes.\n   * It has access to the final request and response objects.\n   */\n   _onOutgoingRequestFinish(request, response) {\n    debugBuild.DEBUG_BUILD && core.debug.log(constants.INSTRUMENTATION_NAME, 'Handling finished outgoing request');\n\n    const _breadcrumbs = this.getConfig().breadcrumbs;\n    const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n\n    // Note: We cannot rely on the map being set by `_onOutgoingRequestCreated`, because that is not run in Node <22\n    const shouldIgnore = this._ignoreOutgoingRequestsMap.get(request) ?? this._shouldIgnoreOutgoingRequest(request);\n    this._ignoreOutgoingRequestsMap.set(request, shouldIgnore);\n\n    if (breadCrumbsEnabled && !shouldIgnore) {\n      outgoingRequests.addRequestBreadcrumb(request, response);\n    }\n  }\n\n  /**\n   * This is triggered when an outgoing request is created.\n   * It has access to the request object, and can mutate it before the request is sent.\n   */\n   _onOutgoingRequestCreated(request) {\n    const shouldIgnore = this._ignoreOutgoingRequestsMap.get(request) ?? this._shouldIgnoreOutgoingRequest(request);\n    this._ignoreOutgoingRequestsMap.set(request, shouldIgnore);\n\n    if (shouldIgnore) {\n      return;\n    }\n\n    outgoingRequests.addTracePropagationHeadersToOutgoingRequest(request, this._propagationDecisionMap);\n  }\n\n  /**\n   * Check if the given outgoing request should be ignored.\n   */\n   _shouldIgnoreOutgoingRequest(request) {\n    if (core$1.isTracingSuppressed(api.context.active())) {\n      return true;\n    }\n\n    const ignoreOutgoingRequests = this.getConfig().ignoreOutgoingRequests;\n\n    if (!ignoreOutgoingRequests) {\n      return false;\n    }\n\n    const options = outgoingRequests.getRequestOptions(request);\n    const url = getRequestUrl.getRequestUrl(request);\n    return ignoreOutgoingRequests(url, options);\n  }\n}\n\nexports.SentryHttpInstrumentation = SentryHttpInstrumentation;\n//# sourceMappingURL=SentryHttpInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/SentryHttpInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/constants.js":
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/constants.js ***!
  \*********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst INSTRUMENTATION_NAME = '@sentry/instrumentation-http';\n\n/** We only want to capture request bodies up to 1mb. */\nconst MAX_BODY_BYTE_LENGTH = 1024 * 1024;\n\nexports.INSTRUMENTATION_NAME = INSTRUMENTATION_NAME;\nexports.MAX_BODY_BYTE_LENGTH = MAX_BODY_BYTE_LENGTH;\n//# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvaHR0cC9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7O0FBRUE7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUIsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvaHR0cC9jb25zdGFudHMuanM/MTkzZSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgSU5TVFJVTUVOVEFUSU9OX05BTUUgPSAnQHNlbnRyeS9pbnN0cnVtZW50YXRpb24taHR0cCc7XG5cbi8qKiBXZSBvbmx5IHdhbnQgdG8gY2FwdHVyZSByZXF1ZXN0IGJvZGllcyB1cCB0byAxbWIuICovXG5jb25zdCBNQVhfQk9EWV9CWVRFX0xFTkdUSCA9IDEwMjQgKiAxMDI0O1xuXG5leHBvcnRzLklOU1RSVU1FTlRBVElPTl9OQU1FID0gSU5TVFJVTUVOVEFUSU9OX05BTUU7XG5leHBvcnRzLk1BWF9CT0RZX0JZVEVfTEVOR1RIID0gTUFYX0JPRFlfQllURV9MRU5HVEg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/constants.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/httpServerIntegration.js":
/*!*********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/httpServerIntegration.js ***!
  \*********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/debug-build.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/constants.js\");\n\nconst HTTP_SERVER_INSTRUMENTED_KEY = api.createContextKey('sentry_http_server_instrumented');\nconst INTEGRATION_NAME = 'Http.Server';\n\nconst clientToRequestSessionAggregatesMap = new Map\n\n();\n\n// We keep track of emit functions we wrapped, to avoid double wrapping\n// We do this instead of putting a non-enumerable property on the function, because\n// sometimes the property seems to be migrated to forks of the emit function, which we do not want to happen\n// This was the case in the nestjs-distributed-tracing E2E test\nconst wrappedEmitFns = new WeakSet();\n\n/**\n * Add a callback to the request object that will be called when the request is started.\n * The callback will receive the next function to continue processing the request.\n */\nfunction addStartSpanCallback(request, callback) {\n  core.addNonEnumerableProperty(request, '_startSpanCallback', new WeakRef(callback));\n}\n\nconst _httpServerIntegration = ((options = {}) => {\n  const _options = {\n    sessions: options.sessions ?? true,\n    sessionFlushingDelayMS: options.sessionFlushingDelayMS ?? 60000,\n    maxRequestBodySize: options.maxRequestBodySize ?? 'medium',\n    ignoreRequestBody: options.ignoreRequestBody,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      const onHttpServerRequestStart = ((_data) => {\n        const data = _data ;\n\n        instrumentServer(data.server, _options);\n      }) ;\n\n      diagnosticsChannel.subscribe('http.server.request.start', onHttpServerRequestStart);\n    },\n    afterAllSetup(client) {\n      if (debugBuild.DEBUG_BUILD && client.getIntegrationByName('Http')) {\n        core.debug.warn(\n          'It seems that you have manually added `httpServerIntegration` while `httpIntegration` is also present. Make sure to remove `httpServerIntegration` when adding `httpIntegration`.',\n        );\n      }\n    },\n  };\n}) ;\n\n/**\n * This integration handles request isolation, trace continuation and other core Sentry functionality around incoming http requests\n * handled via the node `http` module.\n */\nconst httpServerIntegration = _httpServerIntegration\n\n;\n\n/**\n * Instrument a server to capture incoming requests.\n *\n */\nfunction instrumentServer(\n  server,\n  {\n    ignoreRequestBody,\n    maxRequestBodySize,\n    sessions,\n    sessionFlushingDelayMS,\n  }\n\n,\n) {\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const originalEmit = server.emit;\n\n  if (wrappedEmitFns.has(originalEmit)) {\n    return;\n  }\n\n  const newEmit = new Proxy(originalEmit, {\n    apply(target, thisArg, args) {\n      // Only traces request events\n      if (args[0] !== 'request') {\n        return target.apply(thisArg, args);\n      }\n\n      const client = core.getClient();\n\n      // Make sure we do not double execute our wrapper code, for edge cases...\n      // Without this check, if we double-wrap emit, for whatever reason, you'd get two http.server spans (one the children of the other)\n      if (api.context.active().getValue(HTTP_SERVER_INSTRUMENTED_KEY) || !client) {\n        return target.apply(thisArg, args);\n      }\n\n      debugBuild.DEBUG_BUILD && core.debug.log(INTEGRATION_NAME, 'Handling incoming request');\n\n      const isolationScope = core.getIsolationScope().clone();\n      const request = args[1] ;\n      const response = args[2] ;\n\n      const normalizedRequest = core.httpRequestToRequestData(request);\n\n      // request.ip is non-standard but some frameworks set this\n      const ipAddress = (request ).ip || request.socket?.remoteAddress;\n\n      const url = request.url || '/';\n      if (maxRequestBodySize !== 'none' && !ignoreRequestBody?.(url, request)) {\n        patchRequestToCaptureBody(request, isolationScope, maxRequestBodySize);\n      }\n\n      // Update the isolation scope, isolate this request\n      isolationScope.setSDKProcessingMetadata({ normalizedRequest, ipAddress });\n\n      // attempt to update the scope's `transactionName` based on the request URL\n      // Ideally, framework instrumentations coming after the HttpInstrumentation\n      // update the transactionName once we get a parameterized route.\n      const httpMethod = (request.method || 'GET').toUpperCase();\n      const httpTargetWithoutQueryFragment = core.stripUrlQueryAndFragment(url);\n\n      const bestEffortTransactionName = `${httpMethod} ${httpTargetWithoutQueryFragment}`;\n\n      isolationScope.setTransactionName(bestEffortTransactionName);\n\n      if (sessions && client) {\n        recordRequestSession(client, {\n          requestIsolationScope: isolationScope,\n          response,\n          sessionFlushingDelayMS: sessionFlushingDelayMS ?? 60000,\n        });\n      }\n\n      return core.withIsolationScope(isolationScope, () => {\n        // Set a new propagationSpanId for this request\n        // We rely on the fact that `withIsolationScope()` will implicitly also fork the current scope\n        // This way we can save an \"unnecessary\" `withScope()` invocation\n        core.getCurrentScope().getPropagationContext().propagationSpanId = core.generateSpanId();\n\n        const ctx = api.propagation\n          .extract(api.context.active(), normalizedRequest.headers)\n          .setValue(HTTP_SERVER_INSTRUMENTED_KEY, true);\n\n        return api.context.with(ctx, () => {\n          // This is used (optionally) by the httpServerSpansIntegration to attach _startSpanCallback to the request object\n          client.emit('httpServerRequest', request, response, normalizedRequest);\n\n          const callback = (request )._startSpanCallback?.deref();\n          if (callback) {\n            return callback(() => target.apply(thisArg, args));\n          }\n          return target.apply(thisArg, args);\n        });\n      });\n    },\n  });\n\n  wrappedEmitFns.add(newEmit);\n  server.emit = newEmit;\n}\n\n/**\n * Starts a session and tracks it in the context of a given isolation scope.\n * When the passed response is finished, the session is put into a task and is\n * aggregated with other sessions that may happen in a certain time window\n * (sessionFlushingDelayMs).\n *\n * The sessions are always aggregated by the client that is on the current scope\n * at the time of ending the response (if there is one).\n */\n// Exported for unit tests\nfunction recordRequestSession(\n  client,\n  {\n    requestIsolationScope,\n    response,\n    sessionFlushingDelayMS,\n  }\n\n,\n) {\n  requestIsolationScope.setSDKProcessingMetadata({\n    requestSession: { status: 'ok' },\n  });\n  response.once('close', () => {\n    const requestSession = requestIsolationScope.getScopeData().sdkProcessingMetadata.requestSession;\n\n    if (client && requestSession) {\n      debugBuild.DEBUG_BUILD && core.debug.log(`Recorded request session with status: ${requestSession.status}`);\n\n      const roundedDate = new Date();\n      roundedDate.setSeconds(0, 0);\n      const dateBucketKey = roundedDate.toISOString();\n\n      const existingClientAggregate = clientToRequestSessionAggregatesMap.get(client);\n      const bucket = existingClientAggregate?.[dateBucketKey] || { exited: 0, crashed: 0, errored: 0 };\n      bucket[({ ok: 'exited', crashed: 'crashed', errored: 'errored' } )[requestSession.status]]++;\n\n      if (existingClientAggregate) {\n        existingClientAggregate[dateBucketKey] = bucket;\n      } else {\n        debugBuild.DEBUG_BUILD && core.debug.log('Opened new request session aggregate.');\n        const newClientAggregate = { [dateBucketKey]: bucket };\n        clientToRequestSessionAggregatesMap.set(client, newClientAggregate);\n\n        const flushPendingClientAggregates = () => {\n          clearTimeout(timeout);\n          unregisterClientFlushHook();\n          clientToRequestSessionAggregatesMap.delete(client);\n\n          const aggregatePayload = Object.entries(newClientAggregate).map(\n            ([timestamp, value]) => ({\n              started: timestamp,\n              exited: value.exited,\n              errored: value.errored,\n              crashed: value.crashed,\n            }),\n          );\n          client.sendSession({ aggregates: aggregatePayload });\n        };\n\n        const unregisterClientFlushHook = client.on('flush', () => {\n          debugBuild.DEBUG_BUILD && core.debug.log('Sending request session aggregate due to client flush');\n          flushPendingClientAggregates();\n        });\n        const timeout = setTimeout(() => {\n          debugBuild.DEBUG_BUILD && core.debug.log('Sending request session aggregate due to flushing schedule');\n          flushPendingClientAggregates();\n        }, sessionFlushingDelayMS).unref();\n      }\n    }\n  });\n}\n\n/**\n * This method patches the request object to capture the body.\n * Instead of actually consuming the streamed body ourselves, which has potential side effects,\n * we monkey patch `req.on('data')` to intercept the body chunks.\n * This way, we only read the body if the user also consumes the body, ensuring we do not change any behavior in unexpected ways.\n */\nfunction patchRequestToCaptureBody(\n  req,\n  isolationScope,\n  maxIncomingRequestBodySize,\n) {\n  let bodyByteLength = 0;\n  const chunks = [];\n\n  debugBuild.DEBUG_BUILD && core.debug.log(INTEGRATION_NAME, 'Patching request.on');\n\n  /**\n   * We need to keep track of the original callbacks, in order to be able to remove listeners again.\n   * Since `off` depends on having the exact same function reference passed in, we need to be able to map\n   * original listeners to our wrapped ones.\n   */\n  const callbackMap = new WeakMap();\n\n  const maxBodySize =\n    maxIncomingRequestBodySize === 'small'\n      ? 1000\n      : maxIncomingRequestBodySize === 'medium'\n        ? 10000\n        : constants.MAX_BODY_BYTE_LENGTH;\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.on = new Proxy(req.on, {\n      apply: (target, thisArg, args) => {\n        const [event, listener, ...restArgs] = args;\n\n        if (event === 'data') {\n          debugBuild.DEBUG_BUILD &&\n            core.debug.log(INTEGRATION_NAME, `Handling request.on(\"data\") with maximum body size of ${maxBodySize}b`);\n\n          const callback = new Proxy(listener, {\n            apply: (target, thisArg, args) => {\n              try {\n                const chunk = args[0] ;\n                const bufferifiedChunk = Buffer.from(chunk);\n\n                if (bodyByteLength < maxBodySize) {\n                  chunks.push(bufferifiedChunk);\n                  bodyByteLength += bufferifiedChunk.byteLength;\n                } else if (debugBuild.DEBUG_BUILD) {\n                  core.debug.log(\n                    INTEGRATION_NAME,\n                    `Dropping request body chunk because maximum body length of ${maxBodySize}b is exceeded.`,\n                  );\n                }\n              } catch (err) {\n                debugBuild.DEBUG_BUILD && core.debug.error(INTEGRATION_NAME, 'Encountered error while storing body chunk.');\n              }\n\n              return Reflect.apply(target, thisArg, args);\n            },\n          });\n\n          callbackMap.set(listener, callback);\n\n          return Reflect.apply(target, thisArg, [event, callback, ...restArgs]);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n\n    // Ensure we also remove callbacks correctly\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    req.off = new Proxy(req.off, {\n      apply: (target, thisArg, args) => {\n        const [, listener] = args;\n\n        const callback = callbackMap.get(listener);\n        if (callback) {\n          callbackMap.delete(listener);\n\n          const modifiedArgs = args.slice();\n          modifiedArgs[1] = callback;\n          return Reflect.apply(target, thisArg, modifiedArgs);\n        }\n\n        return Reflect.apply(target, thisArg, args);\n      },\n    });\n\n    req.on('end', () => {\n      try {\n        const body = Buffer.concat(chunks).toString('utf-8');\n        if (body) {\n          // Using Buffer.byteLength here, because the body may contain characters that are not 1 byte long\n          const bodyByteLength = Buffer.byteLength(body, 'utf-8');\n          const truncatedBody =\n            bodyByteLength > maxBodySize\n              ? `${Buffer.from(body)\n                  .subarray(0, maxBodySize - 3)\n                  .toString('utf-8')}...`\n              : body;\n\n          isolationScope.setSDKProcessingMetadata({ normalizedRequest: { data: truncatedBody } });\n        }\n      } catch (error) {\n        if (debugBuild.DEBUG_BUILD) {\n          core.debug.error(INTEGRATION_NAME, 'Error building captured request body', error);\n        }\n      }\n    });\n  } catch (error) {\n    if (debugBuild.DEBUG_BUILD) {\n      core.debug.error(INTEGRATION_NAME, 'Error patching request to capture body', error);\n    }\n  }\n}\n\nexports.addStartSpanCallback = addStartSpanCallback;\nexports.httpServerIntegration = httpServerIntegration;\nexports.recordRequestSession = recordRequestSession;\n//# sourceMappingURL=httpServerIntegration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvaHR0cC9odHRwU2VydmVySW50ZWdyYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsMkJBQTJCLG1CQUFPLENBQUMsMERBQTBCO0FBQzdELFlBQVksbUJBQU8sQ0FBQyw2SUFBb0I7QUFDeEMsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLG9QQUFzQjtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQyw4UEFBZ0I7O0FBRTFDO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2Q0FBNkM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPOztBQUVQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0RBQWdELDhCQUE4Qjs7QUFFOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQ0FBMkMsWUFBWSxFQUFFLCtCQUErQjs7QUFFeEY7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGNBQWM7QUFDcEMsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQSx3RkFBd0Ysc0JBQXNCOztBQUU5RztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtRUFBbUU7QUFDbkUsZ0JBQWdCLHVEQUF1RDs7QUFFdkU7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLHFDQUFxQztBQUNyQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSwrQkFBK0IsOEJBQThCO0FBQzdEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHNHQUFzRyxZQUFZOztBQUVsSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0Esa0ZBQWtGLFlBQVk7QUFDOUY7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBOztBQUVBO0FBQ0EsYUFBYTtBQUNiLFdBQVc7O0FBRVg7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLHFDQUFxQztBQUNyQzs7QUFFQSxvREFBb0QscUJBQXFCLHVCQUF1QjtBQUNoRztBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUIsNkJBQTZCO0FBQzdCLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2h0dHAvaHR0cFNlcnZlckludGVncmF0aW9uLmpzPzM5MDgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGRpYWdub3N0aWNzQ2hhbm5lbCA9IHJlcXVpcmUoJ25vZGU6ZGlhZ25vc3RpY3NfY2hhbm5lbCcpO1xuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoJy4vY29uc3RhbnRzLmpzJyk7XG5cbmNvbnN0IEhUVFBfU0VSVkVSX0lOU1RSVU1FTlRFRF9LRVkgPSBhcGkuY3JlYXRlQ29udGV4dEtleSgnc2VudHJ5X2h0dHBfc2VydmVyX2luc3RydW1lbnRlZCcpO1xuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdIdHRwLlNlcnZlcic7XG5cbmNvbnN0IGNsaWVudFRvUmVxdWVzdFNlc3Npb25BZ2dyZWdhdGVzTWFwID0gbmV3IE1hcFxuXG4oKTtcblxuLy8gV2Uga2VlcCB0cmFjayBvZiBlbWl0IGZ1bmN0aW9ucyB3ZSB3cmFwcGVkLCB0byBhdm9pZCBkb3VibGUgd3JhcHBpbmdcbi8vIFdlIGRvIHRoaXMgaW5zdGVhZCBvZiBwdXR0aW5nIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gdGhlIGZ1bmN0aW9uLCBiZWNhdXNlXG4vLyBzb21ldGltZXMgdGhlIHByb3BlcnR5IHNlZW1zIHRvIGJlIG1pZ3JhdGVkIHRvIGZvcmtzIG9mIHRoZSBlbWl0IGZ1bmN0aW9uLCB3aGljaCB3ZSBkbyBub3Qgd2FudCB0byBoYXBwZW5cbi8vIFRoaXMgd2FzIHRoZSBjYXNlIGluIHRoZSBuZXN0anMtZGlzdHJpYnV0ZWQtdHJhY2luZyBFMkUgdGVzdFxuY29uc3Qgd3JhcHBlZEVtaXRGbnMgPSBuZXcgV2Vha1NldCgpO1xuXG4vKipcbiAqIEFkZCBhIGNhbGxiYWNrIHRvIHRoZSByZXF1ZXN0IG9iamVjdCB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgaXMgc3RhcnRlZC5cbiAqIFRoZSBjYWxsYmFjayB3aWxsIHJlY2VpdmUgdGhlIG5leHQgZnVuY3Rpb24gdG8gY29udGludWUgcHJvY2Vzc2luZyB0aGUgcmVxdWVzdC5cbiAqL1xuZnVuY3Rpb24gYWRkU3RhcnRTcGFuQ2FsbGJhY2socmVxdWVzdCwgY2FsbGJhY2spIHtcbiAgY29yZS5hZGROb25FbnVtZXJhYmxlUHJvcGVydHkocmVxdWVzdCwgJ19zdGFydFNwYW5DYWxsYmFjaycsIG5ldyBXZWFrUmVmKGNhbGxiYWNrKSk7XG59XG5cbmNvbnN0IF9odHRwU2VydmVySW50ZWdyYXRpb24gPSAoKG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCBfb3B0aW9ucyA9IHtcbiAgICBzZXNzaW9uczogb3B0aW9ucy5zZXNzaW9ucyA/PyB0cnVlLFxuICAgIHNlc3Npb25GbHVzaGluZ0RlbGF5TVM6IG9wdGlvbnMuc2Vzc2lvbkZsdXNoaW5nRGVsYXlNUyA/PyA2MDAwMCxcbiAgICBtYXhSZXF1ZXN0Qm9keVNpemU6IG9wdGlvbnMubWF4UmVxdWVzdEJvZHlTaXplID8/ICdtZWRpdW0nLFxuICAgIGlnbm9yZVJlcXVlc3RCb2R5OiBvcHRpb25zLmlnbm9yZVJlcXVlc3RCb2R5LFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBjb25zdCBvbkh0dHBTZXJ2ZXJSZXF1ZXN0U3RhcnQgPSAoKF9kYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBfZGF0YSA7XG5cbiAgICAgICAgaW5zdHJ1bWVudFNlcnZlcihkYXRhLnNlcnZlciwgX29wdGlvbnMpO1xuICAgICAgfSkgO1xuXG4gICAgICBkaWFnbm9zdGljc0NoYW5uZWwuc3Vic2NyaWJlKCdodHRwLnNlcnZlci5yZXF1ZXN0LnN0YXJ0Jywgb25IdHRwU2VydmVyUmVxdWVzdFN0YXJ0KTtcbiAgICB9LFxuICAgIGFmdGVyQWxsU2V0dXAoY2xpZW50KSB7XG4gICAgICBpZiAoZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjbGllbnQuZ2V0SW50ZWdyYXRpb25CeU5hbWUoJ0h0dHAnKSkge1xuICAgICAgICBjb3JlLmRlYnVnLndhcm4oXG4gICAgICAgICAgJ0l0IHNlZW1zIHRoYXQgeW91IGhhdmUgbWFudWFsbHkgYWRkZWQgYGh0dHBTZXJ2ZXJJbnRlZ3JhdGlvbmAgd2hpbGUgYGh0dHBJbnRlZ3JhdGlvbmAgaXMgYWxzbyBwcmVzZW50LiBNYWtlIHN1cmUgdG8gcmVtb3ZlIGBodHRwU2VydmVySW50ZWdyYXRpb25gIHdoZW4gYWRkaW5nIGBodHRwSW50ZWdyYXRpb25gLicsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBUaGlzIGludGVncmF0aW9uIGhhbmRsZXMgcmVxdWVzdCBpc29sYXRpb24sIHRyYWNlIGNvbnRpbnVhdGlvbiBhbmQgb3RoZXIgY29yZSBTZW50cnkgZnVuY3Rpb25hbGl0eSBhcm91bmQgaW5jb21pbmcgaHR0cCByZXF1ZXN0c1xuICogaGFuZGxlZCB2aWEgdGhlIG5vZGUgYGh0dHBgIG1vZHVsZS5cbiAqL1xuY29uc3QgaHR0cFNlcnZlckludGVncmF0aW9uID0gX2h0dHBTZXJ2ZXJJbnRlZ3JhdGlvblxuXG47XG5cbi8qKlxuICogSW5zdHJ1bWVudCBhIHNlcnZlciB0byBjYXB0dXJlIGluY29taW5nIHJlcXVlc3RzLlxuICpcbiAqL1xuZnVuY3Rpb24gaW5zdHJ1bWVudFNlcnZlcihcbiAgc2VydmVyLFxuICB7XG4gICAgaWdub3JlUmVxdWVzdEJvZHksXG4gICAgbWF4UmVxdWVzdEJvZHlTaXplLFxuICAgIHNlc3Npb25zLFxuICAgIHNlc3Npb25GbHVzaGluZ0RlbGF5TVMsXG4gIH1cblxuLFxuKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvdW5ib3VuZC1tZXRob2RcbiAgY29uc3Qgb3JpZ2luYWxFbWl0ID0gc2VydmVyLmVtaXQ7XG5cbiAgaWYgKHdyYXBwZWRFbWl0Rm5zLmhhcyhvcmlnaW5hbEVtaXQpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbmV3RW1pdCA9IG5ldyBQcm94eShvcmlnaW5hbEVtaXQsIHtcbiAgICBhcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgICAgIC8vIE9ubHkgdHJhY2VzIHJlcXVlc3QgZXZlbnRzXG4gICAgICBpZiAoYXJnc1swXSAhPT0gJ3JlcXVlc3QnKSB7XG4gICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNsaWVudCA9IGNvcmUuZ2V0Q2xpZW50KCk7XG5cbiAgICAgIC8vIE1ha2Ugc3VyZSB3ZSBkbyBub3QgZG91YmxlIGV4ZWN1dGUgb3VyIHdyYXBwZXIgY29kZSwgZm9yIGVkZ2UgY2FzZXMuLi5cbiAgICAgIC8vIFdpdGhvdXQgdGhpcyBjaGVjaywgaWYgd2UgZG91YmxlLXdyYXAgZW1pdCwgZm9yIHdoYXRldmVyIHJlYXNvbiwgeW91J2QgZ2V0IHR3byBodHRwLnNlcnZlciBzcGFucyAob25lIHRoZSBjaGlsZHJlbiBvZiB0aGUgb3RoZXIpXG4gICAgICBpZiAoYXBpLmNvbnRleHQuYWN0aXZlKCkuZ2V0VmFsdWUoSFRUUF9TRVJWRVJfSU5TVFJVTUVOVEVEX0tFWSkgfHwgIWNsaWVudCkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfVxuXG4gICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUuZGVidWcubG9nKElOVEVHUkFUSU9OX05BTUUsICdIYW5kbGluZyBpbmNvbWluZyByZXF1ZXN0Jyk7XG5cbiAgICAgIGNvbnN0IGlzb2xhdGlvblNjb3BlID0gY29yZS5nZXRJc29sYXRpb25TY29wZSgpLmNsb25lKCk7XG4gICAgICBjb25zdCByZXF1ZXN0ID0gYXJnc1sxXSA7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGFyZ3NbMl0gO1xuXG4gICAgICBjb25zdCBub3JtYWxpemVkUmVxdWVzdCA9IGNvcmUuaHR0cFJlcXVlc3RUb1JlcXVlc3REYXRhKHJlcXVlc3QpO1xuXG4gICAgICAvLyByZXF1ZXN0LmlwIGlzIG5vbi1zdGFuZGFyZCBidXQgc29tZSBmcmFtZXdvcmtzIHNldCB0aGlzXG4gICAgICBjb25zdCBpcEFkZHJlc3MgPSAocmVxdWVzdCApLmlwIHx8IHJlcXVlc3Quc29ja2V0Py5yZW1vdGVBZGRyZXNzO1xuXG4gICAgICBjb25zdCB1cmwgPSByZXF1ZXN0LnVybCB8fCAnLyc7XG4gICAgICBpZiAobWF4UmVxdWVzdEJvZHlTaXplICE9PSAnbm9uZScgJiYgIWlnbm9yZVJlcXVlc3RCb2R5Py4odXJsLCByZXF1ZXN0KSkge1xuICAgICAgICBwYXRjaFJlcXVlc3RUb0NhcHR1cmVCb2R5KHJlcXVlc3QsIGlzb2xhdGlvblNjb3BlLCBtYXhSZXF1ZXN0Qm9keVNpemUpO1xuICAgICAgfVxuXG4gICAgICAvLyBVcGRhdGUgdGhlIGlzb2xhdGlvbiBzY29wZSwgaXNvbGF0ZSB0aGlzIHJlcXVlc3RcbiAgICAgIGlzb2xhdGlvblNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7IG5vcm1hbGl6ZWRSZXF1ZXN0LCBpcEFkZHJlc3MgfSk7XG5cbiAgICAgIC8vIGF0dGVtcHQgdG8gdXBkYXRlIHRoZSBzY29wZSdzIGB0cmFuc2FjdGlvbk5hbWVgIGJhc2VkIG9uIHRoZSByZXF1ZXN0IFVSTFxuICAgICAgLy8gSWRlYWxseSwgZnJhbWV3b3JrIGluc3RydW1lbnRhdGlvbnMgY29taW5nIGFmdGVyIHRoZSBIdHRwSW5zdHJ1bWVudGF0aW9uXG4gICAgICAvLyB1cGRhdGUgdGhlIHRyYW5zYWN0aW9uTmFtZSBvbmNlIHdlIGdldCBhIHBhcmFtZXRlcml6ZWQgcm91dGUuXG4gICAgICBjb25zdCBodHRwTWV0aG9kID0gKHJlcXVlc3QubWV0aG9kIHx8ICdHRVQnKS50b1VwcGVyQ2FzZSgpO1xuICAgICAgY29uc3QgaHR0cFRhcmdldFdpdGhvdXRRdWVyeUZyYWdtZW50ID0gY29yZS5zdHJpcFVybFF1ZXJ5QW5kRnJhZ21lbnQodXJsKTtcblxuICAgICAgY29uc3QgYmVzdEVmZm9ydFRyYW5zYWN0aW9uTmFtZSA9IGAke2h0dHBNZXRob2R9ICR7aHR0cFRhcmdldFdpdGhvdXRRdWVyeUZyYWdtZW50fWA7XG5cbiAgICAgIGlzb2xhdGlvblNjb3BlLnNldFRyYW5zYWN0aW9uTmFtZShiZXN0RWZmb3J0VHJhbnNhY3Rpb25OYW1lKTtcblxuICAgICAgaWYgKHNlc3Npb25zICYmIGNsaWVudCkge1xuICAgICAgICByZWNvcmRSZXF1ZXN0U2Vzc2lvbihjbGllbnQsIHtcbiAgICAgICAgICByZXF1ZXN0SXNvbGF0aW9uU2NvcGU6IGlzb2xhdGlvblNjb3BlLFxuICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgIHNlc3Npb25GbHVzaGluZ0RlbGF5TVM6IHNlc3Npb25GbHVzaGluZ0RlbGF5TVMgPz8gNjAwMDAsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29yZS53aXRoSXNvbGF0aW9uU2NvcGUoaXNvbGF0aW9uU2NvcGUsICgpID0+IHtcbiAgICAgICAgLy8gU2V0IGEgbmV3IHByb3BhZ2F0aW9uU3BhbklkIGZvciB0aGlzIHJlcXVlc3RcbiAgICAgICAgLy8gV2UgcmVseSBvbiB0aGUgZmFjdCB0aGF0IGB3aXRoSXNvbGF0aW9uU2NvcGUoKWAgd2lsbCBpbXBsaWNpdGx5IGFsc28gZm9yayB0aGUgY3VycmVudCBzY29wZVxuICAgICAgICAvLyBUaGlzIHdheSB3ZSBjYW4gc2F2ZSBhbiBcInVubmVjZXNzYXJ5XCIgYHdpdGhTY29wZSgpYCBpbnZvY2F0aW9uXG4gICAgICAgIGNvcmUuZ2V0Q3VycmVudFNjb3BlKCkuZ2V0UHJvcGFnYXRpb25Db250ZXh0KCkucHJvcGFnYXRpb25TcGFuSWQgPSBjb3JlLmdlbmVyYXRlU3BhbklkKCk7XG5cbiAgICAgICAgY29uc3QgY3R4ID0gYXBpLnByb3BhZ2F0aW9uXG4gICAgICAgICAgLmV4dHJhY3QoYXBpLmNvbnRleHQuYWN0aXZlKCksIG5vcm1hbGl6ZWRSZXF1ZXN0LmhlYWRlcnMpXG4gICAgICAgICAgLnNldFZhbHVlKEhUVFBfU0VSVkVSX0lOU1RSVU1FTlRFRF9LRVksIHRydWUpO1xuXG4gICAgICAgIHJldHVybiBhcGkuY29udGV4dC53aXRoKGN0eCwgKCkgPT4ge1xuICAgICAgICAgIC8vIFRoaXMgaXMgdXNlZCAob3B0aW9uYWxseSkgYnkgdGhlIGh0dHBTZXJ2ZXJTcGFuc0ludGVncmF0aW9uIHRvIGF0dGFjaCBfc3RhcnRTcGFuQ2FsbGJhY2sgdG8gdGhlIHJlcXVlc3Qgb2JqZWN0XG4gICAgICAgICAgY2xpZW50LmVtaXQoJ2h0dHBTZXJ2ZXJSZXF1ZXN0JywgcmVxdWVzdCwgcmVzcG9uc2UsIG5vcm1hbGl6ZWRSZXF1ZXN0KTtcblxuICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKHJlcXVlc3QgKS5fc3RhcnRTcGFuQ2FsbGJhY2s/LmRlcmVmKCk7XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKCkgPT4gdGFyZ2V0LmFwcGx5KHRoaXNBcmcsIGFyZ3MpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9KTtcblxuICB3cmFwcGVkRW1pdEZucy5hZGQobmV3RW1pdCk7XG4gIHNlcnZlci5lbWl0ID0gbmV3RW1pdDtcbn1cblxuLyoqXG4gKiBTdGFydHMgYSBzZXNzaW9uIGFuZCB0cmFja3MgaXQgaW4gdGhlIGNvbnRleHQgb2YgYSBnaXZlbiBpc29sYXRpb24gc2NvcGUuXG4gKiBXaGVuIHRoZSBwYXNzZWQgcmVzcG9uc2UgaXMgZmluaXNoZWQsIHRoZSBzZXNzaW9uIGlzIHB1dCBpbnRvIGEgdGFzayBhbmQgaXNcbiAqIGFnZ3JlZ2F0ZWQgd2l0aCBvdGhlciBzZXNzaW9ucyB0aGF0IG1heSBoYXBwZW4gaW4gYSBjZXJ0YWluIHRpbWUgd2luZG93XG4gKiAoc2Vzc2lvbkZsdXNoaW5nRGVsYXlNcykuXG4gKlxuICogVGhlIHNlc3Npb25zIGFyZSBhbHdheXMgYWdncmVnYXRlZCBieSB0aGUgY2xpZW50IHRoYXQgaXMgb24gdGhlIGN1cnJlbnQgc2NvcGVcbiAqIGF0IHRoZSB0aW1lIG9mIGVuZGluZyB0aGUgcmVzcG9uc2UgKGlmIHRoZXJlIGlzIG9uZSkuXG4gKi9cbi8vIEV4cG9ydGVkIGZvciB1bml0IHRlc3RzXG5mdW5jdGlvbiByZWNvcmRSZXF1ZXN0U2Vzc2lvbihcbiAgY2xpZW50LFxuICB7XG4gICAgcmVxdWVzdElzb2xhdGlvblNjb3BlLFxuICAgIHJlc3BvbnNlLFxuICAgIHNlc3Npb25GbHVzaGluZ0RlbGF5TVMsXG4gIH1cblxuLFxuKSB7XG4gIHJlcXVlc3RJc29sYXRpb25TY29wZS5zZXRTREtQcm9jZXNzaW5nTWV0YWRhdGEoe1xuICAgIHJlcXVlc3RTZXNzaW9uOiB7IHN0YXR1czogJ29rJyB9LFxuICB9KTtcbiAgcmVzcG9uc2Uub25jZSgnY2xvc2UnLCAoKSA9PiB7XG4gICAgY29uc3QgcmVxdWVzdFNlc3Npb24gPSByZXF1ZXN0SXNvbGF0aW9uU2NvcGUuZ2V0U2NvcGVEYXRhKCkuc2RrUHJvY2Vzc2luZ01ldGFkYXRhLnJlcXVlc3RTZXNzaW9uO1xuXG4gICAgaWYgKGNsaWVudCAmJiByZXF1ZXN0U2Vzc2lvbikge1xuICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLmxvZyhgUmVjb3JkZWQgcmVxdWVzdCBzZXNzaW9uIHdpdGggc3RhdHVzOiAke3JlcXVlc3RTZXNzaW9uLnN0YXR1c31gKTtcblxuICAgICAgY29uc3Qgcm91bmRlZERhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgcm91bmRlZERhdGUuc2V0U2Vjb25kcygwLCAwKTtcbiAgICAgIGNvbnN0IGRhdGVCdWNrZXRLZXkgPSByb3VuZGVkRGF0ZS50b0lTT1N0cmluZygpO1xuXG4gICAgICBjb25zdCBleGlzdGluZ0NsaWVudEFnZ3JlZ2F0ZSA9IGNsaWVudFRvUmVxdWVzdFNlc3Npb25BZ2dyZWdhdGVzTWFwLmdldChjbGllbnQpO1xuICAgICAgY29uc3QgYnVja2V0ID0gZXhpc3RpbmdDbGllbnRBZ2dyZWdhdGU/LltkYXRlQnVja2V0S2V5XSB8fCB7IGV4aXRlZDogMCwgY3Jhc2hlZDogMCwgZXJyb3JlZDogMCB9O1xuICAgICAgYnVja2V0Wyh7IG9rOiAnZXhpdGVkJywgY3Jhc2hlZDogJ2NyYXNoZWQnLCBlcnJvcmVkOiAnZXJyb3JlZCcgfSApW3JlcXVlc3RTZXNzaW9uLnN0YXR1c11dKys7XG5cbiAgICAgIGlmIChleGlzdGluZ0NsaWVudEFnZ3JlZ2F0ZSkge1xuICAgICAgICBleGlzdGluZ0NsaWVudEFnZ3JlZ2F0ZVtkYXRlQnVja2V0S2V5XSA9IGJ1Y2tldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy5sb2coJ09wZW5lZCBuZXcgcmVxdWVzdCBzZXNzaW9uIGFnZ3JlZ2F0ZS4nKTtcbiAgICAgICAgY29uc3QgbmV3Q2xpZW50QWdncmVnYXRlID0geyBbZGF0ZUJ1Y2tldEtleV06IGJ1Y2tldCB9O1xuICAgICAgICBjbGllbnRUb1JlcXVlc3RTZXNzaW9uQWdncmVnYXRlc01hcC5zZXQoY2xpZW50LCBuZXdDbGllbnRBZ2dyZWdhdGUpO1xuXG4gICAgICAgIGNvbnN0IGZsdXNoUGVuZGluZ0NsaWVudEFnZ3JlZ2F0ZXMgPSAoKSA9PiB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHVucmVnaXN0ZXJDbGllbnRGbHVzaEhvb2soKTtcbiAgICAgICAgICBjbGllbnRUb1JlcXVlc3RTZXNzaW9uQWdncmVnYXRlc01hcC5kZWxldGUoY2xpZW50KTtcblxuICAgICAgICAgIGNvbnN0IGFnZ3JlZ2F0ZVBheWxvYWQgPSBPYmplY3QuZW50cmllcyhuZXdDbGllbnRBZ2dyZWdhdGUpLm1hcChcbiAgICAgICAgICAgIChbdGltZXN0YW1wLCB2YWx1ZV0pID0+ICh7XG4gICAgICAgICAgICAgIHN0YXJ0ZWQ6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgZXhpdGVkOiB2YWx1ZS5leGl0ZWQsXG4gICAgICAgICAgICAgIGVycm9yZWQ6IHZhbHVlLmVycm9yZWQsXG4gICAgICAgICAgICAgIGNyYXNoZWQ6IHZhbHVlLmNyYXNoZWQsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNsaWVudC5zZW5kU2Vzc2lvbih7IGFnZ3JlZ2F0ZXM6IGFnZ3JlZ2F0ZVBheWxvYWQgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgdW5yZWdpc3RlckNsaWVudEZsdXNoSG9vayA9IGNsaWVudC5vbignZmx1c2gnLCAoKSA9PiB7XG4gICAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLmxvZygnU2VuZGluZyByZXF1ZXN0IHNlc3Npb24gYWdncmVnYXRlIGR1ZSB0byBjbGllbnQgZmx1c2gnKTtcbiAgICAgICAgICBmbHVzaFBlbmRpbmdDbGllbnRBZ2dyZWdhdGVzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLmxvZygnU2VuZGluZyByZXF1ZXN0IHNlc3Npb24gYWdncmVnYXRlIGR1ZSB0byBmbHVzaGluZyBzY2hlZHVsZScpO1xuICAgICAgICAgIGZsdXNoUGVuZGluZ0NsaWVudEFnZ3JlZ2F0ZXMoKTtcbiAgICAgICAgfSwgc2Vzc2lvbkZsdXNoaW5nRGVsYXlNUykudW5yZWYoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIHBhdGNoZXMgdGhlIHJlcXVlc3Qgb2JqZWN0IHRvIGNhcHR1cmUgdGhlIGJvZHkuXG4gKiBJbnN0ZWFkIG9mIGFjdHVhbGx5IGNvbnN1bWluZyB0aGUgc3RyZWFtZWQgYm9keSBvdXJzZWx2ZXMsIHdoaWNoIGhhcyBwb3RlbnRpYWwgc2lkZSBlZmZlY3RzLFxuICogd2UgbW9ua2V5IHBhdGNoIGByZXEub24oJ2RhdGEnKWAgdG8gaW50ZXJjZXB0IHRoZSBib2R5IGNodW5rcy5cbiAqIFRoaXMgd2F5LCB3ZSBvbmx5IHJlYWQgdGhlIGJvZHkgaWYgdGhlIHVzZXIgYWxzbyBjb25zdW1lcyB0aGUgYm9keSwgZW5zdXJpbmcgd2UgZG8gbm90IGNoYW5nZSBhbnkgYmVoYXZpb3IgaW4gdW5leHBlY3RlZCB3YXlzLlxuICovXG5mdW5jdGlvbiBwYXRjaFJlcXVlc3RUb0NhcHR1cmVCb2R5KFxuICByZXEsXG4gIGlzb2xhdGlvblNjb3BlLFxuICBtYXhJbmNvbWluZ1JlcXVlc3RCb2R5U2l6ZSxcbikge1xuICBsZXQgYm9keUJ5dGVMZW5ndGggPSAwO1xuICBjb25zdCBjaHVua3MgPSBbXTtcblxuICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUuZGVidWcubG9nKElOVEVHUkFUSU9OX05BTUUsICdQYXRjaGluZyByZXF1ZXN0Lm9uJyk7XG5cbiAgLyoqXG4gICAqIFdlIG5lZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUgb3JpZ2luYWwgY2FsbGJhY2tzLCBpbiBvcmRlciB0byBiZSBhYmxlIHRvIHJlbW92ZSBsaXN0ZW5lcnMgYWdhaW4uXG4gICAqIFNpbmNlIGBvZmZgIGRlcGVuZHMgb24gaGF2aW5nIHRoZSBleGFjdCBzYW1lIGZ1bmN0aW9uIHJlZmVyZW5jZSBwYXNzZWQgaW4sIHdlIG5lZWQgdG8gYmUgYWJsZSB0byBtYXBcbiAgICogb3JpZ2luYWwgbGlzdGVuZXJzIHRvIG91ciB3cmFwcGVkIG9uZXMuXG4gICAqL1xuICBjb25zdCBjYWxsYmFja01hcCA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgY29uc3QgbWF4Qm9keVNpemUgPVxuICAgIG1heEluY29taW5nUmVxdWVzdEJvZHlTaXplID09PSAnc21hbGwnXG4gICAgICA/IDEwMDBcbiAgICAgIDogbWF4SW5jb21pbmdSZXF1ZXN0Qm9keVNpemUgPT09ICdtZWRpdW0nXG4gICAgICAgID8gMTAwMDBcbiAgICAgICAgOiBjb25zdGFudHMuTUFYX0JPRFlfQllURV9MRU5HVEg7XG5cbiAgdHJ5IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgcmVxLm9uID0gbmV3IFByb3h5KHJlcS5vbiwge1xuICAgICAgYXBwbHk6ICh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgW2V2ZW50LCBsaXN0ZW5lciwgLi4ucmVzdEFyZ3NdID0gYXJncztcblxuICAgICAgICBpZiAoZXZlbnQgPT09ICdkYXRhJykge1xuICAgICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiZcbiAgICAgICAgICAgIGNvcmUuZGVidWcubG9nKElOVEVHUkFUSU9OX05BTUUsIGBIYW5kbGluZyByZXF1ZXN0Lm9uKFwiZGF0YVwiKSB3aXRoIG1heGltdW0gYm9keSBzaXplIG9mICR7bWF4Qm9keVNpemV9YmApO1xuXG4gICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBuZXcgUHJveHkobGlzdGVuZXIsIHtcbiAgICAgICAgICAgIGFwcGx5OiAodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKSA9PiB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBhcmdzWzBdIDtcbiAgICAgICAgICAgICAgICBjb25zdCBidWZmZXJpZmllZENodW5rID0gQnVmZmVyLmZyb20oY2h1bmspO1xuXG4gICAgICAgICAgICAgICAgaWYgKGJvZHlCeXRlTGVuZ3RoIDwgbWF4Qm9keVNpemUpIHtcbiAgICAgICAgICAgICAgICAgIGNodW5rcy5wdXNoKGJ1ZmZlcmlmaWVkQ2h1bmspO1xuICAgICAgICAgICAgICAgICAgYm9keUJ5dGVMZW5ndGggKz0gYnVmZmVyaWZpZWRDaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVidWdCdWlsZC5ERUJVR19CVUlMRCkge1xuICAgICAgICAgICAgICAgICAgY29yZS5kZWJ1Zy5sb2coXG4gICAgICAgICAgICAgICAgICAgIElOVEVHUkFUSU9OX05BTUUsXG4gICAgICAgICAgICAgICAgICAgIGBEcm9wcGluZyByZXF1ZXN0IGJvZHkgY2h1bmsgYmVjYXVzZSBtYXhpbXVtIGJvZHkgbGVuZ3RoIG9mICR7bWF4Qm9keVNpemV9YiBpcyBleGNlZWRlZC5gLFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGRlYnVnQnVpbGQuREVCVUdfQlVJTEQgJiYgY29yZS5kZWJ1Zy5lcnJvcihJTlRFR1JBVElPTl9OQU1FLCAnRW5jb3VudGVyZWQgZXJyb3Igd2hpbGUgc3RvcmluZyBib2R5IGNodW5rLicpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJnLCBhcmdzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjYWxsYmFja01hcC5zZXQobGlzdGVuZXIsIGNhbGxiYWNrKTtcblxuICAgICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZywgW2V2ZW50LCBjYWxsYmFjaywgLi4ucmVzdEFyZ3NdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZywgYXJncyk7XG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgLy8gRW5zdXJlIHdlIGFsc28gcmVtb3ZlIGNhbGxiYWNrcyBjb3JyZWN0bHlcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3VuYm91bmQtbWV0aG9kXG4gICAgcmVxLm9mZiA9IG5ldyBQcm94eShyZXEub2ZmLCB7XG4gICAgICBhcHBseTogKHRhcmdldCwgdGhpc0FyZywgYXJncykgPT4ge1xuICAgICAgICBjb25zdCBbLCBsaXN0ZW5lcl0gPSBhcmdzO1xuXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gY2FsbGJhY2tNYXAuZ2V0KGxpc3RlbmVyKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2tNYXAuZGVsZXRlKGxpc3RlbmVyKTtcblxuICAgICAgICAgIGNvbnN0IG1vZGlmaWVkQXJncyA9IGFyZ3Muc2xpY2UoKTtcbiAgICAgICAgICBtb2RpZmllZEFyZ3NbMV0gPSBjYWxsYmFjaztcbiAgICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIG1vZGlmaWVkQXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUmVmbGVjdC5hcHBseSh0YXJnZXQsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgfSxcbiAgICB9KTtcblxuICAgIHJlcS5vbignZW5kJywgKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgYm9keSA9IEJ1ZmZlci5jb25jYXQoY2h1bmtzKS50b1N0cmluZygndXRmLTgnKTtcbiAgICAgICAgaWYgKGJvZHkpIHtcbiAgICAgICAgICAvLyBVc2luZyBCdWZmZXIuYnl0ZUxlbmd0aCBoZXJlLCBiZWNhdXNlIHRoZSBib2R5IG1heSBjb250YWluIGNoYXJhY3RlcnMgdGhhdCBhcmUgbm90IDEgYnl0ZSBsb25nXG4gICAgICAgICAgY29uc3QgYm9keUJ5dGVMZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aChib2R5LCAndXRmLTgnKTtcbiAgICAgICAgICBjb25zdCB0cnVuY2F0ZWRCb2R5ID1cbiAgICAgICAgICAgIGJvZHlCeXRlTGVuZ3RoID4gbWF4Qm9keVNpemVcbiAgICAgICAgICAgICAgPyBgJHtCdWZmZXIuZnJvbShib2R5KVxuICAgICAgICAgICAgICAgICAgLnN1YmFycmF5KDAsIG1heEJvZHlTaXplIC0gMylcbiAgICAgICAgICAgICAgICAgIC50b1N0cmluZygndXRmLTgnKX0uLi5gXG4gICAgICAgICAgICAgIDogYm9keTtcblxuICAgICAgICAgIGlzb2xhdGlvblNjb3BlLnNldFNES1Byb2Nlc3NpbmdNZXRhZGF0YSh7IG5vcm1hbGl6ZWRSZXF1ZXN0OiB7IGRhdGE6IHRydW5jYXRlZEJvZHkgfSB9KTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGRlYnVnQnVpbGQuREVCVUdfQlVJTEQpIHtcbiAgICAgICAgICBjb3JlLmRlYnVnLmVycm9yKElOVEVHUkFUSU9OX05BTUUsICdFcnJvciBidWlsZGluZyBjYXB0dXJlZCByZXF1ZXN0IGJvZHknLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoZGVidWdCdWlsZC5ERUJVR19CVUlMRCkge1xuICAgICAgY29yZS5kZWJ1Zy5lcnJvcihJTlRFR1JBVElPTl9OQU1FLCAnRXJyb3IgcGF0Y2hpbmcgcmVxdWVzdCB0byBjYXB0dXJlIGJvZHknLCBlcnJvcik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuYWRkU3RhcnRTcGFuQ2FsbGJhY2sgPSBhZGRTdGFydFNwYW5DYWxsYmFjaztcbmV4cG9ydHMuaHR0cFNlcnZlckludGVncmF0aW9uID0gaHR0cFNlcnZlckludGVncmF0aW9uO1xuZXhwb3J0cy5yZWNvcmRSZXF1ZXN0U2Vzc2lvbiA9IHJlY29yZFJlcXVlc3RTZXNzaW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cFNlcnZlckludGVncmF0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/httpServerIntegration.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/httpServerSpansIntegration.js":
/*!**************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/httpServerSpansIntegration.js ***!
  \**************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_events = __webpack_require__(/*! node:events */ \"node:events\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst semanticConventions = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/debug-build.js\");\nconst httpServerIntegration = __webpack_require__(/*! ./httpServerIntegration.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/httpServerIntegration.js\");\n\nconst INTEGRATION_NAME = 'Http.ServerSpans';\n\n// Tree-shakable guard to remove all code related to tracing\n\nconst _httpServerSpansIntegration = ((options = {}) => {\n  const ignoreStaticAssets = options.ignoreStaticAssets ?? true;\n  const ignoreIncomingRequests = options.ignoreIncomingRequests;\n  const ignoreStatusCodes = options.ignoreStatusCodes ?? [\n    [401, 404],\n    // 300 and 304 are possibly valid status codes we do not want to filter\n    [301, 303],\n    [305, 399],\n  ];\n\n  const { onSpanCreated } = options;\n  // eslint-disable-next-line deprecation/deprecation\n  const { requestHook, responseHook, applyCustomAttributesOnSpan } = options.instrumentation ?? {};\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      // If no tracing, we can just skip everything here\n      if (typeof __SENTRY_TRACING__ !== 'undefined' && !__SENTRY_TRACING__) {\n        return;\n      }\n\n      client.on('httpServerRequest', (_request, _response, normalizedRequest) => {\n        // Type-casting this here because we do not want to put the node types into core\n        const request = _request ;\n        const response = _response ;\n\n        const startSpan = (next) => {\n          if (\n            shouldIgnoreSpansForIncomingRequest(request, {\n              ignoreStaticAssets,\n              ignoreIncomingRequests,\n            })\n          ) {\n            debugBuild.DEBUG_BUILD && core.debug.log(INTEGRATION_NAME, 'Skipping span creation for incoming request', request.url);\n            return next();\n          }\n\n          const fullUrl = normalizedRequest.url || request.url || '/';\n          const urlObj = core.parseStringToURLObject(fullUrl);\n\n          const headers = request.headers;\n          const userAgent = headers['user-agent'];\n          const ips = headers['x-forwarded-for'];\n          const httpVersion = request.httpVersion;\n          const host = headers.host;\n          const hostname = host?.replace(/^(.*)(:[0-9]{1,5})/, '$1') || 'localhost';\n\n          const tracer = client.tracer;\n          const scheme = fullUrl.startsWith('https') ? 'https' : 'http';\n\n          const method = normalizedRequest.method || request.method?.toUpperCase() || 'GET';\n          const httpTargetWithoutQueryFragment = urlObj ? urlObj.pathname : core.stripUrlQueryAndFragment(fullUrl);\n          const bestEffortTransactionName = `${method} ${httpTargetWithoutQueryFragment}`;\n          const shouldSendDefaultPii = client.getOptions().sendDefaultPii ?? false;\n\n          // We use the plain tracer.startSpan here so we can pass the span kind\n          const span = tracer.startSpan(bestEffortTransactionName, {\n            kind: api.SpanKind.SERVER,\n            attributes: {\n              // Sentry specific attributes\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.server',\n              [core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.otel.http',\n              'sentry.http.prefetch': isKnownPrefetchRequest(request) || undefined,\n              // Old Semantic Conventions attributes - added for compatibility with what `@opentelemetry/instrumentation-http` output before\n              'http.url': fullUrl,\n              'http.method': normalizedRequest.method,\n              'http.target': urlObj ? `${urlObj.pathname}${urlObj.search}` : httpTargetWithoutQueryFragment,\n              'http.host': host,\n              'net.host.name': hostname,\n              'http.client_ip': typeof ips === 'string' ? ips.split(',')[0] : undefined,\n              'http.user_agent': userAgent,\n              'http.scheme': scheme,\n              'http.flavor': httpVersion,\n              'net.transport': httpVersion?.toUpperCase() === 'QUIC' ? 'ip_udp' : 'ip_tcp',\n              ...getRequestContentLengthAttribute(request),\n              ...core.httpHeadersToSpanAttributes(normalizedRequest.headers || {}, shouldSendDefaultPii),\n            },\n          });\n\n          // TODO v11: Remove the following three hooks, only onSpanCreated should remain\n          requestHook?.(span, request);\n          responseHook?.(span, response);\n          applyCustomAttributesOnSpan?.(span, request, response);\n          onSpanCreated?.(span, request, response);\n\n          const rpcMetadata = {\n            type: core$1.RPCType.HTTP,\n            span,\n          };\n\n          return api.context.with(core$1.setRPCMetadata(api.trace.setSpan(api.context.active(), span), rpcMetadata), () => {\n            api.context.bind(api.context.active(), request);\n            api.context.bind(api.context.active(), response);\n\n            // Ensure we only end the span once\n            // E.g. error can be emitted before close is emitted\n            let isEnded = false;\n            function endSpan(status) {\n              if (isEnded) {\n                return;\n              }\n\n              isEnded = true;\n\n              const newAttributes = getIncomingRequestAttributesOnResponse(request, response);\n              span.setAttributes(newAttributes);\n              span.setStatus(status);\n              span.end();\n\n              // Update the transaction name if the route has changed\n              const route = newAttributes['http.route'];\n              if (route) {\n                core.getIsolationScope().setTransactionName(`${request.method?.toUpperCase() || 'GET'} ${route}`);\n              }\n            }\n\n            response.on('close', () => {\n              endSpan(core.getSpanStatusFromHttpCode(response.statusCode));\n            });\n            response.on(node_events.errorMonitor, () => {\n              const httpStatus = core.getSpanStatusFromHttpCode(response.statusCode);\n              // Ensure we def. have an error status here\n              endSpan(httpStatus.code === core.SPAN_STATUS_ERROR ? httpStatus : { code: core.SPAN_STATUS_ERROR });\n            });\n\n            return next();\n          });\n        };\n\n        httpServerIntegration.addStartSpanCallback(request, startSpan);\n      });\n    },\n    processEvent(event) {\n      // Drop transaction if it has a status code that should be ignored\n      if (event.type === 'transaction') {\n        const statusCode = event.contexts?.trace?.data?.['http.response.status_code'];\n        if (typeof statusCode === 'number') {\n          const shouldDrop = shouldFilterStatusCode(statusCode, ignoreStatusCodes);\n          if (shouldDrop) {\n            debugBuild.DEBUG_BUILD && core.debug.log('Dropping transaction due to status code', statusCode);\n            return null;\n          }\n        }\n      }\n\n      return event;\n    },\n    afterAllSetup(client) {\n      if (!debugBuild.DEBUG_BUILD) {\n        return;\n      }\n\n      if (client.getIntegrationByName('Http')) {\n        core.debug.warn(\n          'It seems that you have manually added `httpServerSpansIntergation` while `httpIntegration` is also present. Make sure to remove `httpIntegration` when adding `httpServerSpansIntegration`.',\n        );\n      }\n\n      if (!client.getIntegrationByName('Http.Server')) {\n        core.debug.error(\n          'It seems that you have manually added `httpServerSpansIntergation` without adding `httpServerIntegration`. This is a requiement for spans to be created - please add the `httpServerIntegration` integration.',\n        );\n      }\n    },\n  };\n}) ;\n\n/**\n * This integration emits spans for incoming requests handled via the node `http` module.\n * It requires the `httpServerIntegration` to be present.\n */\nconst httpServerSpansIntegration = _httpServerSpansIntegration\n\n;\n\nfunction isKnownPrefetchRequest(req) {\n  // Currently only handles Next.js prefetch requests but may check other frameworks in the future.\n  return req.headers['next-router-prefetch'] === '1';\n}\n\n/**\n * Check if a request is for a common static asset that should be ignored by default.\n *\n * Only exported for tests.\n */\nfunction isStaticAssetRequest(urlPath) {\n  const path = core.stripUrlQueryAndFragment(urlPath);\n  // Common static file extensions\n  if (path.match(/\\.(ico|png|jpg|jpeg|gif|svg|css|js|woff|woff2|ttf|eot|webp|avif)$/)) {\n    return true;\n  }\n\n  // Common metadata files\n  if (path.match(/^\\/(robots\\.txt|sitemap\\.xml|manifest\\.json|browserconfig\\.xml)$/)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction shouldIgnoreSpansForIncomingRequest(\n  request,\n  {\n    ignoreStaticAssets,\n    ignoreIncomingRequests,\n  }\n\n,\n) {\n  if (core$1.isTracingSuppressed(api.context.active())) {\n    return true;\n  }\n\n  // request.url is the only property that holds any information about the url\n  // it only consists of the URL path and query string (if any)\n  const urlPath = request.url;\n\n  const method = request.method?.toUpperCase();\n  // We do not capture OPTIONS/HEAD requests as spans\n  if (method === 'OPTIONS' || method === 'HEAD' || !urlPath) {\n    return true;\n  }\n\n  // Default static asset filtering\n  if (ignoreStaticAssets && method === 'GET' && isStaticAssetRequest(urlPath)) {\n    return true;\n  }\n\n  if (ignoreIncomingRequests?.(urlPath, request)) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction getRequestContentLengthAttribute(request) {\n  const length = getContentLength(request.headers);\n  if (length == null) {\n    return {};\n  }\n\n  if (isCompressed(request.headers)) {\n    return {\n      ['http.request_content_length']: length,\n    };\n  } else {\n    return {\n      ['http.request_content_length_uncompressed']: length,\n    };\n  }\n}\n\nfunction getContentLength(headers) {\n  const contentLengthHeader = headers['content-length'];\n  if (contentLengthHeader === undefined) return null;\n\n  const contentLength = parseInt(contentLengthHeader, 10);\n  if (isNaN(contentLength)) return null;\n\n  return contentLength;\n}\n\nfunction isCompressed(headers) {\n  const encoding = headers['content-encoding'];\n\n  return !!encoding && encoding !== 'identity';\n}\n\nfunction getIncomingRequestAttributesOnResponse(request, response) {\n  // take socket from the request,\n  // since it may be detached from the response object in keep-alive mode\n  const { socket } = request;\n  const { statusCode, statusMessage } = response;\n\n  const newAttributes = {\n    [semanticConventions.ATTR_HTTP_RESPONSE_STATUS_CODE]: statusCode,\n    // eslint-disable-next-line deprecation/deprecation\n    [semanticConventions.SEMATTRS_HTTP_STATUS_CODE]: statusCode,\n    'http.status_text': statusMessage?.toUpperCase(),\n  };\n\n  const rpcMetadata = core$1.getRPCMetadata(api.context.active());\n  if (socket) {\n    const { localAddress, localPort, remoteAddress, remotePort } = socket;\n    // eslint-disable-next-line deprecation/deprecation\n    newAttributes[semanticConventions.SEMATTRS_NET_HOST_IP] = localAddress;\n    // eslint-disable-next-line deprecation/deprecation\n    newAttributes[semanticConventions.SEMATTRS_NET_HOST_PORT] = localPort;\n    // eslint-disable-next-line deprecation/deprecation\n    newAttributes[semanticConventions.SEMATTRS_NET_PEER_IP] = remoteAddress;\n    newAttributes['net.peer.port'] = remotePort;\n  }\n  // eslint-disable-next-line deprecation/deprecation\n  newAttributes[semanticConventions.SEMATTRS_HTTP_STATUS_CODE] = statusCode;\n  newAttributes['http.status_text'] = (statusMessage || '').toUpperCase();\n\n  if (rpcMetadata?.type === core$1.RPCType.HTTP && rpcMetadata.route !== undefined) {\n    const routeName = rpcMetadata.route;\n    newAttributes[semanticConventions.ATTR_HTTP_ROUTE] = routeName;\n  }\n\n  return newAttributes;\n}\n\n/**\n * If the given status code should be filtered for the given list of status codes/ranges.\n */\nfunction shouldFilterStatusCode(statusCode, dropForStatusCodes) {\n  return dropForStatusCodes.some(code => {\n    if (typeof code === 'number') {\n      return code === statusCode;\n    }\n\n    const [min, max] = code;\n    return statusCode >= min && statusCode <= max;\n  });\n}\n\nexports.httpServerSpansIntegration = httpServerSpansIntegration;\nexports.isStaticAssetRequest = isStaticAssetRequest;\n//# sourceMappingURL=httpServerSpansIntegration.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/httpServerSpansIntegration.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/index.js":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/index.js ***!
  \*****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/instrument.js\");\nconst httpServerIntegration = __webpack_require__(/*! ./httpServerIntegration.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/httpServerIntegration.js\");\nconst httpServerSpansIntegration = __webpack_require__(/*! ./httpServerSpansIntegration.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/httpServerSpansIntegration.js\");\nconst SentryHttpInstrumentation = __webpack_require__(/*! ./SentryHttpInstrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/SentryHttpInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'Http';\n\nconst instrumentSentryHttp = instrument.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  options => {\n    return new SentryHttpInstrumentation.SentryHttpInstrumentation(options);\n  },\n);\n\n/**\n * The http integration instruments Node's internal http and https modules.\n * It creates breadcrumbs for outgoing HTTP requests which will be attached to the currently active span.\n */\nconst httpIntegration = core.defineIntegration((options = {}) => {\n  const serverOptions = {\n    sessions: options.trackIncomingRequestsAsSessions,\n    sessionFlushingDelayMS: options.sessionFlushingDelayMS,\n    ignoreRequestBody: options.ignoreIncomingRequestBody,\n    maxRequestBodySize: options.maxIncomingRequestBodySize,\n  };\n\n  const serverSpansOptions = {\n    ignoreIncomingRequests: options.ignoreIncomingRequests,\n    ignoreStaticAssets: options.ignoreStaticAssets,\n    ignoreStatusCodes: options.dropSpansForIncomingRequestStatusCodes,\n  };\n\n  const httpInstrumentationOptions = {\n    breadcrumbs: options.breadcrumbs,\n    propagateTraceInOutgoingRequests: true,\n    ignoreOutgoingRequests: options.ignoreOutgoingRequests,\n  };\n\n  const server = httpServerIntegration.httpServerIntegration(serverOptions);\n  const serverSpans = httpServerSpansIntegration.httpServerSpansIntegration(serverSpansOptions);\n\n  // In node-core, for now we disable incoming requests spans by default\n  // we may revisit this in a future release\n  const spans = options.spans ?? false;\n  const disableIncomingRequestSpans = options.disableIncomingRequestSpans ?? false;\n  const enabledServerSpans = spans && !disableIncomingRequestSpans;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (enabledServerSpans) {\n        serverSpans.setup(client);\n      }\n    },\n    setupOnce() {\n      server.setupOnce();\n\n      instrumentSentryHttp(httpInstrumentationOptions);\n    },\n\n    processEvent(event) {\n      // Note: We always run this, even if spans are disabled\n      // The reason being that e.g. the remix integration disables span creation here but still wants to use the ignore status codes option\n      return serverSpans.processEvent(event);\n    },\n  };\n});\n\nexports.httpIntegration = httpIntegration;\nexports.instrumentSentryHttp = instrumentSentryHttp;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvaHR0cC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsNFBBQTBCO0FBQ3JELDhCQUE4QixtQkFBTyxDQUFDLHNSQUE0QjtBQUNsRSxtQ0FBbUMsbUJBQU8sQ0FBQyxnU0FBaUM7QUFDNUUsa0NBQWtDLG1CQUFPLENBQUMsOFJBQWdDOztBQUUxRTs7QUFFQTtBQUNBLEtBQUssaUJBQWlCO0FBQ3RCO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRCx1QkFBdUI7QUFDdkIsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvaHR0cC9pbmRleC5qcz80MmIyIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBpbnN0cnVtZW50ID0gcmVxdWlyZSgnLi4vLi4vb3RlbC9pbnN0cnVtZW50LmpzJyk7XG5jb25zdCBodHRwU2VydmVySW50ZWdyYXRpb24gPSByZXF1aXJlKCcuL2h0dHBTZXJ2ZXJJbnRlZ3JhdGlvbi5qcycpO1xuY29uc3QgaHR0cFNlcnZlclNwYW5zSW50ZWdyYXRpb24gPSByZXF1aXJlKCcuL2h0dHBTZXJ2ZXJTcGFuc0ludGVncmF0aW9uLmpzJyk7XG5jb25zdCBTZW50cnlIdHRwSW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9TZW50cnlIdHRwSW5zdHJ1bWVudGF0aW9uLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnSHR0cCc7XG5cbmNvbnN0IGluc3RydW1lbnRTZW50cnlIdHRwID0gaW5zdHJ1bWVudC5nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBgJHtJTlRFR1JBVElPTl9OQU1FfS5zZW50cnlgLFxuICBvcHRpb25zID0+IHtcbiAgICByZXR1cm4gbmV3IFNlbnRyeUh0dHBJbnN0cnVtZW50YXRpb24uU2VudHJ5SHR0cEluc3RydW1lbnRhdGlvbihvcHRpb25zKTtcbiAgfSxcbik7XG5cbi8qKlxuICogVGhlIGh0dHAgaW50ZWdyYXRpb24gaW5zdHJ1bWVudHMgTm9kZSdzIGludGVybmFsIGh0dHAgYW5kIGh0dHBzIG1vZHVsZXMuXG4gKiBJdCBjcmVhdGVzIGJyZWFkY3J1bWJzIGZvciBvdXRnb2luZyBIVFRQIHJlcXVlc3RzIHdoaWNoIHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhlIGN1cnJlbnRseSBhY3RpdmUgc3Bhbi5cbiAqL1xuY29uc3QgaHR0cEludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IHNlcnZlck9wdGlvbnMgPSB7XG4gICAgc2Vzc2lvbnM6IG9wdGlvbnMudHJhY2tJbmNvbWluZ1JlcXVlc3RzQXNTZXNzaW9ucyxcbiAgICBzZXNzaW9uRmx1c2hpbmdEZWxheU1TOiBvcHRpb25zLnNlc3Npb25GbHVzaGluZ0RlbGF5TVMsXG4gICAgaWdub3JlUmVxdWVzdEJvZHk6IG9wdGlvbnMuaWdub3JlSW5jb21pbmdSZXF1ZXN0Qm9keSxcbiAgICBtYXhSZXF1ZXN0Qm9keVNpemU6IG9wdGlvbnMubWF4SW5jb21pbmdSZXF1ZXN0Qm9keVNpemUsXG4gIH07XG5cbiAgY29uc3Qgc2VydmVyU3BhbnNPcHRpb25zID0ge1xuICAgIGlnbm9yZUluY29taW5nUmVxdWVzdHM6IG9wdGlvbnMuaWdub3JlSW5jb21pbmdSZXF1ZXN0cyxcbiAgICBpZ25vcmVTdGF0aWNBc3NldHM6IG9wdGlvbnMuaWdub3JlU3RhdGljQXNzZXRzLFxuICAgIGlnbm9yZVN0YXR1c0NvZGVzOiBvcHRpb25zLmRyb3BTcGFuc0ZvckluY29taW5nUmVxdWVzdFN0YXR1c0NvZGVzLFxuICB9O1xuXG4gIGNvbnN0IGh0dHBJbnN0cnVtZW50YXRpb25PcHRpb25zID0ge1xuICAgIGJyZWFkY3J1bWJzOiBvcHRpb25zLmJyZWFkY3J1bWJzLFxuICAgIHByb3BhZ2F0ZVRyYWNlSW5PdXRnb2luZ1JlcXVlc3RzOiB0cnVlLFxuICAgIGlnbm9yZU91dGdvaW5nUmVxdWVzdHM6IG9wdGlvbnMuaWdub3JlT3V0Z29pbmdSZXF1ZXN0cyxcbiAgfTtcblxuICBjb25zdCBzZXJ2ZXIgPSBodHRwU2VydmVySW50ZWdyYXRpb24uaHR0cFNlcnZlckludGVncmF0aW9uKHNlcnZlck9wdGlvbnMpO1xuICBjb25zdCBzZXJ2ZXJTcGFucyA9IGh0dHBTZXJ2ZXJTcGFuc0ludGVncmF0aW9uLmh0dHBTZXJ2ZXJTcGFuc0ludGVncmF0aW9uKHNlcnZlclNwYW5zT3B0aW9ucyk7XG5cbiAgLy8gSW4gbm9kZS1jb3JlLCBmb3Igbm93IHdlIGRpc2FibGUgaW5jb21pbmcgcmVxdWVzdHMgc3BhbnMgYnkgZGVmYXVsdFxuICAvLyB3ZSBtYXkgcmV2aXNpdCB0aGlzIGluIGEgZnV0dXJlIHJlbGVhc2VcbiAgY29uc3Qgc3BhbnMgPSBvcHRpb25zLnNwYW5zID8/IGZhbHNlO1xuICBjb25zdCBkaXNhYmxlSW5jb21pbmdSZXF1ZXN0U3BhbnMgPSBvcHRpb25zLmRpc2FibGVJbmNvbWluZ1JlcXVlc3RTcGFucyA/PyBmYWxzZTtcbiAgY29uc3QgZW5hYmxlZFNlcnZlclNwYW5zID0gc3BhbnMgJiYgIWRpc2FibGVJbmNvbWluZ1JlcXVlc3RTcGFucztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6IElOVEVHUkFUSU9OX05BTUUsXG4gICAgc2V0dXAoY2xpZW50KSB7XG4gICAgICBpZiAoZW5hYmxlZFNlcnZlclNwYW5zKSB7XG4gICAgICAgIHNlcnZlclNwYW5zLnNldHVwKGNsaWVudCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXR1cE9uY2UoKSB7XG4gICAgICBzZXJ2ZXIuc2V0dXBPbmNlKCk7XG5cbiAgICAgIGluc3RydW1lbnRTZW50cnlIdHRwKGh0dHBJbnN0cnVtZW50YXRpb25PcHRpb25zKTtcbiAgICB9LFxuXG4gICAgcHJvY2Vzc0V2ZW50KGV2ZW50KSB7XG4gICAgICAvLyBOb3RlOiBXZSBhbHdheXMgcnVuIHRoaXMsIGV2ZW4gaWYgc3BhbnMgYXJlIGRpc2FibGVkXG4gICAgICAvLyBUaGUgcmVhc29uIGJlaW5nIHRoYXQgZS5nLiB0aGUgcmVtaXggaW50ZWdyYXRpb24gZGlzYWJsZXMgc3BhbiBjcmVhdGlvbiBoZXJlIGJ1dCBzdGlsbCB3YW50cyB0byB1c2UgdGhlIGlnbm9yZSBzdGF0dXMgY29kZXMgb3B0aW9uXG4gICAgICByZXR1cm4gc2VydmVyU3BhbnMucHJvY2Vzc0V2ZW50KGV2ZW50KTtcbiAgICB9LFxuICB9O1xufSk7XG5cbmV4cG9ydHMuaHR0cEludGVncmF0aW9uID0gaHR0cEludGVncmF0aW9uO1xuZXhwb3J0cy5pbnN0cnVtZW50U2VudHJ5SHR0cCA9IGluc3RydW1lbnRTZW50cnlIdHRwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/outgoing-requests.js":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/outgoing-requests.js ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_5qhoifmlgqufioqeczcfzlo2z4/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/debug-build.js\");\nconst baggage = __webpack_require__(/*! ../../utils/baggage.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/baggage.js\");\nconst constants = __webpack_require__(/*! ./constants.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/constants.js\");\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response?.statusCode;\n  const level = core.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\n/**\n * Add trace propagation headers to an outgoing request.\n * This must be called _before_ the request is sent!\n */\nfunction addTracePropagationHeadersToOutgoingRequest(\n  request,\n  propagationDecisionMap,\n) {\n  const url = getRequestUrl(request);\n\n  // Manually add the trace headers, if it applies\n  // Note: We do not use `propagation.inject()` here, because our propagator relies on an active span\n  // Which we do not have in this case\n  const tracePropagationTargets = core.getClient()?.getOptions().tracePropagationTargets;\n  const headersToAdd = opentelemetry.shouldPropagateTraceForUrl(url, tracePropagationTargets, propagationDecisionMap)\n    ? core.getTraceData()\n    : undefined;\n\n  if (!headersToAdd) {\n    return;\n  }\n\n  const { 'sentry-trace': sentryTrace, baggage: baggage$1 } = headersToAdd;\n\n  // We do not want to overwrite existing header here, if it was already set\n  if (sentryTrace && !request.getHeader('sentry-trace')) {\n    try {\n      request.setHeader('sentry-trace', sentryTrace);\n      debugBuild.DEBUG_BUILD && core.debug.log(constants.INSTRUMENTATION_NAME, 'Added sentry-trace header to outgoing request');\n    } catch (error) {\n      debugBuild.DEBUG_BUILD &&\n        core.debug.error(\n          constants.INSTRUMENTATION_NAME,\n          'Failed to add sentry-trace header to outgoing request:',\n          core.isError(error) ? error.message : 'Unknown error',\n        );\n    }\n  }\n\n  if (baggage$1) {\n    // For baggage, we make sure to merge this into a possibly existing header\n    const newBaggage = baggage.mergeBaggageHeaders(request.getHeader('baggage'), baggage$1);\n    if (newBaggage) {\n      try {\n        request.setHeader('baggage', newBaggage);\n        debugBuild.DEBUG_BUILD && core.debug.log(constants.INSTRUMENTATION_NAME, 'Added baggage header to outgoing request');\n      } catch (error) {\n        debugBuild.DEBUG_BUILD &&\n          core.debug.error(\n            constants.INSTRUMENTATION_NAME,\n            'Failed to add baggage header to outgoing request:',\n            core.isError(error) ? error.message : 'Unknown error',\n          );\n      }\n    }\n  }\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    // `request.host` does not contain the port, but the host header does\n    const host = request.getHeader('host') || request.host;\n    const url = new URL(request.path, `${request.protocol}//${host}`);\n    const parsedUrl = core.parseUrl(url.toString());\n\n    const data = {\n      url: core.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch {\n    return {};\n  }\n}\n\n/** Convert an outgoing request to request options. */\nfunction getRequestOptions(request) {\n  return {\n    method: request.method,\n    protocol: request.protocol,\n    host: request.host,\n    hostname: request.host,\n    path: request.path,\n    headers: request.getHeaders(),\n  };\n}\n\nfunction getRequestUrl(request) {\n  const hostname = request.getHeader('host') || request.host;\n  const protocol = request.protocol;\n  const path = request.path;\n\n  return `${protocol}//${hostname}${path}`;\n}\n\nexports.addRequestBreadcrumb = addRequestBreadcrumb;\nexports.addTracePropagationHeadersToOutgoingRequest = addTracePropagationHeadersToOutgoingRequest;\nexports.getRequestOptions = getRequestOptions;\n//# sourceMappingURL=outgoing-requests.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvaHR0cC9vdXRnb2luZy1yZXF1ZXN0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsc0JBQXNCLG1CQUFPLENBQUMsbVBBQXVCO0FBQ3JELG1CQUFtQixtQkFBTyxDQUFDLG9QQUFzQjtBQUNqRCxnQkFBZ0IsbUJBQU8sQ0FBQyx3UEFBd0I7QUFDaEQsa0JBQWtCLG1CQUFPLENBQUMsOFBBQWdCOztBQUUxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsVUFBVSxrREFBa0Q7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxpQkFBaUIsSUFBSSxLQUFLO0FBQ25FOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZLFNBQVMsSUFBSSxTQUFTLEVBQUUsS0FBSztBQUN6Qzs7QUFFQSw0QkFBNEI7QUFDNUIsbURBQW1EO0FBQ25ELHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2h0dHAvb3V0Z29pbmctcmVxdWVzdHMuanM/ZmIwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuY29uc3QgZGVidWdCdWlsZCA9IHJlcXVpcmUoJy4uLy4uL2RlYnVnLWJ1aWxkLmpzJyk7XG5jb25zdCBiYWdnYWdlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYmFnZ2FnZS5qcycpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMuanMnKTtcblxuLyoqIEFkZCBhIGJyZWFkY3J1bWIgZm9yIG91dGdvaW5nIHJlcXVlc3RzLiAqL1xuZnVuY3Rpb24gYWRkUmVxdWVzdEJyZWFkY3J1bWIocmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgY29uc3QgZGF0YSA9IGdldEJyZWFkY3J1bWJEYXRhKHJlcXVlc3QpO1xuXG4gIGNvbnN0IHN0YXR1c0NvZGUgPSByZXNwb25zZT8uc3RhdHVzQ29kZTtcbiAgY29uc3QgbGV2ZWwgPSBjb3JlLmdldEJyZWFkY3J1bWJMb2dMZXZlbEZyb21IdHRwU3RhdHVzQ29kZShzdGF0dXNDb2RlKTtcblxuICBjb3JlLmFkZEJyZWFkY3J1bWIoXG4gICAge1xuICAgICAgY2F0ZWdvcnk6ICdodHRwJyxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc3RhdHVzX2NvZGU6IHN0YXR1c0NvZGUsXG4gICAgICAgIC4uLmRhdGEsXG4gICAgICB9LFxuICAgICAgdHlwZTogJ2h0dHAnLFxuICAgICAgbGV2ZWwsXG4gICAgfSxcbiAgICB7XG4gICAgICBldmVudDogJ3Jlc3BvbnNlJyxcbiAgICAgIHJlcXVlc3QsXG4gICAgICByZXNwb25zZSxcbiAgICB9LFxuICApO1xufVxuXG4vKipcbiAqIEFkZCB0cmFjZSBwcm9wYWdhdGlvbiBoZWFkZXJzIHRvIGFuIG91dGdvaW5nIHJlcXVlc3QuXG4gKiBUaGlzIG11c3QgYmUgY2FsbGVkIF9iZWZvcmVfIHRoZSByZXF1ZXN0IGlzIHNlbnQhXG4gKi9cbmZ1bmN0aW9uIGFkZFRyYWNlUHJvcGFnYXRpb25IZWFkZXJzVG9PdXRnb2luZ1JlcXVlc3QoXG4gIHJlcXVlc3QsXG4gIHByb3BhZ2F0aW9uRGVjaXNpb25NYXAsXG4pIHtcbiAgY29uc3QgdXJsID0gZ2V0UmVxdWVzdFVybChyZXF1ZXN0KTtcblxuICAvLyBNYW51YWxseSBhZGQgdGhlIHRyYWNlIGhlYWRlcnMsIGlmIGl0IGFwcGxpZXNcbiAgLy8gTm90ZTogV2UgZG8gbm90IHVzZSBgcHJvcGFnYXRpb24uaW5qZWN0KClgIGhlcmUsIGJlY2F1c2Ugb3VyIHByb3BhZ2F0b3IgcmVsaWVzIG9uIGFuIGFjdGl2ZSBzcGFuXG4gIC8vIFdoaWNoIHdlIGRvIG5vdCBoYXZlIGluIHRoaXMgY2FzZVxuICBjb25zdCB0cmFjZVByb3BhZ2F0aW9uVGFyZ2V0cyA9IGNvcmUuZ2V0Q2xpZW50KCk/LmdldE9wdGlvbnMoKS50cmFjZVByb3BhZ2F0aW9uVGFyZ2V0cztcbiAgY29uc3QgaGVhZGVyc1RvQWRkID0gb3BlbnRlbGVtZXRyeS5zaG91bGRQcm9wYWdhdGVUcmFjZUZvclVybCh1cmwsIHRyYWNlUHJvcGFnYXRpb25UYXJnZXRzLCBwcm9wYWdhdGlvbkRlY2lzaW9uTWFwKVxuICAgID8gY29yZS5nZXRUcmFjZURhdGEoKVxuICAgIDogdW5kZWZpbmVkO1xuXG4gIGlmICghaGVhZGVyc1RvQWRkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgeyAnc2VudHJ5LXRyYWNlJzogc2VudHJ5VHJhY2UsIGJhZ2dhZ2U6IGJhZ2dhZ2UkMSB9ID0gaGVhZGVyc1RvQWRkO1xuXG4gIC8vIFdlIGRvIG5vdCB3YW50IHRvIG92ZXJ3cml0ZSBleGlzdGluZyBoZWFkZXIgaGVyZSwgaWYgaXQgd2FzIGFscmVhZHkgc2V0XG4gIGlmIChzZW50cnlUcmFjZSAmJiAhcmVxdWVzdC5nZXRIZWFkZXIoJ3NlbnRyeS10cmFjZScpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlcXVlc3Quc2V0SGVhZGVyKCdzZW50cnktdHJhY2UnLCBzZW50cnlUcmFjZSk7XG4gICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUuZGVidWcubG9nKGNvbnN0YW50cy5JTlNUUlVNRU5UQVRJT05fTkFNRSwgJ0FkZGVkIHNlbnRyeS10cmFjZSBoZWFkZXIgdG8gb3V0Z29pbmcgcmVxdWVzdCcpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICAgIGNvcmUuZGVidWcuZXJyb3IoXG4gICAgICAgICAgY29uc3RhbnRzLklOU1RSVU1FTlRBVElPTl9OQU1FLFxuICAgICAgICAgICdGYWlsZWQgdG8gYWRkIHNlbnRyeS10cmFjZSBoZWFkZXIgdG8gb3V0Z29pbmcgcmVxdWVzdDonLFxuICAgICAgICAgIGNvcmUuaXNFcnJvcihlcnJvcikgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGlmIChiYWdnYWdlJDEpIHtcbiAgICAvLyBGb3IgYmFnZ2FnZSwgd2UgbWFrZSBzdXJlIHRvIG1lcmdlIHRoaXMgaW50byBhIHBvc3NpYmx5IGV4aXN0aW5nIGhlYWRlclxuICAgIGNvbnN0IG5ld0JhZ2dhZ2UgPSBiYWdnYWdlLm1lcmdlQmFnZ2FnZUhlYWRlcnMocmVxdWVzdC5nZXRIZWFkZXIoJ2JhZ2dhZ2UnKSwgYmFnZ2FnZSQxKTtcbiAgICBpZiAobmV3QmFnZ2FnZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5zZXRIZWFkZXIoJ2JhZ2dhZ2UnLCBuZXdCYWdnYWdlKTtcbiAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLmxvZyhjb25zdGFudHMuSU5TVFJVTUVOVEFUSU9OX05BTUUsICdBZGRlZCBiYWdnYWdlIGhlYWRlciB0byBvdXRnb2luZyByZXF1ZXN0Jyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmXG4gICAgICAgICAgY29yZS5kZWJ1Zy5lcnJvcihcbiAgICAgICAgICAgIGNvbnN0YW50cy5JTlNUUlVNRU5UQVRJT05fTkFNRSxcbiAgICAgICAgICAgICdGYWlsZWQgdG8gYWRkIGJhZ2dhZ2UgaGVhZGVyIHRvIG91dGdvaW5nIHJlcXVlc3Q6JyxcbiAgICAgICAgICAgIGNvcmUuaXNFcnJvcihlcnJvcikgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldEJyZWFkY3J1bWJEYXRhKHJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICAvLyBgcmVxdWVzdC5ob3N0YCBkb2VzIG5vdCBjb250YWluIHRoZSBwb3J0LCBidXQgdGhlIGhvc3QgaGVhZGVyIGRvZXNcbiAgICBjb25zdCBob3N0ID0gcmVxdWVzdC5nZXRIZWFkZXIoJ2hvc3QnKSB8fCByZXF1ZXN0Lmhvc3Q7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnBhdGgsIGAke3JlcXVlc3QucHJvdG9jb2x9Ly8ke2hvc3R9YCk7XG4gICAgY29uc3QgcGFyc2VkVXJsID0gY29yZS5wYXJzZVVybCh1cmwudG9TdHJpbmcoKSk7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgdXJsOiBjb3JlLmdldFNhbml0aXplZFVybFN0cmluZyhwYXJzZWRVcmwpLFxuICAgICAgJ2h0dHAubWV0aG9kJzogcmVxdWVzdC5tZXRob2QgfHwgJ0dFVCcsXG4gICAgfTtcblxuICAgIGlmIChwYXJzZWRVcmwuc2VhcmNoKSB7XG4gICAgICBkYXRhWydodHRwLnF1ZXJ5J10gPSBwYXJzZWRVcmwuc2VhcmNoO1xuICAgIH1cbiAgICBpZiAocGFyc2VkVXJsLmhhc2gpIHtcbiAgICAgIGRhdGFbJ2h0dHAuZnJhZ21lbnQnXSA9IHBhcnNlZFVybC5oYXNoO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4ge307XG4gIH1cbn1cblxuLyoqIENvbnZlcnQgYW4gb3V0Z29pbmcgcmVxdWVzdCB0byByZXF1ZXN0IG9wdGlvbnMuICovXG5mdW5jdGlvbiBnZXRSZXF1ZXN0T3B0aW9ucyhyZXF1ZXN0KSB7XG4gIHJldHVybiB7XG4gICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICBwcm90b2NvbDogcmVxdWVzdC5wcm90b2NvbCxcbiAgICBob3N0OiByZXF1ZXN0Lmhvc3QsXG4gICAgaG9zdG5hbWU6IHJlcXVlc3QuaG9zdCxcbiAgICBwYXRoOiByZXF1ZXN0LnBhdGgsXG4gICAgaGVhZGVyczogcmVxdWVzdC5nZXRIZWFkZXJzKCksXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFJlcXVlc3RVcmwocmVxdWVzdCkge1xuICBjb25zdCBob3N0bmFtZSA9IHJlcXVlc3QuZ2V0SGVhZGVyKCdob3N0JykgfHwgcmVxdWVzdC5ob3N0O1xuICBjb25zdCBwcm90b2NvbCA9IHJlcXVlc3QucHJvdG9jb2w7XG4gIGNvbnN0IHBhdGggPSByZXF1ZXN0LnBhdGg7XG5cbiAgcmV0dXJuIGAke3Byb3RvY29sfS8vJHtob3N0bmFtZX0ke3BhdGh9YDtcbn1cblxuZXhwb3J0cy5hZGRSZXF1ZXN0QnJlYWRjcnVtYiA9IGFkZFJlcXVlc3RCcmVhZGNydW1iO1xuZXhwb3J0cy5hZGRUcmFjZVByb3BhZ2F0aW9uSGVhZGVyc1RvT3V0Z29pbmdSZXF1ZXN0ID0gYWRkVHJhY2VQcm9wYWdhdGlvbkhlYWRlcnNUb091dGdvaW5nUmVxdWVzdDtcbmV4cG9ydHMuZ2V0UmVxdWVzdE9wdGlvbnMgPSBnZXRSZXF1ZXN0T3B0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dGdvaW5nLXJlcXVlc3RzLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/outgoing-requests.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/common.js":
/*!*****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/common.js ***!
  \*****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/**\n * The key used to store the local variables on the error object.\n */\nconst LOCAL_VARIABLES_KEY = '__SENTRY_ERROR_LOCAL_VARIABLES__';\n\n/**\n * Creates a rate limiter that will call the disable callback when the rate limit is reached and the enable callback\n * when a timeout has occurred.\n * @param maxPerSecond Maximum number of calls per second\n * @param enable Callback to enable capture\n * @param disable Callback to disable capture\n * @returns A function to call to increment the rate limiter count\n */\nfunction createRateLimiter(\n  maxPerSecond,\n  enable,\n  disable,\n) {\n  let count = 0;\n  let retrySeconds = 5;\n  let disabledTimeout = 0;\n\n  setInterval(() => {\n    if (disabledTimeout === 0) {\n      if (count > maxPerSecond) {\n        retrySeconds *= 2;\n        disable(retrySeconds);\n\n        // Cap at one day\n        if (retrySeconds > 86400) {\n          retrySeconds = 86400;\n        }\n        disabledTimeout = retrySeconds;\n      }\n    } else {\n      disabledTimeout -= 1;\n\n      if (disabledTimeout === 0) {\n        enable();\n      }\n    }\n\n    count = 0;\n  }, 1000).unref();\n\n  return () => {\n    count += 1;\n  };\n}\n\n// Add types for the exception event data\n\n/** Could this be an anonymous function? */\nfunction isAnonymous(name) {\n  return name !== undefined && (name.length === 0 || name === '?' || name === '<anonymous>');\n}\n\n/** Do the function names appear to match? */\nfunction functionNamesMatch(a, b) {\n  return a === b || `Object.${a}` === b || a === `Object.${b}` || (isAnonymous(a) && isAnonymous(b));\n}\n\nexports.LOCAL_VARIABLES_KEY = LOCAL_VARIABLES_KEY;\nexports.createRateLimiter = createRateLimiter;\nexports.functionNamesMatch = functionNamesMatch;\nexports.isAnonymous = isAnonymous;\n//# sourceMappingURL=common.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDhCQUE4QixFQUFFLDJCQUEyQixFQUFFO0FBQzdEOztBQUVBLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIsMEJBQTBCO0FBQzFCLG1CQUFtQjtBQUNuQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL2xvY2FsLXZhcmlhYmxlcy9jb21tb24uanM/NzQ1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuLyoqXG4gKiBUaGUga2V5IHVzZWQgdG8gc3RvcmUgdGhlIGxvY2FsIHZhcmlhYmxlcyBvbiB0aGUgZXJyb3Igb2JqZWN0LlxuICovXG5jb25zdCBMT0NBTF9WQVJJQUJMRVNfS0VZID0gJ19fU0VOVFJZX0VSUk9SX0xPQ0FMX1ZBUklBQkxFU19fJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgcmF0ZSBsaW1pdGVyIHRoYXQgd2lsbCBjYWxsIHRoZSBkaXNhYmxlIGNhbGxiYWNrIHdoZW4gdGhlIHJhdGUgbGltaXQgaXMgcmVhY2hlZCBhbmQgdGhlIGVuYWJsZSBjYWxsYmFja1xuICogd2hlbiBhIHRpbWVvdXQgaGFzIG9jY3VycmVkLlxuICogQHBhcmFtIG1heFBlclNlY29uZCBNYXhpbXVtIG51bWJlciBvZiBjYWxscyBwZXIgc2Vjb25kXG4gKiBAcGFyYW0gZW5hYmxlIENhbGxiYWNrIHRvIGVuYWJsZSBjYXB0dXJlXG4gKiBAcGFyYW0gZGlzYWJsZSBDYWxsYmFjayB0byBkaXNhYmxlIGNhcHR1cmVcbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdG8gY2FsbCB0byBpbmNyZW1lbnQgdGhlIHJhdGUgbGltaXRlciBjb3VudFxuICovXG5mdW5jdGlvbiBjcmVhdGVSYXRlTGltaXRlcihcbiAgbWF4UGVyU2Vjb25kLFxuICBlbmFibGUsXG4gIGRpc2FibGUsXG4pIHtcbiAgbGV0IGNvdW50ID0gMDtcbiAgbGV0IHJldHJ5U2Vjb25kcyA9IDU7XG4gIGxldCBkaXNhYmxlZFRpbWVvdXQgPSAwO1xuXG4gIHNldEludGVydmFsKCgpID0+IHtcbiAgICBpZiAoZGlzYWJsZWRUaW1lb3V0ID09PSAwKSB7XG4gICAgICBpZiAoY291bnQgPiBtYXhQZXJTZWNvbmQpIHtcbiAgICAgICAgcmV0cnlTZWNvbmRzICo9IDI7XG4gICAgICAgIGRpc2FibGUocmV0cnlTZWNvbmRzKTtcblxuICAgICAgICAvLyBDYXAgYXQgb25lIGRheVxuICAgICAgICBpZiAocmV0cnlTZWNvbmRzID4gODY0MDApIHtcbiAgICAgICAgICByZXRyeVNlY29uZHMgPSA4NjQwMDtcbiAgICAgICAgfVxuICAgICAgICBkaXNhYmxlZFRpbWVvdXQgPSByZXRyeVNlY29uZHM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc2FibGVkVGltZW91dCAtPSAxO1xuXG4gICAgICBpZiAoZGlzYWJsZWRUaW1lb3V0ID09PSAwKSB7XG4gICAgICAgIGVuYWJsZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvdW50ID0gMDtcbiAgfSwgMTAwMCkudW5yZWYoKTtcblxuICByZXR1cm4gKCkgPT4ge1xuICAgIGNvdW50ICs9IDE7XG4gIH07XG59XG5cbi8vIEFkZCB0eXBlcyBmb3IgdGhlIGV4Y2VwdGlvbiBldmVudCBkYXRhXG5cbi8qKiBDb3VsZCB0aGlzIGJlIGFuIGFub255bW91cyBmdW5jdGlvbj8gKi9cbmZ1bmN0aW9uIGlzQW5vbnltb3VzKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUgIT09IHVuZGVmaW5lZCAmJiAobmFtZS5sZW5ndGggPT09IDAgfHwgbmFtZSA9PT0gJz8nIHx8IG5hbWUgPT09ICc8YW5vbnltb3VzPicpO1xufVxuXG4vKiogRG8gdGhlIGZ1bmN0aW9uIG5hbWVzIGFwcGVhciB0byBtYXRjaD8gKi9cbmZ1bmN0aW9uIGZ1bmN0aW9uTmFtZXNNYXRjaChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiIHx8IGBPYmplY3QuJHthfWAgPT09IGIgfHwgYSA9PT0gYE9iamVjdC4ke2J9YCB8fCAoaXNBbm9ueW1vdXMoYSkgJiYgaXNBbm9ueW1vdXMoYikpO1xufVxuXG5leHBvcnRzLkxPQ0FMX1ZBUklBQkxFU19LRVkgPSBMT0NBTF9WQVJJQUJMRVNfS0VZO1xuZXhwb3J0cy5jcmVhdGVSYXRlTGltaXRlciA9IGNyZWF0ZVJhdGVMaW1pdGVyO1xuZXhwb3J0cy5mdW5jdGlvbk5hbWVzTWF0Y2ggPSBmdW5jdGlvbk5hbWVzTWF0Y2g7XG5leHBvcnRzLmlzQW5vbnltb3VzID0gaXNBbm9ueW1vdXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/common.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/index.js":
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/index.js ***!
  \****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/nodeVersion.js\");\nconst localVariablesAsync = __webpack_require__(/*! ./local-variables-async.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-async.js\");\nconst localVariablesSync = __webpack_require__(/*! ./local-variables-sync.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-sync.js\");\n\nconst localVariablesIntegration = (options = {}) => {\n  return nodeVersion.NODE_VERSION.major < 19 ? localVariablesSync.localVariablesSyncIntegration(options) : localVariablesAsync.localVariablesAsyncIntegration(options);\n};\n\nexports.localVariablesIntegration = localVariablesIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbG9jYWwtdmFyaWFibGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG9CQUFvQixtQkFBTyxDQUFDLG9QQUFzQjtBQUNsRCw0QkFBNEIsbUJBQU8sQ0FBQyxpU0FBNEI7QUFDaEUsMkJBQTJCLG1CQUFPLENBQUMsK1JBQTJCOztBQUU5RCwrQ0FBK0M7QUFDL0M7QUFDQTs7QUFFQSxpQ0FBaUM7QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZS1jb3JlQDEwLjE5LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wX0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYXN5bmMtaG9va3NAMi4xLjBfQF8yZ2RocjZrdmRwd2huamRpb3lta2I0ZGJndS9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9sb2NhbC12YXJpYWJsZXMvaW5kZXguanM/MjE4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3Qgbm9kZVZlcnNpb24gPSByZXF1aXJlKCcuLi8uLi9ub2RlVmVyc2lvbi5qcycpO1xuY29uc3QgbG9jYWxWYXJpYWJsZXNBc3luYyA9IHJlcXVpcmUoJy4vbG9jYWwtdmFyaWFibGVzLWFzeW5jLmpzJyk7XG5jb25zdCBsb2NhbFZhcmlhYmxlc1N5bmMgPSByZXF1aXJlKCcuL2xvY2FsLXZhcmlhYmxlcy1zeW5jLmpzJyk7XG5cbmNvbnN0IGxvY2FsVmFyaWFibGVzSW50ZWdyYXRpb24gPSAob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiBub2RlVmVyc2lvbi5OT0RFX1ZFUlNJT04ubWFqb3IgPCAxOSA/IGxvY2FsVmFyaWFibGVzU3luYy5sb2NhbFZhcmlhYmxlc1N5bmNJbnRlZ3JhdGlvbihvcHRpb25zKSA6IGxvY2FsVmFyaWFibGVzQXN5bmMubG9jYWxWYXJpYWJsZXNBc3luY0ludGVncmF0aW9uKG9wdGlvbnMpO1xufTtcblxuZXhwb3J0cy5sb2NhbFZhcmlhYmxlc0ludGVncmF0aW9uID0gbG9jYWxWYXJpYWJsZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-async.js":
/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-async.js ***!
  \********************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_worker_threads = __webpack_require__(/*! node:worker_threads */ \"node:worker_threads\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debug = __webpack_require__(/*! ../../utils/debug.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/debug.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/common.js\");\n\n// This string is a placeholder that gets overwritten with the worker code.\nconst base64WorkerScript = 'LyohIEBzZW50cnkvbm9kZS1jb3JlIDEwLjE5LjAgKGQ4YzA4N2MpIHwgaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdCAqLwppbXBvcnR7U2Vzc2lvbiBhcyBlfWZyb20ibm9kZTppbnNwZWN0b3IvcHJvbWlzZXMiO2ltcG9ydHt3b3JrZXJEYXRhIGFzIHR9ZnJvbSJub2RlOndvcmtlcl90aHJlYWRzIjtjb25zdCBuPWdsb2JhbFRoaXMsaT17fTtjb25zdCBvPSJfX1NFTlRSWV9FUlJPUl9MT0NBTF9WQVJJQUJMRVNfXyI7Y29uc3QgYT10O2Z1bmN0aW9uIHMoLi4uZSl7YS5kZWJ1ZyYmZnVuY3Rpb24oZSl7aWYoISgiY29uc29sZSJpbiBuKSlyZXR1cm4gZSgpO2NvbnN0IHQ9bi5jb25zb2xlLG89e30sYT1PYmplY3Qua2V5cyhpKTthLmZvckVhY2goZT0+e2NvbnN0IG49aVtlXTtvW2VdPXRbZV0sdFtlXT1ufSk7dHJ5e3JldHVybiBlKCl9ZmluYWxseXthLmZvckVhY2goZT0+e3RbZV09b1tlXX0pfX0oKCk9PmNvbnNvbGUubG9nKCJbTG9jYWxWYXJpYWJsZXMgV29ya2VyXSIsLi4uZSkpfWFzeW5jIGZ1bmN0aW9uIGMoZSx0LG4saSl7Y29uc3Qgbz1hd2FpdCBlLnBvc3QoIlJ1bnRpbWUuZ2V0UHJvcGVydGllcyIse29iamVjdElkOnQsb3duUHJvcGVydGllczohMH0pO2lbbl09by5yZXN1bHQuZmlsdGVyKGU9PiJsZW5ndGgiIT09ZS5uYW1lJiYhaXNOYU4ocGFyc2VJbnQoZS5uYW1lLDEwKSkpLnNvcnQoKGUsdCk9PnBhcnNlSW50KGUubmFtZSwxMCktcGFyc2VJbnQodC5uYW1lLDEwKSkubWFwKGU9PmUudmFsdWU/LnZhbHVlKX1hc3luYyBmdW5jdGlvbiByKGUsdCxuLGkpe2NvbnN0IG89YXdhaXQgZS5wb3N0KCJSdW50aW1lLmdldFByb3BlcnRpZXMiLHtvYmplY3RJZDp0LG93blByb3BlcnRpZXM6ITB9KTtpW25dPW8ucmVzdWx0Lm1hcChlPT5bZS5uYW1lLGUudmFsdWU/LnZhbHVlXSkucmVkdWNlKChlLFt0LG5dKT0+KGVbdF09bixlKSx7fSl9ZnVuY3Rpb24gdShlLHQpe2UudmFsdWUmJigidmFsdWUiaW4gZS52YWx1ZT92b2lkIDA9PT1lLnZhbHVlLnZhbHVlfHxudWxsPT09ZS52YWx1ZS52YWx1ZT90W2UubmFtZV09YDwke2UudmFsdWUudmFsdWV9PmA6dFtlLm5hbWVdPWUudmFsdWUudmFsdWU6ImRlc2NyaXB0aW9uImluIGUudmFsdWUmJiJmdW5jdGlvbiIhPT1lLnZhbHVlLnR5cGU/dFtlLm5hbWVdPWA8JHtlLnZhbHVlLmRlc2NyaXB0aW9ufT5gOiJ1bmRlZmluZWQiPT09ZS52YWx1ZS50eXBlJiYodFtlLm5hbWVdPSI8dW5kZWZpbmVkPiIpKX1hc3luYyBmdW5jdGlvbiBsKGUsdCl7Y29uc3Qgbj1hd2FpdCBlLnBvc3QoIlJ1bnRpbWUuZ2V0UHJvcGVydGllcyIse29iamVjdElkOnQsb3duUHJvcGVydGllczohMH0pLGk9e307Zm9yKGNvbnN0IHQgb2Ygbi5yZXN1bHQpaWYodC52YWx1ZT8ub2JqZWN0SWQmJiJBcnJheSI9PT10LnZhbHVlLmNsYXNzTmFtZSl7Y29uc3Qgbj10LnZhbHVlLm9iamVjdElkO2F3YWl0IGMoZSxuLHQubmFtZSxpKX1lbHNlIGlmKHQudmFsdWU/Lm9iamVjdElkJiYiT2JqZWN0Ij09PXQudmFsdWUuY2xhc3NOYW1lKXtjb25zdCBuPXQudmFsdWUub2JqZWN0SWQ7YXdhaXQgcihlLG4sdC5uYW1lLGkpfWVsc2UgdC52YWx1ZSYmdSh0LGkpO3JldHVybiBpfWxldCBmOyhhc3luYyBmdW5jdGlvbigpe2NvbnN0IHQ9bmV3IGU7dC5jb25uZWN0VG9NYWluVGhyZWFkKCkscygiQ29ubmVjdGVkIHRvIG1haW4gdGhyZWFkIik7bGV0IG49ITE7dC5vbigiRGVidWdnZXIucmVzdW1lZCIsKCk9PntuPSExfSksdC5vbigiRGVidWdnZXIucGF1c2VkIixlPT57bj0hMCxhc3luYyBmdW5jdGlvbihlLHtyZWFzb246dCxkYXRhOntvYmplY3RJZDpufSxjYWxsRnJhbWVzOml9KXtpZigiZXhjZXB0aW9uIiE9PXQmJiJwcm9taXNlUmVqZWN0aW9uIiE9PXQpcmV0dXJuO2lmKGY/LigpLG51bGw9PW4pcmV0dXJuO2NvbnN0IGE9W107Zm9yKGxldCB0PTA7dDxpLmxlbmd0aDt0Kyspe2NvbnN0e3Njb3BlQ2hhaW46bixmdW5jdGlvbk5hbWU6byx0aGlzOnN9PWlbdF0sYz1uLmZpbmQoZT0+ImxvY2FsIj09PWUudHlwZSkscj0iZ2xvYmFsIiE9PXMuY2xhc3NOYW1lJiZzLmNsYXNzTmFtZT9gJHtzLmNsYXNzTmFtZX0uJHtvfWA6bztpZih2b2lkIDA9PT1jPy5vYmplY3Qub2JqZWN0SWQpYVt0XT17ZnVuY3Rpb246cn07ZWxzZXtjb25zdCBuPWF3YWl0IGwoZSxjLm9iamVjdC5vYmplY3RJZCk7YVt0XT17ZnVuY3Rpb246cix2YXJzOm59fX1hd2FpdCBlLnBvc3QoIlJ1bnRpbWUuY2FsbEZ1bmN0aW9uT24iLHtmdW5jdGlvbkRlY2xhcmF0aW9uOmBmdW5jdGlvbigpIHsgdGhpcy4ke299ID0gdGhpcy4ke299IHx8ICR7SlNPTi5zdHJpbmdpZnkoYSl9OyB9YCxzaWxlbnQ6ITAsb2JqZWN0SWQ6bn0pLGF3YWl0IGUucG9zdCgiUnVudGltZS5yZWxlYXNlT2JqZWN0Iix7b2JqZWN0SWQ6bn0pfSh0LGUucGFyYW1zKS50aGVuKGFzeW5jKCk9PntuJiZhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnJlc3VtZSIpfSxhc3luYyBlPT57biYmYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5yZXN1bWUiKX0pfSksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5lbmFibGUiKTtjb25zdCBpPSExIT09YS5jYXB0dXJlQWxsRXhjZXB0aW9ucztpZihhd2FpdCB0LnBvc3QoIkRlYnVnZ2VyLnNldFBhdXNlT25FeGNlcHRpb25zIix7c3RhdGU6aT8iYWxsIjoidW5jYXVnaHQifSksaSl7Y29uc3QgZT1hLm1heEV4Y2VwdGlvbnNQZXJTZWNvbmR8fDUwO2Y9ZnVuY3Rpb24oZSx0LG4pe2xldCBpPTAsbz01LGE9MDtyZXR1cm4gc2V0SW50ZXJ2YWwoKCk9PnswPT09YT9pPmUmJihvKj0yLG4obyksbz44NjQwMCYmKG89ODY0MDApLGE9byk6KGEtPTEsMD09PWEmJnQoKSksaT0wfSwxZTMpLnVucmVmKCksKCk9PntpKz0xfX0oZSxhc3luYygpPT57cygiUmF0ZS1saW1pdCBsaWZ0ZWQuIiksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOiJhbGwifSl9LGFzeW5jIGU9PntzKGBSYXRlLWxpbWl0IGV4Y2VlZGVkLiBEaXNhYmxpbmcgY2FwdHVyaW5nIG9mIGNhdWdodCBleGNlcHRpb25zIGZvciAke2V9IHNlY29uZHMuYCksYXdhaXQgdC5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOiJ1bmNhdWdodCJ9KX0pfX0pKCkuY2F0Y2goZT0+e3MoIkZhaWxlZCB0byBzdGFydCBkZWJ1Z2dlciIsZSl9KSxzZXRJbnRlcnZhbCgoKT0+e30sMWU0KTs=';\n\nfunction log(...args) {\n  core.debug.log('[LocalVariables]', ...args);\n}\n\n/**\n * Adds local variables to exception frames\n */\nconst localVariablesAsyncIntegration = core.defineIntegration(((\n  integrationOptions = {},\n) => {\n  function addLocalVariablesToException(exception, localVariables) {\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (exception.stacktrace?.frames || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const frameLocalVariables = localVariables[i];\n      const frame = frames[frameIndex];\n\n      if (!frame || !frameLocalVariables) {\n        // Drop out if we run out of frames to match up\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        frameLocalVariables.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frame.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frame.function, frameLocalVariables.function)\n      ) {\n        continue;\n      }\n\n      frame.vars = frameLocalVariables.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event, hint) {\n    if (\n      hint.originalException &&\n      typeof hint.originalException === 'object' &&\n      common.LOCAL_VARIABLES_KEY in hint.originalException &&\n      Array.isArray(hint.originalException[common.LOCAL_VARIABLES_KEY])\n    ) {\n      for (const exception of event.exception?.values || []) {\n        addLocalVariablesToException(exception, hint.originalException[common.LOCAL_VARIABLES_KEY]);\n      }\n\n      hint.originalException[common.LOCAL_VARIABLES_KEY] = undefined;\n    }\n\n    return event;\n  }\n\n  async function startInspector() {\n    // We load inspector dynamically because on some platforms Node is built without inspector support\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    if (!inspector.url()) {\n      inspector.open(0);\n    }\n  }\n\n  function startWorker(options) {\n    const worker = new node_worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {\n      workerData: options,\n      // We don't want any Node args to be passed to the worker\n      execArgv: [],\n      env: { ...process.env, NODE_OPTIONS: undefined },\n    });\n\n    process.on('exit', () => {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      worker.terminate();\n    });\n\n    worker.once('error', (err) => {\n      log('Worker error', err);\n    });\n\n    worker.once('exit', (code) => {\n      log('Worker exit', code);\n    });\n\n    // Ensure this thread can't block app exit\n    worker.unref();\n  }\n\n  return {\n    name: 'LocalVariablesAsync',\n    async setup(client) {\n      const clientOptions = client.getOptions();\n\n      if (!clientOptions.includeLocalVariables) {\n        return;\n      }\n\n      if (await debug.isDebuggerEnabled()) {\n        core.debug.warn('Local variables capture has been disabled because the debugger was already enabled');\n        return;\n      }\n\n      const options = {\n        ...integrationOptions,\n        debug: core.debug.isEnabled(),\n      };\n\n      startInspector().then(\n        () => {\n          try {\n            startWorker(options);\n          } catch (e) {\n            core.debug.error('Failed to start worker', e);\n          }\n        },\n        e => {\n          core.debug.error('Failed to start inspector', e);\n        },\n      );\n    },\n    processEvent(event, hint) {\n      return addLocalVariablesToEvent(event, hint);\n    },\n  };\n}) );\n\nexports.base64WorkerScript = base64WorkerScript;\nexports.localVariablesAsyncIntegration = localVariablesAsyncIntegration;\n//# sourceMappingURL=local-variables-async.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-async.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-sync.js":
/*!*******************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-sync.js ***!
  \*******************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/nodeVersion.js\");\nconst debug = __webpack_require__(/*! ../../utils/debug.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/debug.js\");\nconst common = __webpack_require__(/*! ./common.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/common.js\");\n\n/** Creates a unique hash from stack frames */\nfunction hashFrames(frames) {\n  if (frames === undefined) {\n    return;\n  }\n\n  // Only hash the 10 most recent frames (ie. the last 10)\n  return frames.slice(-10).reduce((acc, frame) => `${acc},${frame.function},${frame.lineno},${frame.colno}`, '');\n}\n\n/**\n * We use the stack parser to create a unique hash from the exception stack trace\n * This is used to lookup vars when the exception passes through the event processor\n */\nfunction hashFromStack(stackParser, stack) {\n  if (stack === undefined) {\n    return undefined;\n  }\n\n  return hashFrames(stackParser(stack, 1));\n}\n\n/** Creates a container for callbacks to be called sequentially */\nfunction createCallbackList(complete) {\n  // A collection of callbacks to be executed last to first\n  let callbacks = [];\n\n  let completedCalled = false;\n  function checkedComplete(result) {\n    callbacks = [];\n    if (completedCalled) {\n      return;\n    }\n    completedCalled = true;\n    complete(result);\n  }\n\n  // complete should be called last\n  callbacks.push(checkedComplete);\n\n  function add(fn) {\n    callbacks.push(fn);\n  }\n\n  function next(result) {\n    const popped = callbacks.pop() || checkedComplete;\n\n    try {\n      popped(result);\n    } catch {\n      // If there is an error, we still want to call the complete callback\n      checkedComplete(result);\n    }\n  }\n\n  return { add, next };\n}\n\n/**\n * Promise API is available as `Experimental` and in Node 19 only.\n *\n * Callback-based API is `Stable` since v14 and `Experimental` since v8.\n * Because of that, we are creating our own `AsyncSession` class.\n *\n * https://nodejs.org/docs/latest-v19.x/api/inspector.html#promises-api\n * https://nodejs.org/docs/latest-v14.x/api/inspector.html\n */\nclass AsyncSession  {\n  /** Throws if inspector API is not available */\n   constructor(  _session) {this._session = _session;\n    //\n  }\n\n   static async create(orDefault) {\n    if (orDefault) {\n      return orDefault;\n    }\n\n    const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n    return new AsyncSession(new inspector.Session());\n  }\n\n  /** @inheritdoc */\n   configureAndConnect(onPause, captureAll) {\n    this._session.connect();\n\n    this._session.on('Debugger.paused', event => {\n      onPause(event, () => {\n        // After the pause work is complete, resume execution or the exception context memory is leaked\n        this._session.post('Debugger.resume');\n      });\n    });\n\n    this._session.post('Debugger.enable');\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n   setPauseOnExceptions(captureAll) {\n    this._session.post('Debugger.setPauseOnExceptions', { state: captureAll ? 'all' : 'uncaught' });\n  }\n\n  /** @inheritdoc */\n   getLocalVariables(objectId, complete) {\n    this._getProperties(objectId, props => {\n      const { add, next } = createCallbackList(complete);\n\n      for (const prop of props) {\n        if (prop.value?.objectId && prop.value.className === 'Array') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollArray(id, prop.name, vars, next));\n        } else if (prop.value?.objectId && prop.value.className === 'Object') {\n          const id = prop.value.objectId;\n          add(vars => this._unrollObject(id, prop.name, vars, next));\n        } else if (prop.value) {\n          add(vars => this._unrollOther(prop, vars, next));\n        }\n      }\n\n      next({});\n    });\n  }\n\n  /**\n   * Gets all the PropertyDescriptors of an object\n   */\n   _getProperties(objectId, next) {\n    this._session.post(\n      'Runtime.getProperties',\n      {\n        objectId,\n        ownProperties: true,\n      },\n      (err, params) => {\n        if (err) {\n          next([]);\n        } else {\n          next(params.result);\n        }\n      },\n    );\n  }\n\n  /**\n   * Unrolls an array property\n   */\n   _unrollArray(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .filter(v => v.name !== 'length' && !isNaN(parseInt(v.name, 10)))\n        .sort((a, b) => parseInt(a.name, 10) - parseInt(b.name, 10))\n        .map(v => v.value?.value);\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls an object property\n   */\n   _unrollObject(objectId, name, vars, next) {\n    this._getProperties(objectId, props => {\n      vars[name] = props\n        .map(v => [v.name, v.value?.value])\n        .reduce((obj, [key, val]) => {\n          obj[key] = val;\n          return obj;\n        }, {} );\n\n      next(vars);\n    });\n  }\n\n  /**\n   * Unrolls other properties\n   */\n   _unrollOther(prop, vars, next) {\n    if (prop.value) {\n      if ('value' in prop.value) {\n        if (prop.value.value === undefined || prop.value.value === null) {\n          vars[prop.name] = `<${prop.value.value}>`;\n        } else {\n          vars[prop.name] = prop.value.value;\n        }\n      } else if ('description' in prop.value && prop.value.type !== 'function') {\n        vars[prop.name] = `<${prop.value.description}>`;\n      } else if (prop.value.type === 'undefined') {\n        vars[prop.name] = '<undefined>';\n      }\n    }\n\n    next(vars);\n  }\n}\n\nconst INTEGRATION_NAME = 'LocalVariables';\n\n/**\n * Adds local variables to exception frames\n */\nconst _localVariablesSyncIntegration = ((\n  options = {},\n  sessionOverride,\n) => {\n  const cachedFrames = new core.LRUMap(20);\n  let rateLimiter;\n  let shouldProcessEvent = false;\n\n  function addLocalVariablesToException(exception) {\n    const hash = hashFrames(exception.stacktrace?.frames);\n\n    if (hash === undefined) {\n      return;\n    }\n\n    // Check if we have local variables for an exception that matches the hash\n    // remove is identical to get but also removes the entry from the cache\n    const cachedFrame = cachedFrames.remove(hash);\n\n    if (cachedFrame === undefined) {\n      return;\n    }\n\n    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames\n    // but do not appear in the debugger call frames\n    const frames = (exception.stacktrace?.frames || []).filter(frame => frame.function !== 'new Promise');\n\n    for (let i = 0; i < frames.length; i++) {\n      // Sentry frames are in reverse order\n      const frameIndex = frames.length - i - 1;\n\n      const cachedFrameVariable = cachedFrame[i];\n      const frameVariable = frames[frameIndex];\n\n      // Drop out if we run out of frames to match up\n      if (!frameVariable || !cachedFrameVariable) {\n        break;\n      }\n\n      if (\n        // We need to have vars to add\n        cachedFrameVariable.vars === undefined ||\n        // We're not interested in frames that are not in_app because the vars are not relevant\n        frameVariable.in_app === false ||\n        // The function names need to match\n        !common.functionNamesMatch(frameVariable.function, cachedFrameVariable.function)\n      ) {\n        continue;\n      }\n\n      frameVariable.vars = cachedFrameVariable.vars;\n    }\n  }\n\n  function addLocalVariablesToEvent(event) {\n    for (const exception of event.exception?.values || []) {\n      addLocalVariablesToException(exception);\n    }\n\n    return event;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    async setupOnce() {\n      const client = core.getClient();\n      const clientOptions = client?.getOptions();\n\n      if (!clientOptions?.includeLocalVariables) {\n        return;\n      }\n\n      // Only setup this integration if the Node version is >= v18\n      // https://github.com/getsentry/sentry-javascript/issues/7697\n      const unsupportedNodeVersion = nodeVersion.NODE_MAJOR < 18;\n\n      if (unsupportedNodeVersion) {\n        core.debug.log('The `LocalVariables` integration is only supported on Node >= v18.');\n        return;\n      }\n\n      if (await debug.isDebuggerEnabled()) {\n        core.debug.warn('Local variables capture has been disabled because the debugger was already enabled');\n        return;\n      }\n\n      AsyncSession.create(sessionOverride).then(\n        session => {\n          function handlePaused(\n            stackParser,\n            { params: { reason, data, callFrames } },\n            complete,\n          ) {\n            if (reason !== 'exception' && reason !== 'promiseRejection') {\n              complete();\n              return;\n            }\n\n            rateLimiter?.();\n\n            // data.description contains the original error.stack\n            const exceptionHash = hashFromStack(stackParser, data.description);\n\n            if (exceptionHash == undefined) {\n              complete();\n              return;\n            }\n\n            const { add, next } = createCallbackList(frames => {\n              cachedFrames.set(exceptionHash, frames);\n              complete();\n            });\n\n            // Because we're queuing up and making all these calls synchronously, we can potentially overflow the stack\n            // For this reason we only attempt to get local variables for the first 5 frames\n            for (let i = 0; i < Math.min(callFrames.length, 5); i++) {\n              // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n              const { scopeChain, functionName, this: obj } = callFrames[i];\n\n              const localScope = scopeChain.find(scope => scope.type === 'local');\n\n              // obj.className is undefined in ESM modules\n              const fn =\n                obj.className === 'global' || !obj.className ? functionName : `${obj.className}.${functionName}`;\n\n              if (localScope?.object.objectId === undefined) {\n                add(frames => {\n                  frames[i] = { function: fn };\n                  next(frames);\n                });\n              } else {\n                const id = localScope.object.objectId;\n                add(frames =>\n                  session.getLocalVariables(id, vars => {\n                    frames[i] = { function: fn, vars };\n                    next(frames);\n                  }),\n                );\n              }\n            }\n\n            next([]);\n          }\n\n          const captureAll = options.captureAllExceptions !== false;\n\n          session.configureAndConnect(\n            (ev, complete) =>\n              handlePaused(clientOptions.stackParser, ev , complete),\n            captureAll,\n          );\n\n          if (captureAll) {\n            const max = options.maxExceptionsPerSecond || 50;\n\n            rateLimiter = common.createRateLimiter(\n              max,\n              () => {\n                core.debug.log('Local variables rate-limit lifted.');\n                session.setPauseOnExceptions(true);\n              },\n              seconds => {\n                core.debug.log(\n                  `Local variables rate-limit exceeded. Disabling capturing of caught exceptions for ${seconds} seconds.`,\n                );\n                session.setPauseOnExceptions(false);\n              },\n            );\n          }\n\n          shouldProcessEvent = true;\n        },\n        error => {\n          core.debug.log('The `LocalVariables` integration failed to start.', error);\n        },\n      );\n    },\n    processEvent(event) {\n      if (shouldProcessEvent) {\n        return addLocalVariablesToEvent(event);\n      }\n\n      return event;\n    },\n    // These are entirely for testing\n    _getCachedFramesCount() {\n      return cachedFrames.size;\n    },\n    _getFirstCachedFrame() {\n      return cachedFrames.values()[0];\n    },\n  };\n}) ;\n\n/**\n * Adds local variables to exception frames.\n */\nconst localVariablesSyncIntegration = core.defineIntegration(_localVariablesSyncIntegration);\n\nexports.createCallbackList = createCallbackList;\nexports.hashFrames = hashFrames;\nexports.hashFromStack = hashFromStack;\nexports.localVariablesSyncIntegration = localVariablesSyncIntegration;\n//# sourceMappingURL=local-variables-sync.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/local-variables-sync.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/modules.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/modules.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_fs = __webpack_require__(/*! node:fs */ \"node:fs\");\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst detection = __webpack_require__(/*! ../utils/detection.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/detection.js\");\n\nlet moduleCache;\n\nconst INTEGRATION_NAME = 'Modules';\n\n/**\n * `__SENTRY_SERVER_MODULES__` can be replaced at build time with the modules loaded by the server.\n * Right now, we leverage this in Next.js to circumvent the problem that we do not get access to these things at runtime.\n */\nconst SERVER_MODULES = typeof {\"@hookform/resolvers\":\"^3.3.4\",\"@radix-ui/react-dropdown-menu\":\"^2.0.6\",\"@radix-ui/react-select\":\"^2.0.0\",\"@radix-ui/react-slot\":\"^1.0.2\",\"@radix-ui/react-tabs\":\"^1.1.13\",\"@supabase/supabase-js\":\"^2.43.4\",\"@tanstack/react-query\":\"^5.29.2\",\"@tanstack/react-query-devtools\":\"^5.29.2\",\"@tauri-apps/api\":\"^1.5.3\",\"class-variance-authority\":\"^0.7.0\",\"clsx\":\"^2.1.0\",\"drizzle-orm\":\"^0.30.10\",\"framer-motion\":\"^11.0.24\",\"idb\":\"^7.1.1\",\"lucide-react\":\"^0.379.0\",\"next\":\"14.2.3\",\"next-pwa\":\"^5.6.0\",\"next-themes\":\"^0.3.0\",\"pg\":\"^8.16.3\",\"react\":\"18.3.1\",\"react-dom\":\"18.3.1\",\"react-hook-form\":\"^7.51.4\",\"sonner\":\"^1.4.0\",\"superjson\":\"^2.2.1\",\"tailwind-merge\":\"^2.2.1\",\"tailwindcss-animate\":\"^1.0.7\",\"zod\":\"^3.25.76\",\"@sentry/nextjs\":\"^10.19.0\",\"@sentry/wizard\":\"^6.6.0\",\"@testing-library/jest-dom\":\"^6.4.4\",\"@types/node\":\"20.11.30\",\"@types/react\":\"18.2.79\",\"@types/react-dom\":\"18.2.25\",\"@typescript-eslint/eslint-plugin\":\"^7.7.1\",\"@typescript-eslint/parser\":\"^7.7.1\",\"autoprefixer\":\"^10.4.18\",\"dotenv\":\"^17.2.3\",\"drizzle-kit\":\"^0.21.4\",\"eslint\":\"^8.57.0\",\"eslint-config-next\":\"14.2.3\",\"eslint-config-prettier\":\"^9.1.0\",\"eslint-plugin-import\":\"^2.29.1\",\"eslint-plugin-unused-imports\":\"^4.2.0\",\"postcss\":\"^8.4.38\",\"prettier\":\"^3.2.5\",\"tailwindcss\":\"^3.4.3\",\"tsx\":\"^4.7.1\",\"typescript\":\"5.4.4\",\"vitest\":\"1.5.2\"} === 'undefined' ? {} : {\"@hookform/resolvers\":\"^3.3.4\",\"@radix-ui/react-dropdown-menu\":\"^2.0.6\",\"@radix-ui/react-select\":\"^2.0.0\",\"@radix-ui/react-slot\":\"^1.0.2\",\"@radix-ui/react-tabs\":\"^1.1.13\",\"@supabase/supabase-js\":\"^2.43.4\",\"@tanstack/react-query\":\"^5.29.2\",\"@tanstack/react-query-devtools\":\"^5.29.2\",\"@tauri-apps/api\":\"^1.5.3\",\"class-variance-authority\":\"^0.7.0\",\"clsx\":\"^2.1.0\",\"drizzle-orm\":\"^0.30.10\",\"framer-motion\":\"^11.0.24\",\"idb\":\"^7.1.1\",\"lucide-react\":\"^0.379.0\",\"next\":\"14.2.3\",\"next-pwa\":\"^5.6.0\",\"next-themes\":\"^0.3.0\",\"pg\":\"^8.16.3\",\"react\":\"18.3.1\",\"react-dom\":\"18.3.1\",\"react-hook-form\":\"^7.51.4\",\"sonner\":\"^1.4.0\",\"superjson\":\"^2.2.1\",\"tailwind-merge\":\"^2.2.1\",\"tailwindcss-animate\":\"^1.0.7\",\"zod\":\"^3.25.76\",\"@sentry/nextjs\":\"^10.19.0\",\"@sentry/wizard\":\"^6.6.0\",\"@testing-library/jest-dom\":\"^6.4.4\",\"@types/node\":\"20.11.30\",\"@types/react\":\"18.2.79\",\"@types/react-dom\":\"18.2.25\",\"@typescript-eslint/eslint-plugin\":\"^7.7.1\",\"@typescript-eslint/parser\":\"^7.7.1\",\"autoprefixer\":\"^10.4.18\",\"dotenv\":\"^17.2.3\",\"drizzle-kit\":\"^0.21.4\",\"eslint\":\"^8.57.0\",\"eslint-config-next\":\"14.2.3\",\"eslint-config-prettier\":\"^9.1.0\",\"eslint-plugin-import\":\"^2.29.1\",\"eslint-plugin-unused-imports\":\"^4.2.0\",\"postcss\":\"^8.4.38\",\"prettier\":\"^3.2.5\",\"tailwindcss\":\"^3.4.3\",\"tsx\":\"^4.7.1\",\"typescript\":\"5.4.4\",\"vitest\":\"1.5.2\"};\n\nconst _modulesIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules(),\n      };\n\n      return event;\n    },\n    getModules: _getModules,\n  };\n}) ;\n\n/**\n * Add node modules / packages to the event.\n * For this, multiple sources are used:\n * - They can be injected at build time into the __SENTRY_SERVER_MODULES__ variable (e.g. in Next.js)\n * - They are extracted from the dependencies & devDependencies in the package.json file\n * - They are extracted from the require.cache (CJS only)\n */\nconst modulesIntegration = _modulesIntegration;\n\nfunction getRequireCachePaths() {\n  try {\n    return __webpack_require__.c ? Object.keys(__webpack_require__.c ) : [];\n  } catch {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules() {\n  return {\n    ...SERVER_MODULES,\n    ...getModulesFromPackageJson(),\n    ...(detection.isCjs() ? collectRequireModules() : {}),\n  };\n}\n\n/** Extract information about package.json modules from require.cache */\nfunction collectRequireModules() {\n  const mainPaths = __webpack_require__.c[__webpack_require__.s]?.paths || [];\n  const paths = getRequireCachePaths();\n\n  // We start with the modules from package.json (if possible)\n  // These may be overwritten by more specific versions from the require.cache\n  const infos = {};\n  const seen = new Set();\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = () => {\n      const orig = dir;\n      dir = node_path.dirname(orig);\n\n      if (!dir || orig === dir || seen.has(orig)) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = node_path.join(orig, 'package.json');\n      seen.add(orig);\n\n      if (!node_fs.existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(node_fs.readFileSync(pkgfile, 'utf8'))\n\n;\n        infos[info.name] = info.version;\n      } catch {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules() {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\n\nfunction getPackageJson() {\n  try {\n    const filePath = node_path.join(process.cwd(), 'package.json');\n    const packageJson = JSON.parse(node_fs.readFileSync(filePath, 'utf8')) ;\n\n    return packageJson;\n  } catch {\n    return {};\n  }\n}\n\nfunction getModulesFromPackageJson() {\n  const packageJson = getPackageJson();\n\n  return {\n    ...packageJson.dependencies,\n    ...packageJson.devDependencies,\n  };\n}\n\nexports.modulesIntegration = modulesIntegration;\n//# sourceMappingURL=modules.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbW9kdWxlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyx3QkFBUztBQUNqQyxrQkFBa0IsbUJBQU8sQ0FBQyw0QkFBVztBQUNyQyxrQkFBa0IsbUJBQU8sQ0FBQyx5UEFBdUI7O0FBRWpEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG94Q0FBeUIsc0JBQXNCLEVBQUUsb3hDQUF5Qjs7QUFFeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLHFCQUFhLGVBQWUscUJBQWE7QUFDcEQsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQiw0Q0FBWTtBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMEJBQTBCO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbW9kdWxlcy5qcz9kNDhhIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBub2RlX2ZzID0gcmVxdWlyZSgnbm9kZTpmcycpO1xuY29uc3Qgbm9kZV9wYXRoID0gcmVxdWlyZSgnbm9kZTpwYXRoJyk7XG5jb25zdCBkZXRlY3Rpb24gPSByZXF1aXJlKCcuLi91dGlscy9kZXRlY3Rpb24uanMnKTtcblxubGV0IG1vZHVsZUNhY2hlO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ01vZHVsZXMnO1xuXG4vKipcbiAqIGBfX1NFTlRSWV9TRVJWRVJfTU9EVUxFU19fYCBjYW4gYmUgcmVwbGFjZWQgYXQgYnVpbGQgdGltZSB3aXRoIHRoZSBtb2R1bGVzIGxvYWRlZCBieSB0aGUgc2VydmVyLlxuICogUmlnaHQgbm93LCB3ZSBsZXZlcmFnZSB0aGlzIGluIE5leHQuanMgdG8gY2lyY3VtdmVudCB0aGUgcHJvYmxlbSB0aGF0IHdlIGRvIG5vdCBnZXQgYWNjZXNzIHRvIHRoZXNlIHRoaW5ncyBhdCBydW50aW1lLlxuICovXG5jb25zdCBTRVJWRVJfTU9EVUxFUyA9IHR5cGVvZiBfX1NFTlRSWV9TRVJWRVJfTU9EVUxFU19fID09PSAndW5kZWZpbmVkJyA/IHt9IDogX19TRU5UUllfU0VSVkVSX01PRFVMRVNfXztcblxuY29uc3QgX21vZHVsZXNJbnRlZ3JhdGlvbiA9ICgoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBwcm9jZXNzRXZlbnQoZXZlbnQpIHtcbiAgICAgIGV2ZW50Lm1vZHVsZXMgPSB7XG4gICAgICAgIC4uLmV2ZW50Lm1vZHVsZXMsXG4gICAgICAgIC4uLl9nZXRNb2R1bGVzKCksXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcbiAgICBnZXRNb2R1bGVzOiBfZ2V0TW9kdWxlcyxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBBZGQgbm9kZSBtb2R1bGVzIC8gcGFja2FnZXMgdG8gdGhlIGV2ZW50LlxuICogRm9yIHRoaXMsIG11bHRpcGxlIHNvdXJjZXMgYXJlIHVzZWQ6XG4gKiAtIFRoZXkgY2FuIGJlIGluamVjdGVkIGF0IGJ1aWxkIHRpbWUgaW50byB0aGUgX19TRU5UUllfU0VSVkVSX01PRFVMRVNfXyB2YXJpYWJsZSAoZS5nLiBpbiBOZXh0LmpzKVxuICogLSBUaGV5IGFyZSBleHRyYWN0ZWQgZnJvbSB0aGUgZGVwZW5kZW5jaWVzICYgZGV2RGVwZW5kZW5jaWVzIGluIHRoZSBwYWNrYWdlLmpzb24gZmlsZVxuICogLSBUaGV5IGFyZSBleHRyYWN0ZWQgZnJvbSB0aGUgcmVxdWlyZS5jYWNoZSAoQ0pTIG9ubHkpXG4gKi9cbmNvbnN0IG1vZHVsZXNJbnRlZ3JhdGlvbiA9IF9tb2R1bGVzSW50ZWdyYXRpb247XG5cbmZ1bmN0aW9uIGdldFJlcXVpcmVDYWNoZVBhdGhzKCkge1xuICB0cnkge1xuICAgIHJldHVybiByZXF1aXJlLmNhY2hlID8gT2JqZWN0LmtleXMocmVxdWlyZS5jYWNoZSApIDogW107XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG4vKiogRXh0cmFjdCBpbmZvcm1hdGlvbiBhYm91dCBwYWNrYWdlLmpzb24gbW9kdWxlcyAqL1xuZnVuY3Rpb24gY29sbGVjdE1vZHVsZXMoKSB7XG4gIHJldHVybiB7XG4gICAgLi4uU0VSVkVSX01PRFVMRVMsXG4gICAgLi4uZ2V0TW9kdWxlc0Zyb21QYWNrYWdlSnNvbigpLFxuICAgIC4uLihkZXRlY3Rpb24uaXNDanMoKSA/IGNvbGxlY3RSZXF1aXJlTW9kdWxlcygpIDoge30pLFxuICB9O1xufVxuXG4vKiogRXh0cmFjdCBpbmZvcm1hdGlvbiBhYm91dCBwYWNrYWdlLmpzb24gbW9kdWxlcyBmcm9tIHJlcXVpcmUuY2FjaGUgKi9cbmZ1bmN0aW9uIGNvbGxlY3RSZXF1aXJlTW9kdWxlcygpIHtcbiAgY29uc3QgbWFpblBhdGhzID0gcmVxdWlyZS5tYWluPy5wYXRocyB8fCBbXTtcbiAgY29uc3QgcGF0aHMgPSBnZXRSZXF1aXJlQ2FjaGVQYXRocygpO1xuXG4gIC8vIFdlIHN0YXJ0IHdpdGggdGhlIG1vZHVsZXMgZnJvbSBwYWNrYWdlLmpzb24gKGlmIHBvc3NpYmxlKVxuICAvLyBUaGVzZSBtYXkgYmUgb3ZlcndyaXR0ZW4gYnkgbW9yZSBzcGVjaWZpYyB2ZXJzaW9ucyBmcm9tIHRoZSByZXF1aXJlLmNhY2hlXG4gIGNvbnN0IGluZm9zID0ge307XG4gIGNvbnN0IHNlZW4gPSBuZXcgU2V0KCk7XG5cbiAgcGF0aHMuZm9yRWFjaChwYXRoID0+IHtcbiAgICBsZXQgZGlyID0gcGF0aDtcblxuICAgIC8qKiBUcmF2ZXJzZSBkaXJlY3RvcmllcyB1cHdhcmQgaW4gdGhlIHNlYXJjaCBvZiBwYWNrYWdlLmpzb24gZmlsZSAqL1xuICAgIGNvbnN0IHVwZGlyID0gKCkgPT4ge1xuICAgICAgY29uc3Qgb3JpZyA9IGRpcjtcbiAgICAgIGRpciA9IG5vZGVfcGF0aC5kaXJuYW1lKG9yaWcpO1xuXG4gICAgICBpZiAoIWRpciB8fCBvcmlnID09PSBkaXIgfHwgc2Vlbi5oYXMob3JpZykpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChtYWluUGF0aHMuaW5kZXhPZihkaXIpIDwgMCkge1xuICAgICAgICByZXR1cm4gdXBkaXIoKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgcGtnZmlsZSA9IG5vZGVfcGF0aC5qb2luKG9yaWcsICdwYWNrYWdlLmpzb24nKTtcbiAgICAgIHNlZW4uYWRkKG9yaWcpO1xuXG4gICAgICBpZiAoIW5vZGVfZnMuZXhpc3RzU3luYyhwa2dmaWxlKSkge1xuICAgICAgICByZXR1cm4gdXBkaXIoKTtcbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5mbyA9IEpTT04ucGFyc2Uobm9kZV9mcy5yZWFkRmlsZVN5bmMocGtnZmlsZSwgJ3V0ZjgnKSlcblxuO1xuICAgICAgICBpbmZvc1tpbmZvLm5hbWVdID0gaW5mby52ZXJzaW9uO1xuICAgICAgfSBjYXRjaCB7XG4gICAgICAgIC8vIG5vLWVtcHR5XG4gICAgICB9XG4gICAgfTtcblxuICAgIHVwZGlyKCk7XG4gIH0pO1xuXG4gIHJldHVybiBpbmZvcztcbn1cblxuLyoqIEZldGNoZXMgdGhlIGxpc3Qgb2YgbW9kdWxlcyBhbmQgdGhlIHZlcnNpb25zIGxvYWRlZCBieSB0aGUgZW50cnkgZmlsZSBmb3IgeW91ciBub2RlLmpzIGFwcC4gKi9cbmZ1bmN0aW9uIF9nZXRNb2R1bGVzKCkge1xuICBpZiAoIW1vZHVsZUNhY2hlKSB7XG4gICAgbW9kdWxlQ2FjaGUgPSBjb2xsZWN0TW9kdWxlcygpO1xuICB9XG4gIHJldHVybiBtb2R1bGVDYWNoZTtcbn1cblxuZnVuY3Rpb24gZ2V0UGFja2FnZUpzb24oKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgZmlsZVBhdGggPSBub2RlX3BhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAncGFja2FnZS5qc29uJyk7XG4gICAgY29uc3QgcGFja2FnZUpzb24gPSBKU09OLnBhcnNlKG5vZGVfZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCAndXRmOCcpKSA7XG5cbiAgICByZXR1cm4gcGFja2FnZUpzb247XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiB7fTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRNb2R1bGVzRnJvbVBhY2thZ2VKc29uKCkge1xuICBjb25zdCBwYWNrYWdlSnNvbiA9IGdldFBhY2thZ2VKc29uKCk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5wYWNrYWdlSnNvbi5kZXBlbmRlbmNpZXMsXG4gICAgLi4ucGFja2FnZUpzb24uZGV2RGVwZW5kZW5jaWVzLFxuICB9O1xufVxuXG5leHBvcnRzLm1vZHVsZXNJbnRlZ3JhdGlvbiA9IG1vZHVsZXNJbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1vZHVsZXMuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/modules.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js":
/*!************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js ***!
  \************************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core$1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_5qhoifmlgqufioqeczcfzlo2z4/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst diagch = __webpack_require__(/*! diagnostics_channel */ \"diagnostics_channel\");\nconst nodeVersion = __webpack_require__(/*! ../../nodeVersion.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/nodeVersion.js\");\nconst baggage = __webpack_require__(/*! ../../utils/baggage.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/baggage.js\");\n\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\n\n// For baggage, we make sure to merge this into a possibly existing header\nconst BAGGAGE_HEADER_REGEX = /baggage: (.*)\\r\\n/;\n\n/**\n * This custom node-fetch instrumentation is used to instrument outgoing fetch requests.\n * It does not emit any spans.\n *\n * The reason this is isolated from the OpenTelemetry instrumentation is that users may overwrite this,\n * which would lead to Sentry not working as expected.\n *\n * This is heavily inspired & adapted from:\n * https://github.com/open-telemetry/opentelemetry-js-contrib/blob/28e209a9da36bc4e1f8c2b0db7360170ed46cb80/plugins/node/instrumentation-undici/src/undici.ts\n */\nclass SentryNodeFetchInstrumentation extends instrumentation.InstrumentationBase {\n  // Keep ref to avoid https://github.com/nodejs/node/issues/42170 bug and for\n  // unsubscribing.\n\n   constructor(config = {}) {\n    super('@sentry/instrumentation-node-fetch', core.SDK_VERSION, config);\n    this._channelSubs = [];\n    this._propagationDecisionMap = new core.LRUMap(100);\n    this._ignoreOutgoingRequestsMap = new WeakMap();\n  }\n\n  /** No need to instrument files/modules. */\n   init() {\n    return undefined;\n  }\n\n  /** Disable the instrumentation. */\n   disable() {\n    super.disable();\n    this._channelSubs.forEach(sub => sub.unsubscribe());\n    this._channelSubs = [];\n  }\n\n  /** Enable the instrumentation. */\n   enable() {\n    // \"enabled\" handling is currently a bit messy with InstrumentationBase.\n    // If constructed with `{enabled: false}`, this `.enable()` is still called,\n    // and `this.getConfig().enabled !== this.isEnabled()`, creating confusion.\n    //\n    // For now, this class will setup for instrumenting if `.enable()` is\n    // called, but use `this.getConfig().enabled` to determine if\n    // instrumentation should be generated. This covers the more likely common\n    // case of config being given a construction time, rather than later via\n    // `instance.enable()`, `.disable()`, or `.setConfig()` calls.\n    super.enable();\n\n    // This method is called by the super-class constructor before ours is\n    // called. So we need to ensure the property is initalized.\n    this._channelSubs = this._channelSubs || [];\n\n    // Avoid to duplicate subscriptions\n    if (this._channelSubs.length > 0) {\n      return;\n    }\n\n    this._subscribeToChannel('undici:request:create', this._onRequestCreated.bind(this));\n    this._subscribeToChannel('undici:request:headers', this._onResponseHeaders.bind(this));\n  }\n\n  /**\n   * This method is called when a request is created.\n   * You can still mutate the request here before it is sent.\n   */\n   _onRequestCreated({ request }) {\n    const config = this.getConfig();\n    const enabled = config.enabled !== false;\n\n    if (!enabled) {\n      return;\n    }\n\n    const shouldIgnore = this._shouldIgnoreOutgoingRequest(request);\n    // We store this decisision for later so we do not need to re-evaluate it\n    // Additionally, the active context is not correct in _onResponseHeaders, so we need to make sure it is evaluated here\n    this._ignoreOutgoingRequestsMap.set(request, shouldIgnore);\n\n    if (shouldIgnore) {\n      return;\n    }\n\n    const url = getAbsoluteUrl(request.origin, request.path);\n\n    // Manually add the trace headers, if it applies\n    // Note: We do not use `propagation.inject()` here, because our propagator relies on an active span\n    // Which we do not have in this case\n    // The propagator _may_ overwrite this, but this should be fine as it is the same data\n    const tracePropagationTargets = core.getClient()?.getOptions().tracePropagationTargets;\n    const addedHeaders = opentelemetry.shouldPropagateTraceForUrl(url, tracePropagationTargets, this._propagationDecisionMap)\n      ? core.getTraceData()\n      : undefined;\n\n    if (!addedHeaders) {\n      return;\n    }\n\n    const { 'sentry-trace': sentryTrace, baggage: baggage$1 } = addedHeaders;\n\n    // We do not want to overwrite existing headers here\n    // If the core UndiciInstrumentation is registered, it will already have set the headers\n    // We do not want to add any then\n    if (Array.isArray(request.headers)) {\n      const requestHeaders = request.headers;\n\n      // We do not want to overwrite existing header here, if it was already set\n      if (sentryTrace && !requestHeaders.includes(SENTRY_TRACE_HEADER)) {\n        requestHeaders.push(SENTRY_TRACE_HEADER, sentryTrace);\n      }\n\n      // For baggage, we make sure to merge this into a possibly existing header\n      const existingBaggagePos = requestHeaders.findIndex(header => header === SENTRY_BAGGAGE_HEADER);\n      if (baggage$1 && existingBaggagePos === -1) {\n        requestHeaders.push(SENTRY_BAGGAGE_HEADER, baggage$1);\n      } else if (baggage$1) {\n        const existingBaggage = requestHeaders[existingBaggagePos + 1];\n        const merged = baggage.mergeBaggageHeaders(existingBaggage, baggage$1);\n        if (merged) {\n          requestHeaders[existingBaggagePos + 1] = merged;\n        }\n      }\n    } else {\n      const requestHeaders = request.headers;\n      // We do not want to overwrite existing header here, if it was already set\n      if (sentryTrace && !requestHeaders.includes(`${SENTRY_TRACE_HEADER}:`)) {\n        request.headers += `${SENTRY_TRACE_HEADER}: ${sentryTrace}\\r\\n`;\n      }\n\n      const existingBaggage = request.headers.match(BAGGAGE_HEADER_REGEX)?.[1];\n      if (baggage$1 && !existingBaggage) {\n        request.headers += `${SENTRY_BAGGAGE_HEADER}: ${baggage$1}\\r\\n`;\n      } else if (baggage$1) {\n        const merged = baggage.mergeBaggageHeaders(existingBaggage, baggage$1);\n        if (merged) {\n          request.headers = request.headers.replace(BAGGAGE_HEADER_REGEX, `baggage: ${merged}\\r\\n`);\n        }\n      }\n    }\n  }\n\n  /**\n   * This method is called when a response is received.\n   */\n   _onResponseHeaders({ request, response }) {\n    const config = this.getConfig();\n    const enabled = config.enabled !== false;\n\n    if (!enabled) {\n      return;\n    }\n\n    const _breadcrumbs = config.breadcrumbs;\n    const breadCrumbsEnabled = typeof _breadcrumbs === 'undefined' ? true : _breadcrumbs;\n\n    const shouldIgnore = this._ignoreOutgoingRequestsMap.get(request);\n\n    if (breadCrumbsEnabled && !shouldIgnore) {\n      addRequestBreadcrumb(request, response);\n    }\n  }\n\n  /** Subscribe to a diagnostics channel. */\n   _subscribeToChannel(\n    diagnosticChannel,\n    onMessage,\n  ) {\n    // `diagnostics_channel` had a ref counting bug until v18.19.0.\n    // https://github.com/nodejs/node/pull/47520\n    const useNewSubscribe = nodeVersion.NODE_MAJOR > 18 || (nodeVersion.NODE_MAJOR === 18 && nodeVersion.NODE_MINOR >= 19);\n\n    let unsubscribe;\n    if (useNewSubscribe) {\n      diagch.subscribe?.(diagnosticChannel, onMessage);\n      unsubscribe = () => diagch.unsubscribe?.(diagnosticChannel, onMessage);\n    } else {\n      const channel = diagch.channel(diagnosticChannel);\n      channel.subscribe(onMessage);\n      unsubscribe = () => channel.unsubscribe(onMessage);\n    }\n\n    this._channelSubs.push({\n      name: diagnosticChannel,\n      unsubscribe,\n    });\n  }\n\n  /**\n   * Check if the given outgoing request should be ignored.\n   */\n   _shouldIgnoreOutgoingRequest(request) {\n    if (core$1.isTracingSuppressed(api.context.active())) {\n      return true;\n    }\n\n    // Add trace propagation headers\n    const url = getAbsoluteUrl(request.origin, request.path);\n    const ignoreOutgoingRequests = this.getConfig().ignoreOutgoingRequests;\n\n    if (typeof ignoreOutgoingRequests !== 'function' || !url) {\n      return false;\n    }\n\n    return ignoreOutgoingRequests(url);\n  }\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction addRequestBreadcrumb(request, response) {\n  const data = getBreadcrumbData(request);\n\n  const statusCode = response.statusCode;\n  const level = core.getBreadcrumbLogLevelFromHttpStatusCode(statusCode);\n\n  core.addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        status_code: statusCode,\n        ...data,\n      },\n      type: 'http',\n      level,\n    },\n    {\n      event: 'response',\n      request,\n      response,\n    },\n  );\n}\n\nfunction getBreadcrumbData(request) {\n  try {\n    const url = getAbsoluteUrl(request.origin, request.path);\n    const parsedUrl = core.parseUrl(url);\n\n    const data = {\n      url: core.getSanitizedUrlString(parsedUrl),\n      'http.method': request.method || 'GET',\n    };\n\n    if (parsedUrl.search) {\n      data['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      data['http.fragment'] = parsedUrl.hash;\n    }\n\n    return data;\n  } catch {\n    return {};\n  }\n}\n\nfunction getAbsoluteUrl(origin, path = '/') {\n  try {\n    const url = new URL(path, origin);\n    return url.toString();\n  } catch {\n    // fallback: Construct it on our own\n    const url = `${origin}`;\n\n    if (url.endsWith('/') && path.startsWith('/')) {\n      return `${url}${path.slice(1)}`;\n    }\n\n    if (!url.endsWith('/') && !path.startsWith('/')) {\n      return `${url}/${path.slice(1)}`;\n    }\n\n    return `${url}${path}`;\n  }\n}\n\nexports.SentryNodeFetchInstrumentation = SentryNodeFetchInstrumentation;\n//# sourceMappingURL=SentryNodeFetchInstrumentation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/index.js":
/*!***********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/index.js ***!
  \***********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst instrument = __webpack_require__(/*! ../../otel/instrument.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/instrument.js\");\nconst SentryNodeFetchInstrumentation = __webpack_require__(/*! ./SentryNodeFetchInstrumentation.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/SentryNodeFetchInstrumentation.js\");\n\nconst INTEGRATION_NAME = 'NodeFetch';\n\nconst instrumentSentryNodeFetch = instrument.generateInstrumentOnce(\n  `${INTEGRATION_NAME}.sentry`,\n  SentryNodeFetchInstrumentation.SentryNodeFetchInstrumentation,\n  (options) => {\n    return options;\n  },\n);\n\nconst _nativeNodeFetchIntegration = ((options = {}) => {\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      instrumentSentryNodeFetch(options);\n    },\n  };\n}) ;\n\nconst nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);\n\nexports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvbm9kZS1mZXRjaC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMsbUJBQW1CLG1CQUFPLENBQUMsNFBBQTBCO0FBQ3JELHVDQUF1QyxtQkFBTyxDQUFDLDhTQUFxQzs7QUFFcEY7O0FBRUE7QUFDQSxLQUFLLGlCQUFpQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEsa0RBQWtEO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZS1jb3JlQDEwLjE5LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wX0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYXN5bmMtaG9va3NAMi4xLjBfQF8yZ2RocjZrdmRwd2huamRpb3lta2I0ZGJndS9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9ub2RlLWZldGNoL2luZGV4LmpzPzkzNDciXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGluc3RydW1lbnQgPSByZXF1aXJlKCcuLi8uLi9vdGVsL2luc3RydW1lbnQuanMnKTtcbmNvbnN0IFNlbnRyeU5vZGVGZXRjaEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vU2VudHJ5Tm9kZUZldGNoSW5zdHJ1bWVudGF0aW9uLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnTm9kZUZldGNoJztcblxuY29uc3QgaW5zdHJ1bWVudFNlbnRyeU5vZGVGZXRjaCA9IGluc3RydW1lbnQuZ2VuZXJhdGVJbnN0cnVtZW50T25jZShcbiAgYCR7SU5URUdSQVRJT05fTkFNRX0uc2VudHJ5YCxcbiAgU2VudHJ5Tm9kZUZldGNoSW5zdHJ1bWVudGF0aW9uLlNlbnRyeU5vZGVGZXRjaEluc3RydW1lbnRhdGlvbixcbiAgKG9wdGlvbnMpID0+IHtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfSxcbik7XG5cbmNvbnN0IF9uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogJ05vZGVGZXRjaCcsXG4gICAgc2V0dXBPbmNlKCkge1xuICAgICAgaW5zdHJ1bWVudFNlbnRyeU5vZGVGZXRjaChvcHRpb25zKTtcbiAgICB9LFxuICB9O1xufSkgO1xuXG5jb25zdCBuYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX25hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uKTtcblxuZXhwb3J0cy5uYXRpdmVOb2RlRmV0Y2hJbnRlZ3JhdGlvbiA9IG5hdGl2ZU5vZGVGZXRjaEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/onuncaughtexception.js":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/onuncaughtexception.js ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/debug-build.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUncaughtException';\n\n/**\n * Add a global exception handler.\n */\nconst onUncaughtExceptionIntegration = core.defineIntegration((options = {}) => {\n  const optionsWithDefaults = {\n    exitEvenIfOtherHandlersAreRegistered: false,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('uncaughtException', makeErrorHandler(client, optionsWithDefaults));\n    },\n  };\n});\n\n/** Exported only for tests */\nfunction makeErrorHandler(client, options) {\n  const timeout = 2000;\n  let caughtFirstError = false;\n  let caughtSecondError = false;\n  let calledFatalError = false;\n  let firstError;\n\n  const clientOptions = client.getOptions();\n\n  return Object.assign(\n    (error) => {\n      let onFatalError = errorhandling.logAndExitProcess;\n\n      if (options.onFatalError) {\n        onFatalError = options.onFatalError;\n      } else if (clientOptions.onFatalError) {\n        onFatalError = clientOptions.onFatalError ;\n      }\n\n      // Attaching a listener to `uncaughtException` will prevent the node process from exiting. We generally do not\n      // want to alter this behaviour so we check for other listeners that users may have attached themselves and adjust\n      // exit behaviour of the SDK accordingly:\n      // - If other listeners are attached, do not exit.\n      // - If the only listener attached is ours, exit.\n      const userProvidedListenersCount = (global.process.listeners('uncaughtException') ).filter(\n        listener => {\n          // There are 3 listeners we ignore:\n          return (\n            // as soon as we're using domains this listener is attached by node itself\n            listener.name !== 'domainUncaughtExceptionClear' &&\n            // the handler we register for tracing\n            listener.tag !== 'sentry_tracingErrorCallback' &&\n            // the handler we register in this integration\n            (listener )._errorHandler !== true\n          );\n        },\n      ).length;\n\n      const processWouldExit = userProvidedListenersCount === 0;\n      const shouldApplyFatalHandlingLogic = options.exitEvenIfOtherHandlersAreRegistered || processWouldExit;\n\n      if (!caughtFirstError) {\n        // this is the first uncaught error and the ultimate reason for shutting down\n        // we want to do absolutely everything possible to ensure it gets captured\n        // also we want to make sure we don't go recursion crazy if more errors happen after this one\n        firstError = error;\n        caughtFirstError = true;\n\n        if (core.getClient() === client) {\n          core.captureException(error, {\n            originalException: error,\n            captureContext: {\n              level: 'fatal',\n            },\n            mechanism: {\n              handled: false,\n              type: 'auto.node.onuncaughtexception',\n            },\n          });\n        }\n\n        if (!calledFatalError && shouldApplyFatalHandlingLogic) {\n          calledFatalError = true;\n          onFatalError(error);\n        }\n      } else {\n        if (shouldApplyFatalHandlingLogic) {\n          if (calledFatalError) {\n            // we hit an error *after* calling onFatalError - pretty boned at this point, just shut it down\n            debugBuild.DEBUG_BUILD &&\n              core.debug.warn(\n                'uncaught exception after calling fatal error shutdown callback - this is bad! forcing shutdown',\n              );\n            errorhandling.logAndExitProcess(error);\n          } else if (!caughtSecondError) {\n            // two cases for how we can hit this branch:\n            //   - capturing of first error blew up and we just caught the exception from that\n            //     - quit trying to capture, proceed with shutdown\n            //   - a second independent error happened while waiting for first error to capture\n            //     - want to avoid causing premature shutdown before first error capture finishes\n            // it's hard to immediately tell case 1 from case 2 without doing some fancy/questionable domain stuff\n            // so let's instead just delay a bit before we proceed with our action here\n            // in case 1, we just wait a bit unnecessarily but ultimately do the same thing\n            // in case 2, the delay hopefully made us wait long enough for the capture to finish\n            // two potential nonideal outcomes:\n            //   nonideal case 1: capturing fails fast, we sit around for a few seconds unnecessarily before proceeding correctly by calling onFatalError\n            //   nonideal case 2: case 2 happens, 1st error is captured but slowly, timeout completes before capture and we treat second error as the sendErr of (nonexistent) failure from trying to capture first error\n            // note that after hitting this branch, we might catch more errors where (caughtSecondError && !calledFatalError)\n            //   we ignore them - they don't matter to us, we're just waiting for the second error timeout to finish\n            caughtSecondError = true;\n            setTimeout(() => {\n              if (!calledFatalError) {\n                // it was probably case 1, let's treat err as the sendErr and call onFatalError\n                calledFatalError = true;\n                onFatalError(firstError, error);\n              }\n            }, timeout); // capturing could take at least sendTimeout to fail, plus an arbitrary second for how long it takes to collect surrounding source etc\n          }\n        }\n      }\n    },\n    { _errorHandler: true },\n  );\n}\n\nexports.makeErrorHandler = makeErrorHandler;\nexports.onUncaughtExceptionIntegration = onUncaughtExceptionIntegration;\n//# sourceMappingURL=onuncaughtexception.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/onuncaughtexception.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/onunhandledrejection.js":
/*!***************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/onunhandledrejection.js ***!
  \***************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst errorhandling = __webpack_require__(/*! ../utils/errorhandling.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/errorhandling.js\");\n\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\n\nconst DEFAULT_IGNORES = [\n  {\n    name: 'AI_NoOutputGeneratedError', // When stream aborts in Vercel AI SDK, Vercel flush() fails with an error\n  },\n];\n\nconst _onUnhandledRejectionIntegration = ((options = {}) => {\n  const opts = {\n    mode: options.mode ?? 'warn',\n    ignore: [...DEFAULT_IGNORES, ...(options.ignore ?? [])],\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, opts));\n    },\n  };\n}) ;\n\nconst onUnhandledRejectionIntegration = core.defineIntegration(_onUnhandledRejectionIntegration);\n\n/** Extract error info safely */\nfunction extractErrorInfo(reason) {\n  // Check if reason is an object (including Error instances, not just plain objects)\n  if (typeof reason !== 'object' || reason === null) {\n    return { name: '', message: String(reason ?? '') };\n  }\n\n  const errorLike = reason ;\n  const name = typeof errorLike.name === 'string' ? errorLike.name : '';\n  const message = typeof errorLike.message === 'string' ? errorLike.message : String(reason);\n\n  return { name, message };\n}\n\n/** Check if a matcher matches the reason */\nfunction isMatchingReason(matcher, errorInfo) {\n  // name/message matcher\n  const nameMatches = matcher.name === undefined || core.isMatchingPattern(errorInfo.name, matcher.name, true);\n\n  const messageMatches = matcher.message === undefined || core.isMatchingPattern(errorInfo.message, matcher.message);\n\n  return nameMatches && messageMatches;\n}\n\n/** Match helper */\nfunction matchesIgnore(list, reason) {\n  const errorInfo = extractErrorInfo(reason);\n  return list.some(matcher => isMatchingReason(matcher, errorInfo));\n}\n\n/** Core handler */\nfunction makeUnhandledPromiseHandler(\n  client,\n  options,\n) {\n  return function sendUnhandledPromise(reason, promise) {\n    // Only handle for the active client\n    if (core.getClient() !== client) {\n      return;\n    }\n\n    // Skip if configured to ignore\n    if (matchesIgnore(options.ignore ?? [], reason)) {\n      return;\n    }\n\n    const level = options.mode === 'strict' ? 'fatal' : 'error';\n\n    // this can be set in places where we cannot reliably get access to the active span/error\n    // when the error bubbles up to this handler, we can use this to set the active span\n    const activeSpanForError =\n      reason && typeof reason === 'object' ? (reason )._sentry_active_span : undefined;\n\n    const activeSpanWrapper = activeSpanForError\n      ? (fn) => core.withActiveSpan(activeSpanForError, fn)\n      : (fn) => fn();\n\n    activeSpanWrapper(() => {\n      core.captureException(reason, {\n        originalException: promise,\n        captureContext: {\n          extra: { unhandledPromiseRejection: true },\n          level,\n        },\n        mechanism: {\n          handled: false,\n          type: 'auto.node.onunhandledrejection',\n        },\n      });\n    });\n\n    handleRejection(reason, options.mode);\n  };\n}\n\n/**\n * Handler for `mode` option\n */\nfunction handleRejection(reason, mode) {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning =\n    'This error originated either by ' +\n    'throwing inside of an async function without a catch block, ' +\n    'or by rejecting a promise which was not handled with .catch().' +\n    ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (mode === 'warn') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      console.error(reason && typeof reason === 'object' && 'stack' in reason ? reason.stack : reason);\n    });\n  } else if (mode === 'strict') {\n    core.consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    errorhandling.logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n\nexports.makeUnhandledPromiseHandler = makeUnhandledPromiseHandler;\nexports.onUnhandledRejectionIntegration = onUnhandledRejectionIntegration;\n//# sourceMappingURL=onunhandledrejection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvb251bmhhbmRsZWRyZWplY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLHNCQUFzQixtQkFBTyxDQUFDLGlRQUEyQjs7QUFFekQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBOztBQUVBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlDQUFpQztBQUNwRDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUNBQW1DO0FBQ25DLHVDQUF1QztBQUN2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzPzE3YjYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGVycm9yaGFuZGxpbmcgPSByZXF1aXJlKCcuLi91dGlscy9lcnJvcmhhbmRsaW5nLmpzJyk7XG5cbmNvbnN0IElOVEVHUkFUSU9OX05BTUUgPSAnT25VbmhhbmRsZWRSZWplY3Rpb24nO1xuXG5jb25zdCBERUZBVUxUX0lHTk9SRVMgPSBbXG4gIHtcbiAgICBuYW1lOiAnQUlfTm9PdXRwdXRHZW5lcmF0ZWRFcnJvcicsIC8vIFdoZW4gc3RyZWFtIGFib3J0cyBpbiBWZXJjZWwgQUkgU0RLLCBWZXJjZWwgZmx1c2goKSBmYWlscyB3aXRoIGFuIGVycm9yXG4gIH0sXG5dO1xuXG5jb25zdCBfb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IG9wdHMgPSB7XG4gICAgbW9kZTogb3B0aW9ucy5tb2RlID8/ICd3YXJuJyxcbiAgICBpZ25vcmU6IFsuLi5ERUZBVUxUX0lHTk9SRVMsIC4uLihvcHRpb25zLmlnbm9yZSA/PyBbXSldLFxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBzZXR1cChjbGllbnQpIHtcbiAgICAgIGdsb2JhbC5wcm9jZXNzLm9uKCd1bmhhbmRsZWRSZWplY3Rpb24nLCBtYWtlVW5oYW5kbGVkUHJvbWlzZUhhbmRsZXIoY2xpZW50LCBvcHRzKSk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuY29uc3Qgb25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbiA9IGNvcmUuZGVmaW5lSW50ZWdyYXRpb24oX29uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb24pO1xuXG4vKiogRXh0cmFjdCBlcnJvciBpbmZvIHNhZmVseSAqL1xuZnVuY3Rpb24gZXh0cmFjdEVycm9ySW5mbyhyZWFzb24pIHtcbiAgLy8gQ2hlY2sgaWYgcmVhc29uIGlzIGFuIG9iamVjdCAoaW5jbHVkaW5nIEVycm9yIGluc3RhbmNlcywgbm90IGp1c3QgcGxhaW4gb2JqZWN0cylcbiAgaWYgKHR5cGVvZiByZWFzb24gIT09ICdvYmplY3QnIHx8IHJlYXNvbiA9PT0gbnVsbCkge1xuICAgIHJldHVybiB7IG5hbWU6ICcnLCBtZXNzYWdlOiBTdHJpbmcocmVhc29uID8/ICcnKSB9O1xuICB9XG5cbiAgY29uc3QgZXJyb3JMaWtlID0gcmVhc29uIDtcbiAgY29uc3QgbmFtZSA9IHR5cGVvZiBlcnJvckxpa2UubmFtZSA9PT0gJ3N0cmluZycgPyBlcnJvckxpa2UubmFtZSA6ICcnO1xuICBjb25zdCBtZXNzYWdlID0gdHlwZW9mIGVycm9yTGlrZS5tZXNzYWdlID09PSAnc3RyaW5nJyA/IGVycm9yTGlrZS5tZXNzYWdlIDogU3RyaW5nKHJlYXNvbik7XG5cbiAgcmV0dXJuIHsgbmFtZSwgbWVzc2FnZSB9O1xufVxuXG4vKiogQ2hlY2sgaWYgYSBtYXRjaGVyIG1hdGNoZXMgdGhlIHJlYXNvbiAqL1xuZnVuY3Rpb24gaXNNYXRjaGluZ1JlYXNvbihtYXRjaGVyLCBlcnJvckluZm8pIHtcbiAgLy8gbmFtZS9tZXNzYWdlIG1hdGNoZXJcbiAgY29uc3QgbmFtZU1hdGNoZXMgPSBtYXRjaGVyLm5hbWUgPT09IHVuZGVmaW5lZCB8fCBjb3JlLmlzTWF0Y2hpbmdQYXR0ZXJuKGVycm9ySW5mby5uYW1lLCBtYXRjaGVyLm5hbWUsIHRydWUpO1xuXG4gIGNvbnN0IG1lc3NhZ2VNYXRjaGVzID0gbWF0Y2hlci5tZXNzYWdlID09PSB1bmRlZmluZWQgfHwgY29yZS5pc01hdGNoaW5nUGF0dGVybihlcnJvckluZm8ubWVzc2FnZSwgbWF0Y2hlci5tZXNzYWdlKTtcblxuICByZXR1cm4gbmFtZU1hdGNoZXMgJiYgbWVzc2FnZU1hdGNoZXM7XG59XG5cbi8qKiBNYXRjaCBoZWxwZXIgKi9cbmZ1bmN0aW9uIG1hdGNoZXNJZ25vcmUobGlzdCwgcmVhc29uKSB7XG4gIGNvbnN0IGVycm9ySW5mbyA9IGV4dHJhY3RFcnJvckluZm8ocmVhc29uKTtcbiAgcmV0dXJuIGxpc3Quc29tZShtYXRjaGVyID0+IGlzTWF0Y2hpbmdSZWFzb24obWF0Y2hlciwgZXJyb3JJbmZvKSk7XG59XG5cbi8qKiBDb3JlIGhhbmRsZXIgKi9cbmZ1bmN0aW9uIG1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlcihcbiAgY2xpZW50LFxuICBvcHRpb25zLFxuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBzZW5kVW5oYW5kbGVkUHJvbWlzZShyZWFzb24sIHByb21pc2UpIHtcbiAgICAvLyBPbmx5IGhhbmRsZSBmb3IgdGhlIGFjdGl2ZSBjbGllbnRcbiAgICBpZiAoY29yZS5nZXRDbGllbnQoKSAhPT0gY2xpZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2tpcCBpZiBjb25maWd1cmVkIHRvIGlnbm9yZVxuICAgIGlmIChtYXRjaGVzSWdub3JlKG9wdGlvbnMuaWdub3JlID8/IFtdLCByZWFzb24pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbGV2ZWwgPSBvcHRpb25zLm1vZGUgPT09ICdzdHJpY3QnID8gJ2ZhdGFsJyA6ICdlcnJvcic7XG5cbiAgICAvLyB0aGlzIGNhbiBiZSBzZXQgaW4gcGxhY2VzIHdoZXJlIHdlIGNhbm5vdCByZWxpYWJseSBnZXQgYWNjZXNzIHRvIHRoZSBhY3RpdmUgc3Bhbi9lcnJvclxuICAgIC8vIHdoZW4gdGhlIGVycm9yIGJ1YmJsZXMgdXAgdG8gdGhpcyBoYW5kbGVyLCB3ZSBjYW4gdXNlIHRoaXMgdG8gc2V0IHRoZSBhY3RpdmUgc3BhblxuICAgIGNvbnN0IGFjdGl2ZVNwYW5Gb3JFcnJvciA9XG4gICAgICByZWFzb24gJiYgdHlwZW9mIHJlYXNvbiA9PT0gJ29iamVjdCcgPyAocmVhc29uICkuX3NlbnRyeV9hY3RpdmVfc3BhbiA6IHVuZGVmaW5lZDtcblxuICAgIGNvbnN0IGFjdGl2ZVNwYW5XcmFwcGVyID0gYWN0aXZlU3BhbkZvckVycm9yXG4gICAgICA/IChmbikgPT4gY29yZS53aXRoQWN0aXZlU3BhbihhY3RpdmVTcGFuRm9yRXJyb3IsIGZuKVxuICAgICAgOiAoZm4pID0+IGZuKCk7XG5cbiAgICBhY3RpdmVTcGFuV3JhcHBlcigoKSA9PiB7XG4gICAgICBjb3JlLmNhcHR1cmVFeGNlcHRpb24ocmVhc29uLCB7XG4gICAgICAgIG9yaWdpbmFsRXhjZXB0aW9uOiBwcm9taXNlLFxuICAgICAgICBjYXB0dXJlQ29udGV4dDoge1xuICAgICAgICAgIGV4dHJhOiB7IHVuaGFuZGxlZFByb21pc2VSZWplY3Rpb246IHRydWUgfSxcbiAgICAgICAgICBsZXZlbCxcbiAgICAgICAgfSxcbiAgICAgICAgbWVjaGFuaXNtOiB7XG4gICAgICAgICAgaGFuZGxlZDogZmFsc2UsXG4gICAgICAgICAgdHlwZTogJ2F1dG8ubm9kZS5vbnVuaGFuZGxlZHJlamVjdGlvbicsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGhhbmRsZVJlamVjdGlvbihyZWFzb24sIG9wdGlvbnMubW9kZSk7XG4gIH07XG59XG5cbi8qKlxuICogSGFuZGxlciBmb3IgYG1vZGVgIG9wdGlvblxuICovXG5mdW5jdGlvbiBoYW5kbGVSZWplY3Rpb24ocmVhc29uLCBtb2RlKSB7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9ibG9iLzdjZjZmOWU5NjRhYTAwNzcyOTY1MzkxYzIzYWNkYTZkNzE5NzJhOWEvbGliL2ludGVybmFsL3Byb2Nlc3MvcHJvbWlzZXMuanMjTDIzNC1MMjQwXG4gIGNvbnN0IHJlamVjdGlvbldhcm5pbmcgPVxuICAgICdUaGlzIGVycm9yIG9yaWdpbmF0ZWQgZWl0aGVyIGJ5ICcgK1xuICAgICd0aHJvd2luZyBpbnNpZGUgb2YgYW4gYXN5bmMgZnVuY3Rpb24gd2l0aG91dCBhIGNhdGNoIGJsb2NrLCAnICtcbiAgICAnb3IgYnkgcmVqZWN0aW5nIGEgcHJvbWlzZSB3aGljaCB3YXMgbm90IGhhbmRsZWQgd2l0aCAuY2F0Y2goKS4nICtcbiAgICAnIFRoZSBwcm9taXNlIHJlamVjdGVkIHdpdGggdGhlIHJlYXNvbjonO1xuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKG1vZGUgPT09ICd3YXJuJykge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgY29uc29sZS53YXJuKHJlamVjdGlvbldhcm5pbmcpO1xuICAgICAgY29uc29sZS5lcnJvcihyZWFzb24gJiYgdHlwZW9mIHJlYXNvbiA9PT0gJ29iamVjdCcgJiYgJ3N0YWNrJyBpbiByZWFzb24gPyByZWFzb24uc3RhY2sgOiByZWFzb24pO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKG1vZGUgPT09ICdzdHJpY3QnKSB7XG4gICAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgICBjb25zb2xlLndhcm4ocmVqZWN0aW9uV2FybmluZyk7XG4gICAgfSk7XG4gICAgZXJyb3JoYW5kbGluZy5sb2dBbmRFeGl0UHJvY2VzcyhyZWFzb24pO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xufVxuXG5leHBvcnRzLm1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlciA9IG1ha2VVbmhhbmRsZWRQcm9taXNlSGFuZGxlcjtcbmV4cG9ydHMub25VbmhhbmRsZWRSZWplY3Rpb25JbnRlZ3JhdGlvbiA9IG9uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbnVuaGFuZGxlZHJlamVjdGlvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/onunhandledrejection.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/pino.js":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/pino.js ***!
  \***********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst diagnosticsChannel = __webpack_require__(/*! node:diagnostics_channel */ \"node:diagnostics_channel\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst injectLoader = __webpack_require__(/*! ../sdk/injectLoader.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/injectLoader.js\");\n\nconst DEFAULT_OPTIONS = {\n  error: { levels: [], handled: true },\n  log: { levels: ['trace', 'debug', 'info', 'warn', 'error', 'fatal'] },\n};\n\n/**\n * Integration for Pino logging library.\n * Captures Pino logs as Sentry logs and optionally captures some log levels as events.\n *\n * Requires Pino >=v8.0.0 and Node >=20.6.0 or >=18.19.0\n */\nconst pinoIntegration = core.defineIntegration((userOptions = {}) => {\n  const options = {\n    error: { ...DEFAULT_OPTIONS.error, ...userOptions.error },\n    log: { ...DEFAULT_OPTIONS.log, ...userOptions.log },\n  };\n\n  return {\n    name: 'Pino',\n    setup: client => {\n      const enableLogs = !!client.getOptions().enableLogs;\n\n      injectLoader.addInstrumentationConfig({\n        channelName: 'pino-log',\n        // From Pino v9.10.0 a tracing channel is available directly from Pino:\n        // https://github.com/pinojs/pino/pull/2281\n        module: { name: 'pino', versionRange: '>=8.0.0 < 9.10.0', filePath: 'lib/tools.js' },\n        functionQuery: {\n          functionName: 'asJson',\n          kind: 'Sync',\n        },\n      });\n\n      const injectedChannel = diagnosticsChannel.tracingChannel('orchestrion:pino:pino-log');\n      const integratedChannel = diagnosticsChannel.tracingChannel('pino_asJson');\n\n      function onPinoStart(self, args) {\n        const [obj, message, levelNumber] = args;\n        const level = self?.levels?.labels?.[levelNumber] || 'info';\n\n        const attributes = {\n          ...obj,\n          'sentry.origin': 'auto.logging.pino',\n          'sentry.pino.level': levelNumber,\n        };\n\n        if (enableLogs && options.log.levels.includes(level)) {\n          core._INTERNAL_captureLog({ level, message, attributes });\n        }\n\n        if (options.error.levels.includes(level)) {\n          const captureContext = {\n            level: core.severityLevelFromString(level),\n          };\n\n          core.withScope(scope => {\n            scope.addEventProcessor(event => {\n              event.logger = 'pino';\n\n              core.addExceptionMechanism(event, {\n                handled: options.error.handled,\n                type: 'pino',\n              });\n\n              return event;\n            });\n\n            if (obj.err) {\n              core.captureException(obj.err, captureContext);\n              return;\n            }\n\n            core.captureMessage(message, captureContext);\n          });\n        }\n      }\n\n      injectedChannel.start.subscribe(data => {\n        const { self, arguments: args } = data ;\n        onPinoStart(self, args);\n      });\n\n      integratedChannel.start.subscribe(data => {\n        const { instance, arguments: args } = data ;\n        onPinoStart(instance, args);\n      });\n    },\n  };\n}) ;\n\nexports.pinoIntegration = pinoIntegration;\n//# sourceMappingURL=pino.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvcGluby5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSwyQkFBMkIsbUJBQU8sQ0FBQywwREFBMEI7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLHFCQUFxQixtQkFBTyxDQUFDLDJQQUF3Qjs7QUFFckQ7QUFDQSxXQUFXLDJCQUEyQjtBQUN0QyxTQUFTLDhEQUE4RDtBQUN2RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQSxhQUFhLGdEQUFnRDtBQUM3RCxXQUFXLDRDQUE0QztBQUN2RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwRUFBMEU7QUFDNUY7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNDQUFzQyw0QkFBNEI7QUFDbEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7O0FBRWY7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0Isd0JBQXdCO0FBQ3hDO0FBQ0EsT0FBTzs7QUFFUDtBQUNBLGdCQUFnQiw0QkFBNEI7QUFDNUM7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRCx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZS1jb3JlQDEwLjE5LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wX0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYXN5bmMtaG9va3NAMi4xLjBfQF8yZ2RocjZrdmRwd2huamRpb3lta2I0ZGJndS9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9waW5vLmpzPzgyYzkiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGRpYWdub3N0aWNzQ2hhbm5lbCA9IHJlcXVpcmUoJ25vZGU6ZGlhZ25vc3RpY3NfY2hhbm5lbCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgaW5qZWN0TG9hZGVyID0gcmVxdWlyZSgnLi4vc2RrL2luamVjdExvYWRlci5qcycpO1xuXG5jb25zdCBERUZBVUxUX09QVElPTlMgPSB7XG4gIGVycm9yOiB7IGxldmVsczogW10sIGhhbmRsZWQ6IHRydWUgfSxcbiAgbG9nOiB7IGxldmVsczogWyd0cmFjZScsICdkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InLCAnZmF0YWwnXSB9LFxufTtcblxuLyoqXG4gKiBJbnRlZ3JhdGlvbiBmb3IgUGlubyBsb2dnaW5nIGxpYnJhcnkuXG4gKiBDYXB0dXJlcyBQaW5vIGxvZ3MgYXMgU2VudHJ5IGxvZ3MgYW5kIG9wdGlvbmFsbHkgY2FwdHVyZXMgc29tZSBsb2cgbGV2ZWxzIGFzIGV2ZW50cy5cbiAqXG4gKiBSZXF1aXJlcyBQaW5vID49djguMC4wIGFuZCBOb2RlID49MjAuNi4wIG9yID49MTguMTkuMFxuICovXG5jb25zdCBwaW5vSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKCh1c2VyT3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgZXJyb3I6IHsgLi4uREVGQVVMVF9PUFRJT05TLmVycm9yLCAuLi51c2VyT3B0aW9ucy5lcnJvciB9LFxuICAgIGxvZzogeyAuLi5ERUZBVUxUX09QVElPTlMubG9nLCAuLi51c2VyT3B0aW9ucy5sb2cgfSxcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICdQaW5vJyxcbiAgICBzZXR1cDogY2xpZW50ID0+IHtcbiAgICAgIGNvbnN0IGVuYWJsZUxvZ3MgPSAhIWNsaWVudC5nZXRPcHRpb25zKCkuZW5hYmxlTG9ncztcblxuICAgICAgaW5qZWN0TG9hZGVyLmFkZEluc3RydW1lbnRhdGlvbkNvbmZpZyh7XG4gICAgICAgIGNoYW5uZWxOYW1lOiAncGluby1sb2cnLFxuICAgICAgICAvLyBGcm9tIFBpbm8gdjkuMTAuMCBhIHRyYWNpbmcgY2hhbm5lbCBpcyBhdmFpbGFibGUgZGlyZWN0bHkgZnJvbSBQaW5vOlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcGlub2pzL3Bpbm8vcHVsbC8yMjgxXG4gICAgICAgIG1vZHVsZTogeyBuYW1lOiAncGlubycsIHZlcnNpb25SYW5nZTogJz49OC4wLjAgPCA5LjEwLjAnLCBmaWxlUGF0aDogJ2xpYi90b29scy5qcycgfSxcbiAgICAgICAgZnVuY3Rpb25RdWVyeToge1xuICAgICAgICAgIGZ1bmN0aW9uTmFtZTogJ2FzSnNvbicsXG4gICAgICAgICAga2luZDogJ1N5bmMnLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGluamVjdGVkQ2hhbm5lbCA9IGRpYWdub3N0aWNzQ2hhbm5lbC50cmFjaW5nQ2hhbm5lbCgnb3JjaGVzdHJpb246cGlubzpwaW5vLWxvZycpO1xuICAgICAgY29uc3QgaW50ZWdyYXRlZENoYW5uZWwgPSBkaWFnbm9zdGljc0NoYW5uZWwudHJhY2luZ0NoYW5uZWwoJ3Bpbm9fYXNKc29uJyk7XG5cbiAgICAgIGZ1bmN0aW9uIG9uUGlub1N0YXJ0KHNlbGYsIGFyZ3MpIHtcbiAgICAgICAgY29uc3QgW29iaiwgbWVzc2FnZSwgbGV2ZWxOdW1iZXJdID0gYXJncztcbiAgICAgICAgY29uc3QgbGV2ZWwgPSBzZWxmPy5sZXZlbHM/LmxhYmVscz8uW2xldmVsTnVtYmVyXSB8fCAnaW5mbyc7XG5cbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHtcbiAgICAgICAgICAuLi5vYmosXG4gICAgICAgICAgJ3NlbnRyeS5vcmlnaW4nOiAnYXV0by5sb2dnaW5nLnBpbm8nLFxuICAgICAgICAgICdzZW50cnkucGluby5sZXZlbCc6IGxldmVsTnVtYmVyLFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChlbmFibGVMb2dzICYmIG9wdGlvbnMubG9nLmxldmVscy5pbmNsdWRlcyhsZXZlbCkpIHtcbiAgICAgICAgICBjb3JlLl9JTlRFUk5BTF9jYXB0dXJlTG9nKHsgbGV2ZWwsIG1lc3NhZ2UsIGF0dHJpYnV0ZXMgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5lcnJvci5sZXZlbHMuaW5jbHVkZXMobGV2ZWwpKSB7XG4gICAgICAgICAgY29uc3QgY2FwdHVyZUNvbnRleHQgPSB7XG4gICAgICAgICAgICBsZXZlbDogY29yZS5zZXZlcml0eUxldmVsRnJvbVN0cmluZyhsZXZlbCksXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGNvcmUud2l0aFNjb3BlKHNjb3BlID0+IHtcbiAgICAgICAgICAgIHNjb3BlLmFkZEV2ZW50UHJvY2Vzc29yKGV2ZW50ID0+IHtcbiAgICAgICAgICAgICAgZXZlbnQubG9nZ2VyID0gJ3Bpbm8nO1xuXG4gICAgICAgICAgICAgIGNvcmUuYWRkRXhjZXB0aW9uTWVjaGFuaXNtKGV2ZW50LCB7XG4gICAgICAgICAgICAgICAgaGFuZGxlZDogb3B0aW9ucy5lcnJvci5oYW5kbGVkLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdwaW5vJyxcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChvYmouZXJyKSB7XG4gICAgICAgICAgICAgIGNvcmUuY2FwdHVyZUV4Y2VwdGlvbihvYmouZXJyLCBjYXB0dXJlQ29udGV4dCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29yZS5jYXB0dXJlTWVzc2FnZShtZXNzYWdlLCBjYXB0dXJlQ29udGV4dCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaW5qZWN0ZWRDaGFubmVsLnN0YXJ0LnN1YnNjcmliZShkYXRhID0+IHtcbiAgICAgICAgY29uc3QgeyBzZWxmLCBhcmd1bWVudHM6IGFyZ3MgfSA9IGRhdGEgO1xuICAgICAgICBvblBpbm9TdGFydChzZWxmLCBhcmdzKTtcbiAgICAgIH0pO1xuXG4gICAgICBpbnRlZ3JhdGVkQ2hhbm5lbC5zdGFydC5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICAgIGNvbnN0IHsgaW5zdGFuY2UsIGFyZ3VtZW50czogYXJncyB9ID0gZGF0YSA7XG4gICAgICAgIG9uUGlub1N0YXJ0KGluc3RhbmNlLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KSA7XG5cbmV4cG9ydHMucGlub0ludGVncmF0aW9uID0gcGlub0ludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGluby5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/pino.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/processSession.js":
/*!*********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/processSession.js ***!
  \*********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'ProcessSession';\n\n/**\n * Records a Session for the current process to track release health.\n */\nconst processSessionIntegration = core.defineIntegration(() => {\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      core.startSession();\n\n      // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n      // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n      // such as calling process.exit() or uncaught exceptions.\n      // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n      process.on('beforeExit', () => {\n        const session = core.getIsolationScope().getSession();\n\n        // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n        // Terminal Status i.e. Exited or Crashed because\n        // \"When a session is moved away from ok it must not be updated anymore.\"\n        // Ref: https://develop.sentry.dev/sdk/sessions/\n        if (session?.status !== 'ok') {\n          core.endSession();\n        }\n      });\n    },\n  };\n});\n\nexports.processSessionIntegration = processSessionIntegration;\n//# sourceMappingURL=processSession.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvcHJvY2Vzc1Nlc3Npb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjOztBQUVuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVELGlDQUFpQztBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3Byb2Nlc3NTZXNzaW9uLmpzPzZlZmQiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdQcm9jZXNzU2Vzc2lvbic7XG5cbi8qKlxuICogUmVjb3JkcyBhIFNlc3Npb24gZm9yIHRoZSBjdXJyZW50IHByb2Nlc3MgdG8gdHJhY2sgcmVsZWFzZSBoZWFsdGguXG4gKi9cbmNvbnN0IHByb2Nlc3NTZXNzaW9uSW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKCgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwT25jZSgpIHtcbiAgICAgIGNvcmUuc3RhcnRTZXNzaW9uKCk7XG5cbiAgICAgIC8vIEVtaXR0ZWQgaW4gdGhlIGNhc2Ugb2YgaGVhbHRoeSBzZXNzaW9ucywgZXJyb3Igb2YgYG1lY2hhbmlzbS5oYW5kbGVkOiB0cnVlYCBhbmQgdW5oYW5kbGVkcmVqZWN0aW9ucyBiZWNhdXNlXG4gICAgICAvLyBUaGUgJ2JlZm9yZUV4aXQnIGV2ZW50IGlzIG5vdCBlbWl0dGVkIGZvciBjb25kaXRpb25zIGNhdXNpbmcgZXhwbGljaXQgdGVybWluYXRpb24sXG4gICAgICAvLyBzdWNoIGFzIGNhbGxpbmcgcHJvY2Vzcy5leGl0KCkgb3IgdW5jYXVnaHQgZXhjZXB0aW9ucy5cbiAgICAgIC8vIFJlZjogaHR0cHM6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc19ldmVudF9iZWZvcmVleGl0XG4gICAgICBwcm9jZXNzLm9uKCdiZWZvcmVFeGl0JywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzZXNzaW9uID0gY29yZS5nZXRJc29sYXRpb25TY29wZSgpLmdldFNlc3Npb24oKTtcblxuICAgICAgICAvLyBPbmx5IGNhbGwgZW5kU2Vzc2lvbiwgaWYgdGhlIFNlc3Npb24gZXhpc3RzIG9uIFNjb3BlIGFuZCBTZXNzaW9uU3RhdHVzIGlzIG5vdCBhXG4gICAgICAgIC8vIFRlcm1pbmFsIFN0YXR1cyBpLmUuIEV4aXRlZCBvciBDcmFzaGVkIGJlY2F1c2VcbiAgICAgICAgLy8gXCJXaGVuIGEgc2Vzc2lvbiBpcyBtb3ZlZCBhd2F5IGZyb20gb2sgaXQgbXVzdCBub3QgYmUgdXBkYXRlZCBhbnltb3JlLlwiXG4gICAgICAgIC8vIFJlZjogaHR0cHM6Ly9kZXZlbG9wLnNlbnRyeS5kZXYvc2RrL3Nlc3Npb25zL1xuICAgICAgICBpZiAoc2Vzc2lvbj8uc3RhdHVzICE9PSAnb2snKSB7XG4gICAgICAgICAgY29yZS5lbmRTZXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG59KTtcblxuZXhwb3J0cy5wcm9jZXNzU2Vzc2lvbkludGVncmF0aW9uID0gcHJvY2Vzc1Nlc3Npb25JbnRlZ3JhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3NTZXNzaW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/processSession.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/spotlight.js":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/spotlight.js ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'Spotlight';\n\nconst _spotlightIntegration = ((options = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream',\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      try {\n        if (false) {}\n      } catch {\n        // ignore\n      }\n      connectToSpotlight(client, _options);\n    },\n  };\n}) ;\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer.\n */\nconst spotlightIntegration = core.defineIntegration(_spotlightIntegration);\n\nfunction connectToSpotlight(client, options) {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n\n  let failedRequests = 0;\n\n  client.on('beforeEnvelope', (envelope) => {\n    if (failedRequests > 3) {\n      core.debug.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n\n    const serializedEnvelope = core.serializeEnvelope(envelope);\n    core.suppressTracing(() => {\n      const req = http.request(\n        {\n          method: 'POST',\n          path: spotlightUrl.pathname,\n          hostname: spotlightUrl.hostname,\n          port: spotlightUrl.port,\n          headers: {\n            'Content-Type': 'application/x-sentry-envelope',\n          },\n        },\n        res => {\n          if (res.statusCode && res.statusCode >= 200 && res.statusCode < 400) {\n            // Reset failed requests counter on success\n            failedRequests = 0;\n          }\n          res.on('data', () => {\n            // Drain socket\n          });\n\n          res.on('end', () => {\n            // Drain socket\n          });\n          res.setEncoding('utf8');\n        },\n      );\n\n      req.on('error', () => {\n        failedRequests++;\n        core.debug.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n      });\n      req.write(serializedEnvelope);\n      req.end();\n    });\n  });\n}\n\nfunction parseSidecarUrl(url) {\n  try {\n    return new URL(`${url}`);\n  } catch {\n    core.debug.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n\nexports.INTEGRATION_NAME = INTEGRATION_NAME;\nexports.spotlightIntegration = spotlightIntegration;\n//# sourceMappingURL=spotlight.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvc3BvdGxpZ2h0LmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxhQUFhLG1CQUFPLENBQUMsNkhBQWM7O0FBRW5DOztBQUVBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLEtBQThELEVBQUUsRUFFbkU7QUFDVCxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQSxzQkFBc0IsSUFBSTtBQUMxQixJQUFJO0FBQ0osd0RBQXdELElBQUk7QUFDNUQ7QUFDQTtBQUNBOztBQUVBLHdCQUF3QjtBQUN4Qiw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZS1jb3JlQDEwLjE5LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wX0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYXN5bmMtaG9va3NAMi4xLjBfQF8yZ2RocjZrdmRwd2huamRpb3lta2I0ZGJndS9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL2ludGVncmF0aW9ucy9zcG90bGlnaHQuanM/YzBhNSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ25vZGU6aHR0cCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBJTlRFR1JBVElPTl9OQU1FID0gJ1Nwb3RsaWdodCc7XG5cbmNvbnN0IF9zcG90bGlnaHRJbnRlZ3JhdGlvbiA9ICgob3B0aW9ucyA9IHt9KSA9PiB7XG4gIGNvbnN0IF9vcHRpb25zID0ge1xuICAgIHNpZGVjYXJVcmw6IG9wdGlvbnMuc2lkZWNhclVybCB8fCAnaHR0cDovL2xvY2FsaG9zdDo4OTY5L3N0cmVhbScsXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBJTlRFR1JBVElPTl9OQU1FLFxuICAgIHNldHVwKGNsaWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgICAgY29yZS5kZWJ1Zy53YXJuKFwiW1Nwb3RsaWdodF0gSXQgc2VlbXMgeW91J3JlIG5vdCBpbiBkZXYgbW9kZS4gRG8geW91IHJlYWxseSB3YW50IHRvIGhhdmUgU3BvdGxpZ2h0IGVuYWJsZWQ/XCIpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIHtcbiAgICAgICAgLy8gaWdub3JlXG4gICAgICB9XG4gICAgICBjb25uZWN0VG9TcG90bGlnaHQoY2xpZW50LCBfb3B0aW9ucyk7XG4gICAgfSxcbiAgfTtcbn0pIDtcblxuLyoqXG4gKiBVc2UgdGhpcyBpbnRlZ3JhdGlvbiB0byBzZW5kIGVycm9ycyBhbmQgdHJhbnNhY3Rpb25zIHRvIFNwb3RsaWdodC5cbiAqXG4gKiBMZWFybiBtb3JlIGFib3V0IHNwb3RsaWdodCBhdCBodHRwczovL3Nwb3RsaWdodGpzLmNvbVxuICpcbiAqIEltcG9ydGFudDogVGhpcyBpbnRlZ3JhdGlvbiBvbmx5IHdvcmtzIHdpdGggTm9kZSAxOCBvciBuZXdlci5cbiAqL1xuY29uc3Qgc3BvdGxpZ2h0SW50ZWdyYXRpb24gPSBjb3JlLmRlZmluZUludGVncmF0aW9uKF9zcG90bGlnaHRJbnRlZ3JhdGlvbik7XG5cbmZ1bmN0aW9uIGNvbm5lY3RUb1Nwb3RsaWdodChjbGllbnQsIG9wdGlvbnMpIHtcbiAgY29uc3Qgc3BvdGxpZ2h0VXJsID0gcGFyc2VTaWRlY2FyVXJsKG9wdGlvbnMuc2lkZWNhclVybCk7XG4gIGlmICghc3BvdGxpZ2h0VXJsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGZhaWxlZFJlcXVlc3RzID0gMDtcblxuICBjbGllbnQub24oJ2JlZm9yZUVudmVsb3BlJywgKGVudmVsb3BlKSA9PiB7XG4gICAgaWYgKGZhaWxlZFJlcXVlc3RzID4gMykge1xuICAgICAgY29yZS5kZWJ1Zy53YXJuKCdbU3BvdGxpZ2h0XSBEaXNhYmxlZCBTZW50cnkgLT4gU3BvdGxpZ2h0IGludGVncmF0aW9uIGR1ZSB0byB0b28gbWFueSBmYWlsZWQgcmVxdWVzdHMnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBzZXJpYWxpemVkRW52ZWxvcGUgPSBjb3JlLnNlcmlhbGl6ZUVudmVsb3BlKGVudmVsb3BlKTtcbiAgICBjb3JlLnN1cHByZXNzVHJhY2luZygoKSA9PiB7XG4gICAgICBjb25zdCByZXEgPSBodHRwLnJlcXVlc3QoXG4gICAgICAgIHtcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBwYXRoOiBzcG90bGlnaHRVcmwucGF0aG5hbWUsXG4gICAgICAgICAgaG9zdG5hbWU6IHNwb3RsaWdodFVybC5ob3N0bmFtZSxcbiAgICAgICAgICBwb3J0OiBzcG90bGlnaHRVcmwucG9ydCxcbiAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtc2VudHJ5LWVudmVsb3BlJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICByZXMgPT4ge1xuICAgICAgICAgIGlmIChyZXMuc3RhdHVzQ29kZSAmJiByZXMuc3RhdHVzQ29kZSA+PSAyMDAgJiYgcmVzLnN0YXR1c0NvZGUgPCA0MDApIHtcbiAgICAgICAgICAgIC8vIFJlc2V0IGZhaWxlZCByZXF1ZXN0cyBjb3VudGVyIG9uIHN1Y2Nlc3NcbiAgICAgICAgICAgIGZhaWxlZFJlcXVlc3RzID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzLm9uKCdkYXRhJywgKCkgPT4ge1xuICAgICAgICAgICAgLy8gRHJhaW4gc29ja2V0XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgIC8vIERyYWluIHNvY2tldFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlcy5zZXRFbmNvZGluZygndXRmOCcpO1xuICAgICAgICB9LFxuICAgICAgKTtcblxuICAgICAgcmVxLm9uKCdlcnJvcicsICgpID0+IHtcbiAgICAgICAgZmFpbGVkUmVxdWVzdHMrKztcbiAgICAgICAgY29yZS5kZWJ1Zy53YXJuKCdbU3BvdGxpZ2h0XSBGYWlsZWQgdG8gc2VuZCBlbnZlbG9wZSB0byBTcG90bGlnaHQgU2lkZWNhcicpO1xuICAgICAgfSk7XG4gICAgICByZXEud3JpdGUoc2VyaWFsaXplZEVudmVsb3BlKTtcbiAgICAgIHJlcS5lbmQoKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2lkZWNhclVybCh1cmwpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFVSTChgJHt1cmx9YCk7XG4gIH0gY2F0Y2gge1xuICAgIGNvcmUuZGVidWcud2FybihgW1Nwb3RsaWdodF0gSW52YWxpZCBzaWRlY2FyIFVSTDogJHt1cmx9YCk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5leHBvcnRzLklOVEVHUkFUSU9OX05BTUUgPSBJTlRFR1JBVElPTl9OQU1FO1xuZXhwb3J0cy5zcG90bGlnaHRJbnRlZ3JhdGlvbiA9IHNwb3RsaWdodEludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BvdGxpZ2h0LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/spotlight.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/systemError.js":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/systemError.js ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst INTEGRATION_NAME = 'NodeSystemError';\n\nfunction isSystemError(error) {\n  if (!(error instanceof Error)) {\n    return false;\n  }\n\n  if (!('errno' in error) || typeof error.errno !== 'number') {\n    return false;\n  }\n\n  // Appears this is the recommended way to check for Node.js SystemError\n  // https://github.com/nodejs/node/issues/46869\n  return util.getSystemErrorMap().has(error.errno);\n}\n\n/**\n * Captures context for Node.js SystemError errors.\n */\nconst systemErrorIntegration = core.defineIntegration((options = {}) => {\n  return {\n    name: INTEGRATION_NAME,\n    processEvent: (event, hint, client) => {\n      if (!isSystemError(hint.originalException)) {\n        return event;\n      }\n\n      const error = hint.originalException;\n\n      const errorContext = {\n        ...error,\n      };\n\n      if (!client.getOptions().sendDefaultPii && options.includePaths !== true) {\n        delete errorContext.path;\n        delete errorContext.dest;\n      }\n\n      event.contexts = {\n        ...event.contexts,\n        node_system_error: errorContext,\n      };\n\n      for (const exception of event.exception?.values || []) {\n        if (exception.value) {\n          if (error.path && exception.value.includes(error.path)) {\n            exception.value = exception.value.replace(`'${error.path}'`, '').trim();\n          }\n          if (error.dest && exception.value.includes(error.dest)) {\n            exception.value = exception.value.replace(`'${error.dest}'`, '').trim();\n          }\n        }\n      }\n\n      return event;\n    },\n  };\n});\n\nexports.systemErrorIntegration = systemErrorIntegration;\n//# sourceMappingURL=systemError.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvc3lzdGVtRXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDRCQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYzs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRTtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxXQUFXO0FBQ3JFO0FBQ0E7QUFDQSwwREFBMEQsV0FBVztBQUNyRTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQSxDQUFDOztBQUVELDhCQUE4QjtBQUM5QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvaW50ZWdyYXRpb25zL3N5c3RlbUVycm9yLmpzPzA2MTUiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCdub2RlOnV0aWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuY29uc3QgSU5URUdSQVRJT05fTkFNRSA9ICdOb2RlU3lzdGVtRXJyb3InO1xuXG5mdW5jdGlvbiBpc1N5c3RlbUVycm9yKGVycm9yKSB7XG4gIGlmICghKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCEoJ2Vycm5vJyBpbiBlcnJvcikgfHwgdHlwZW9mIGVycm9yLmVycm5vICE9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEFwcGVhcnMgdGhpcyBpcyB0aGUgcmVjb21tZW5kZWQgd2F5IHRvIGNoZWNrIGZvciBOb2RlLmpzIFN5c3RlbUVycm9yXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvNDY4NjlcbiAgcmV0dXJuIHV0aWwuZ2V0U3lzdGVtRXJyb3JNYXAoKS5oYXMoZXJyb3IuZXJybm8pO1xufVxuXG4vKipcbiAqIENhcHR1cmVzIGNvbnRleHQgZm9yIE5vZGUuanMgU3lzdGVtRXJyb3IgZXJyb3JzLlxuICovXG5jb25zdCBzeXN0ZW1FcnJvckludGVncmF0aW9uID0gY29yZS5kZWZpbmVJbnRlZ3JhdGlvbigob3B0aW9ucyA9IHt9KSA9PiB7XG4gIHJldHVybiB7XG4gICAgbmFtZTogSU5URUdSQVRJT05fTkFNRSxcbiAgICBwcm9jZXNzRXZlbnQ6IChldmVudCwgaGludCwgY2xpZW50KSA9PiB7XG4gICAgICBpZiAoIWlzU3lzdGVtRXJyb3IoaGludC5vcmlnaW5hbEV4Y2VwdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBlcnJvciA9IGhpbnQub3JpZ2luYWxFeGNlcHRpb247XG5cbiAgICAgIGNvbnN0IGVycm9yQ29udGV4dCA9IHtcbiAgICAgICAgLi4uZXJyb3IsXG4gICAgICB9O1xuXG4gICAgICBpZiAoIWNsaWVudC5nZXRPcHRpb25zKCkuc2VuZERlZmF1bHRQaWkgJiYgb3B0aW9ucy5pbmNsdWRlUGF0aHMgIT09IHRydWUpIHtcbiAgICAgICAgZGVsZXRlIGVycm9yQ29udGV4dC5wYXRoO1xuICAgICAgICBkZWxldGUgZXJyb3JDb250ZXh0LmRlc3Q7XG4gICAgICB9XG5cbiAgICAgIGV2ZW50LmNvbnRleHRzID0ge1xuICAgICAgICAuLi5ldmVudC5jb250ZXh0cyxcbiAgICAgICAgbm9kZV9zeXN0ZW1fZXJyb3I6IGVycm9yQ29udGV4dCxcbiAgICAgIH07XG5cbiAgICAgIGZvciAoY29uc3QgZXhjZXB0aW9uIG9mIGV2ZW50LmV4Y2VwdGlvbj8udmFsdWVzIHx8IFtdKSB7XG4gICAgICAgIGlmIChleGNlcHRpb24udmFsdWUpIHtcbiAgICAgICAgICBpZiAoZXJyb3IucGF0aCAmJiBleGNlcHRpb24udmFsdWUuaW5jbHVkZXMoZXJyb3IucGF0aCkpIHtcbiAgICAgICAgICAgIGV4Y2VwdGlvbi52YWx1ZSA9IGV4Y2VwdGlvbi52YWx1ZS5yZXBsYWNlKGAnJHtlcnJvci5wYXRofSdgLCAnJykudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXJyb3IuZGVzdCAmJiBleGNlcHRpb24udmFsdWUuaW5jbHVkZXMoZXJyb3IuZGVzdCkpIHtcbiAgICAgICAgICAgIGV4Y2VwdGlvbi52YWx1ZSA9IGV4Y2VwdGlvbi52YWx1ZS5yZXBsYWNlKGAnJHtlcnJvci5kZXN0fSdgLCAnJykudHJpbSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfSxcbiAgfTtcbn0pO1xuXG5leHBvcnRzLnN5c3RlbUVycm9ySW50ZWdyYXRpb24gPSBzeXN0ZW1FcnJvckludGVncmF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3lzdGVtRXJyb3IuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/systemError.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/winston.js":
/*!**************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/winston.js ***!
  \**************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst capture = __webpack_require__(/*! ../logs/capture.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/logs/capture.js\");\n\nconst DEFAULT_CAPTURED_LEVELS = ['trace', 'debug', 'info', 'warn', 'error', 'fatal'];\n\n// See: https://github.com/winstonjs/triple-beam\nconst LEVEL_SYMBOL = Symbol.for('level');\nconst MESSAGE_SYMBOL = Symbol.for('message');\nconst SPLAT_SYMBOL = Symbol.for('splat');\n\n/**\n * Options for the Sentry Winston transport.\n */\n\n/**\n * Creates a new Sentry Winston transport that fowards logs to Sentry. Requires the `enableLogs` option to be enabled.\n *\n * Supports Winston 3.x.x.\n *\n * @param TransportClass - The Winston transport class to extend.\n * @returns The extended transport class.\n *\n * @example\n * ```ts\n * const winston = require('winston');\n * const Transport = require('winston-transport');\n *\n * const SentryWinstonTransport = Sentry.createSentryWinstonTransport(Transport);\n *\n * const logger = winston.createLogger({\n *   transports: [new SentryWinstonTransport()],\n * });\n * ```\n */\nfunction createSentryWinstonTransport(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  TransportClass,\n  sentryWinstonOptions,\n) {\n  // @ts-ignore - We know this is safe because SentryWinstonTransport extends TransportClass\n  class SentryWinstonTransport extends TransportClass {\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n     constructor(options) {\n      super(options);\n      this._levels = new Set(sentryWinstonOptions?.levels ?? DEFAULT_CAPTURED_LEVELS);\n    }\n\n    /**\n     * Forwards a winston log to the Sentry SDK.\n     */\n     log(info, callback) {\n      try {\n        setImmediate(() => {\n          // @ts-ignore - We know this is safe because SentryWinstonTransport extends TransportClass\n          this.emit('logged', info);\n        });\n\n        if (!isObject(info)) {\n          return;\n        }\n\n        const levelFromSymbol = info[LEVEL_SYMBOL];\n\n        // See: https://github.com/winstonjs/winston?tab=readme-ov-file#streams-objectmode-and-info-objects\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { level, message, timestamp, ...attributes } = info;\n        // Remove all symbols from the remaining attributes\n        attributes[LEVEL_SYMBOL] = undefined;\n        attributes[MESSAGE_SYMBOL] = undefined;\n        attributes[SPLAT_SYMBOL] = undefined;\n\n        const logSeverityLevel = WINSTON_LEVEL_TO_LOG_SEVERITY_LEVEL_MAP[levelFromSymbol ] ?? 'info';\n        if (this._levels.has(logSeverityLevel)) {\n          capture.captureLog(logSeverityLevel, message , {\n            ...attributes,\n            'sentry.origin': 'auto.logging.winston',\n          });\n        }\n      } catch {\n        // do nothing\n      }\n\n      if (callback) {\n        callback();\n      }\n    }\n  }\n\n  return SentryWinstonTransport ;\n}\n\nfunction isObject(anything) {\n  return typeof anything === 'object' && anything != null;\n}\n\n// npm\n// {\n//   error: 0,\n//   warn: 1,\n//   info: 2,\n//   http: 3,\n//   verbose: 4,\n//   debug: 5,\n//   silly: 6\n// }\n//\n// syslog\n// {\n//   emerg: 0,\n//   alert: 1,\n//   crit: 2,\n//   error: 3,\n//   warning: 4,\n//   notice: 5,\n//   info: 6,\n//   debug: 7,\n// }\nconst WINSTON_LEVEL_TO_LOG_SEVERITY_LEVEL_MAP = {\n  // npm\n  silly: 'trace',\n  // npm and syslog\n  debug: 'debug',\n  // npm\n  verbose: 'debug',\n  // npm\n  http: 'debug',\n  // npm and syslog\n  info: 'info',\n  // syslog\n  notice: 'info',\n  // npm\n  warn: 'warn',\n  // syslog\n  warning: 'warn',\n  // npm and syslog\n  error: 'error',\n  // syslog\n  emerg: 'fatal',\n  // syslog\n  alert: 'fatal',\n  // syslog\n  crit: 'fatal',\n};\n\nexports.createSentryWinstonTransport = createSentryWinstonTransport;\n//# sourceMappingURL=winston.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvd2luc3Rvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxnQkFBZ0IsbUJBQU8sQ0FBQyxtUEFBb0I7O0FBRTVDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLDJDQUEyQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0NBQW9DO0FBQ3BDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9pbnRlZ3JhdGlvbnMvd2luc3Rvbi5qcz8zNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjYXB0dXJlID0gcmVxdWlyZSgnLi4vbG9ncy9jYXB0dXJlLmpzJyk7XG5cbmNvbnN0IERFRkFVTFRfQ0FQVFVSRURfTEVWRUxTID0gWyd0cmFjZScsICdkZWJ1ZycsICdpbmZvJywgJ3dhcm4nLCAnZXJyb3InLCAnZmF0YWwnXTtcblxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2luc3RvbmpzL3RyaXBsZS1iZWFtXG5jb25zdCBMRVZFTF9TWU1CT0wgPSBTeW1ib2wuZm9yKCdsZXZlbCcpO1xuY29uc3QgTUVTU0FHRV9TWU1CT0wgPSBTeW1ib2wuZm9yKCdtZXNzYWdlJyk7XG5jb25zdCBTUExBVF9TWU1CT0wgPSBTeW1ib2wuZm9yKCdzcGxhdCcpO1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHRoZSBTZW50cnkgV2luc3RvbiB0cmFuc3BvcnQuXG4gKi9cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFNlbnRyeSBXaW5zdG9uIHRyYW5zcG9ydCB0aGF0IGZvd2FyZHMgbG9ncyB0byBTZW50cnkuIFJlcXVpcmVzIHRoZSBgZW5hYmxlTG9nc2Agb3B0aW9uIHRvIGJlIGVuYWJsZWQuXG4gKlxuICogU3VwcG9ydHMgV2luc3RvbiAzLngueC5cbiAqXG4gKiBAcGFyYW0gVHJhbnNwb3J0Q2xhc3MgLSBUaGUgV2luc3RvbiB0cmFuc3BvcnQgY2xhc3MgdG8gZXh0ZW5kLlxuICogQHJldHVybnMgVGhlIGV4dGVuZGVkIHRyYW5zcG9ydCBjbGFzcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgdHNcbiAqIGNvbnN0IHdpbnN0b24gPSByZXF1aXJlKCd3aW5zdG9uJyk7XG4gKiBjb25zdCBUcmFuc3BvcnQgPSByZXF1aXJlKCd3aW5zdG9uLXRyYW5zcG9ydCcpO1xuICpcbiAqIGNvbnN0IFNlbnRyeVdpbnN0b25UcmFuc3BvcnQgPSBTZW50cnkuY3JlYXRlU2VudHJ5V2luc3RvblRyYW5zcG9ydChUcmFuc3BvcnQpO1xuICpcbiAqIGNvbnN0IGxvZ2dlciA9IHdpbnN0b24uY3JlYXRlTG9nZ2VyKHtcbiAqICAgdHJhbnNwb3J0czogW25ldyBTZW50cnlXaW5zdG9uVHJhbnNwb3J0KCldLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gY3JlYXRlU2VudHJ5V2luc3RvblRyYW5zcG9ydChcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgVHJhbnNwb3J0Q2xhc3MsXG4gIHNlbnRyeVdpbnN0b25PcHRpb25zLFxuKSB7XG4gIC8vIEB0cy1pZ25vcmUgLSBXZSBrbm93IHRoaXMgaXMgc2FmZSBiZWNhdXNlIFNlbnRyeVdpbnN0b25UcmFuc3BvcnQgZXh0ZW5kcyBUcmFuc3BvcnRDbGFzc1xuICBjbGFzcyBTZW50cnlXaW5zdG9uVHJhbnNwb3J0IGV4dGVuZHMgVHJhbnNwb3J0Q2xhc3Mge1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICB0aGlzLl9sZXZlbHMgPSBuZXcgU2V0KHNlbnRyeVdpbnN0b25PcHRpb25zPy5sZXZlbHMgPz8gREVGQVVMVF9DQVBUVVJFRF9MRVZFTFMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvcndhcmRzIGEgd2luc3RvbiBsb2cgdG8gdGhlIFNlbnRyeSBTREsuXG4gICAgICovXG4gICAgIGxvZyhpbmZvLCBjYWxsYmFjaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0SW1tZWRpYXRlKCgpID0+IHtcbiAgICAgICAgICAvLyBAdHMtaWdub3JlIC0gV2Uga25vdyB0aGlzIGlzIHNhZmUgYmVjYXVzZSBTZW50cnlXaW5zdG9uVHJhbnNwb3J0IGV4dGVuZHMgVHJhbnNwb3J0Q2xhc3NcbiAgICAgICAgICB0aGlzLmVtaXQoJ2xvZ2dlZCcsIGluZm8pO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoIWlzT2JqZWN0KGluZm8pKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGV2ZWxGcm9tU3ltYm9sID0gaW5mb1tMRVZFTF9TWU1CT0xdO1xuXG4gICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3dpbnN0b25qcy93aW5zdG9uP3RhYj1yZWFkbWUtb3YtZmlsZSNzdHJlYW1zLW9iamVjdG1vZGUtYW5kLWluZm8tb2JqZWN0c1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgICAgIGNvbnN0IHsgbGV2ZWwsIG1lc3NhZ2UsIHRpbWVzdGFtcCwgLi4uYXR0cmlidXRlcyB9ID0gaW5mbztcbiAgICAgICAgLy8gUmVtb3ZlIGFsbCBzeW1ib2xzIGZyb20gdGhlIHJlbWFpbmluZyBhdHRyaWJ1dGVzXG4gICAgICAgIGF0dHJpYnV0ZXNbTEVWRUxfU1lNQk9MXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgYXR0cmlidXRlc1tNRVNTQUdFX1NZTUJPTF0gPSB1bmRlZmluZWQ7XG4gICAgICAgIGF0dHJpYnV0ZXNbU1BMQVRfU1lNQk9MXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBjb25zdCBsb2dTZXZlcml0eUxldmVsID0gV0lOU1RPTl9MRVZFTF9UT19MT0dfU0VWRVJJVFlfTEVWRUxfTUFQW2xldmVsRnJvbVN5bWJvbCBdID8/ICdpbmZvJztcbiAgICAgICAgaWYgKHRoaXMuX2xldmVscy5oYXMobG9nU2V2ZXJpdHlMZXZlbCkpIHtcbiAgICAgICAgICBjYXB0dXJlLmNhcHR1cmVMb2cobG9nU2V2ZXJpdHlMZXZlbCwgbWVzc2FnZSAsIHtcbiAgICAgICAgICAgIC4uLmF0dHJpYnV0ZXMsXG4gICAgICAgICAgICAnc2VudHJ5Lm9yaWdpbic6ICdhdXRvLmxvZ2dpbmcud2luc3RvbicsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBTZW50cnlXaW5zdG9uVHJhbnNwb3J0IDtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3QoYW55dGhpbmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhbnl0aGluZyA9PT0gJ29iamVjdCcgJiYgYW55dGhpbmcgIT0gbnVsbDtcbn1cblxuLy8gbnBtXG4vLyB7XG4vLyAgIGVycm9yOiAwLFxuLy8gICB3YXJuOiAxLFxuLy8gICBpbmZvOiAyLFxuLy8gICBodHRwOiAzLFxuLy8gICB2ZXJib3NlOiA0LFxuLy8gICBkZWJ1ZzogNSxcbi8vICAgc2lsbHk6IDZcbi8vIH1cbi8vXG4vLyBzeXNsb2dcbi8vIHtcbi8vICAgZW1lcmc6IDAsXG4vLyAgIGFsZXJ0OiAxLFxuLy8gICBjcml0OiAyLFxuLy8gICBlcnJvcjogMyxcbi8vICAgd2FybmluZzogNCxcbi8vICAgbm90aWNlOiA1LFxuLy8gICBpbmZvOiA2LFxuLy8gICBkZWJ1ZzogNyxcbi8vIH1cbmNvbnN0IFdJTlNUT05fTEVWRUxfVE9fTE9HX1NFVkVSSVRZX0xFVkVMX01BUCA9IHtcbiAgLy8gbnBtXG4gIHNpbGx5OiAndHJhY2UnLFxuICAvLyBucG0gYW5kIHN5c2xvZ1xuICBkZWJ1ZzogJ2RlYnVnJyxcbiAgLy8gbnBtXG4gIHZlcmJvc2U6ICdkZWJ1ZycsXG4gIC8vIG5wbVxuICBodHRwOiAnZGVidWcnLFxuICAvLyBucG0gYW5kIHN5c2xvZ1xuICBpbmZvOiAnaW5mbycsXG4gIC8vIHN5c2xvZ1xuICBub3RpY2U6ICdpbmZvJyxcbiAgLy8gbnBtXG4gIHdhcm46ICd3YXJuJyxcbiAgLy8gc3lzbG9nXG4gIHdhcm5pbmc6ICd3YXJuJyxcbiAgLy8gbnBtIGFuZCBzeXNsb2dcbiAgZXJyb3I6ICdlcnJvcicsXG4gIC8vIHN5c2xvZ1xuICBlbWVyZzogJ2ZhdGFsJyxcbiAgLy8gc3lzbG9nXG4gIGFsZXJ0OiAnZmF0YWwnLFxuICAvLyBzeXNsb2dcbiAgY3JpdDogJ2ZhdGFsJyxcbn07XG5cbmV4cG9ydHMuY3JlYXRlU2VudHJ5V2luc3RvblRyYW5zcG9ydCA9IGNyZWF0ZVNlbnRyeVdpbnN0b25UcmFuc3BvcnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13aW5zdG9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/winston.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/logs/capture.js":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/logs/capture.js ***!
  \******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst util = __webpack_require__(/*! node:util */ \"node:util\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Additional metadata to capture the log with.\n */\n\n/**\n * Capture a log with the given level.\n *\n * @param level - The level of the log.\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n */\nfunction captureLog(level, ...args) {\n  const [messageOrMessageTemplate, paramsOrAttributes, maybeAttributesOrMetadata, maybeMetadata] = args;\n  if (Array.isArray(paramsOrAttributes)) {\n    const attributes = { ...(maybeAttributesOrMetadata ) };\n    attributes['sentry.message.template'] = messageOrMessageTemplate;\n    paramsOrAttributes.forEach((param, index) => {\n      attributes[`sentry.message.parameter.${index}`] = param;\n    });\n    const message = util.format(messageOrMessageTemplate, ...paramsOrAttributes);\n    core._INTERNAL_captureLog({ level, message, attributes }, maybeMetadata?.scope);\n  } else {\n    core._INTERNAL_captureLog(\n      { level, message: messageOrMessageTemplate, attributes: paramsOrAttributes },\n      maybeMetadata?.scope,\n    );\n  }\n}\n\nexports.captureLog = captureLog;\n//# sourceMappingURL=capture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9sb2dzL2NhcHR1cmUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDRCQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYzs7QUFFbkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSw2Q0FBNkMsTUFBTTtBQUNuRCxLQUFLO0FBQ0w7QUFDQSxnQ0FBZ0MsNEJBQTRCO0FBQzVELElBQUk7QUFDSjtBQUNBLFFBQVEsMEVBQTBFO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvbG9ncy9jYXB0dXJlLmpzP2RkOTkiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKCdub2RlOnV0aWwnKTtcbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcblxuLyoqXG4gKiBBZGRpdGlvbmFsIG1ldGFkYXRhIHRvIGNhcHR1cmUgdGhlIGxvZyB3aXRoLlxuICovXG5cbi8qKlxuICogQ2FwdHVyZSBhIGxvZyB3aXRoIHRoZSBnaXZlbiBsZXZlbC5cbiAqXG4gKiBAcGFyYW0gbGV2ZWwgLSBUaGUgbGV2ZWwgb2YgdGhlIGxvZy5cbiAqIEBwYXJhbSBtZXNzYWdlIC0gVGhlIG1lc3NhZ2UgdG8gbG9nLlxuICogQHBhcmFtIGF0dHJpYnV0ZXMgLSBBcmJpdHJhcnkgc3RydWN0dXJlZCBkYXRhIHRoYXQgc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsb2cgLSBlLmcuLCB1c2VySWQ6IDEwMC5cbiAqL1xuZnVuY3Rpb24gY2FwdHVyZUxvZyhsZXZlbCwgLi4uYXJncykge1xuICBjb25zdCBbbWVzc2FnZU9yTWVzc2FnZVRlbXBsYXRlLCBwYXJhbXNPckF0dHJpYnV0ZXMsIG1heWJlQXR0cmlidXRlc09yTWV0YWRhdGEsIG1heWJlTWV0YWRhdGFdID0gYXJncztcbiAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1zT3JBdHRyaWJ1dGVzKSkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB7IC4uLihtYXliZUF0dHJpYnV0ZXNPck1ldGFkYXRhICkgfTtcbiAgICBhdHRyaWJ1dGVzWydzZW50cnkubWVzc2FnZS50ZW1wbGF0ZSddID0gbWVzc2FnZU9yTWVzc2FnZVRlbXBsYXRlO1xuICAgIHBhcmFtc09yQXR0cmlidXRlcy5mb3JFYWNoKChwYXJhbSwgaW5kZXgpID0+IHtcbiAgICAgIGF0dHJpYnV0ZXNbYHNlbnRyeS5tZXNzYWdlLnBhcmFtZXRlci4ke2luZGV4fWBdID0gcGFyYW07XG4gICAgfSk7XG4gICAgY29uc3QgbWVzc2FnZSA9IHV0aWwuZm9ybWF0KG1lc3NhZ2VPck1lc3NhZ2VUZW1wbGF0ZSwgLi4ucGFyYW1zT3JBdHRyaWJ1dGVzKTtcbiAgICBjb3JlLl9JTlRFUk5BTF9jYXB0dXJlTG9nKHsgbGV2ZWwsIG1lc3NhZ2UsIGF0dHJpYnV0ZXMgfSwgbWF5YmVNZXRhZGF0YT8uc2NvcGUpO1xuICB9IGVsc2Uge1xuICAgIGNvcmUuX0lOVEVSTkFMX2NhcHR1cmVMb2coXG4gICAgICB7IGxldmVsLCBtZXNzYWdlOiBtZXNzYWdlT3JNZXNzYWdlVGVtcGxhdGUsIGF0dHJpYnV0ZXM6IHBhcmFtc09yQXR0cmlidXRlcyB9LFxuICAgICAgbWF5YmVNZXRhZGF0YT8uc2NvcGUsXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnRzLmNhcHR1cmVMb2cgPSBjYXB0dXJlTG9nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FwdHVyZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/logs/capture.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/logs/exports.js":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/logs/exports.js ***!
  \******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst capture = __webpack_require__(/*! ./capture.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/logs/capture.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * @summary Capture a log with the `trace` level. Requires the `enableLogs` option to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.trace('Starting database connection', {\n *   database: 'users',\n *   connectionId: 'conn_123'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.trace('Database connection %s established for %s',\n *   ['successful', 'users'],\n *   { connectionId: 'conn_123' }\n * );\n * ```\n */\nfunction trace(...args) {\n  capture.captureLog('trace', ...args);\n}\n\n/**\n * @summary Capture a log with the `debug` level. Requires the `enableLogs` option to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.debug('Cache miss for user profile', {\n *   userId: 'user_123',\n *   cacheKey: 'profile:user_123'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.debug('Cache %s for %s: %s',\n *   ['miss', 'user profile', 'key not found'],\n *   { userId: 'user_123' }\n * );\n * ```\n */\nfunction debug(...args) {\n  capture.captureLog('debug', ...args);\n}\n\n/**\n * @summary Capture a log with the `info` level. Requires the `enableLogs` option to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.info('User profile updated', {\n *   userId: 'user_123',\n *   updatedFields: ['email', 'preferences']\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.info('User %s updated their %s',\n *   ['John Doe', 'profile settings'],\n *   { userId: 'user_123' }\n * );\n * ```\n */\nfunction info(...args) {\n  capture.captureLog('info', ...args);\n}\n\n/**\n * @summary Capture a log with the `warn` level. Requires the `enableLogs` option to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.warn('Rate limit approaching', {\n *   endpoint: '/api/users',\n *   currentRate: '95/100',\n *   resetTime: '2024-03-20T10:00:00Z'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.warn('Rate limit %s for %s: %s',\n *   ['approaching', '/api/users', '95/100 requests'],\n *   { resetTime: '2024-03-20T10:00:00Z' }\n * );\n * ```\n */\nfunction warn(...args) {\n  capture.captureLog('warn', ...args);\n}\n\n/**\n * @summary Capture a log with the `error` level. Requires the `enableLogs` option to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.error('Failed to process payment', {\n *   orderId: 'order_123',\n *   errorCode: 'PAYMENT_FAILED',\n *   amount: 99.99\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.error('Payment processing failed for order %s: %s',\n *   ['order_123', 'insufficient funds'],\n *   { amount: 99.99 }\n * );\n * ```\n */\nfunction error(...args) {\n  capture.captureLog('error', ...args);\n}\n\n/**\n * @summary Capture a log with the `fatal` level. Requires the `enableLogs` option to be enabled.\n *\n * You can either pass a message and attributes or a message template, params and attributes.\n *\n * @example\n *\n * ```\n * Sentry.logger.fatal('Database connection pool exhausted', {\n *   database: 'users',\n *   activeConnections: 100,\n *   maxConnections: 100\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.fatal('Database %s: %s connections active',\n *   ['connection pool exhausted', '100/100'],\n *   { database: 'users' }\n * );\n * ```\n */\nfunction fatal(...args) {\n  capture.captureLog('fatal', ...args);\n}\n\nexports.fmt = core.fmt;\nexports.debug = debug;\nexports.error = error;\nexports.fatal = fatal;\nexports.info = info;\nexports.trace = trace;\nexports.warn = warn;\n//# sourceMappingURL=exports.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9sb2dzL2V4cG9ydHMuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsZ0JBQWdCLG1CQUFPLENBQUMsNk9BQWM7QUFDdEMsYUFBYSxtQkFBTyxDQUFDLDZIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXO0FBQ1gsYUFBYTtBQUNiLGFBQWE7QUFDYixhQUFhO0FBQ2IsWUFBWTtBQUNaLGFBQWE7QUFDYixZQUFZO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZS1jb3JlQDEwLjE5LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wX0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYXN5bmMtaG9va3NAMi4xLjBfQF8yZ2RocjZrdmRwd2huamRpb3lta2I0ZGJndS9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL2xvZ3MvZXhwb3J0cy5qcz9kOTZiIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjYXB0dXJlID0gcmVxdWlyZSgnLi9jYXB0dXJlLmpzJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogQHN1bW1hcnkgQ2FwdHVyZSBhIGxvZyB3aXRoIHRoZSBgdHJhY2VgIGxldmVsLiBSZXF1aXJlcyB0aGUgYGVuYWJsZUxvZ3NgIG9wdGlvbiB0byBiZSBlbmFibGVkLlxuICpcbiAqIFlvdSBjYW4gZWl0aGVyIHBhc3MgYSBtZXNzYWdlIGFuZCBhdHRyaWJ1dGVzIG9yIGEgbWVzc2FnZSB0ZW1wbGF0ZSwgcGFyYW1zIGFuZCBhdHRyaWJ1dGVzLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgXG4gKiBTZW50cnkubG9nZ2VyLnRyYWNlKCdTdGFydGluZyBkYXRhYmFzZSBjb25uZWN0aW9uJywge1xuICogICBkYXRhYmFzZTogJ3VzZXJzJyxcbiAqICAgY29ubmVjdGlvbklkOiAnY29ubl8xMjMnXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIFdpdGggdGVtcGxhdGUgc3RyaW5nc1xuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci50cmFjZSgnRGF0YWJhc2UgY29ubmVjdGlvbiAlcyBlc3RhYmxpc2hlZCBmb3IgJXMnLFxuICogICBbJ3N1Y2Nlc3NmdWwnLCAndXNlcnMnXSxcbiAqICAgeyBjb25uZWN0aW9uSWQ6ICdjb25uXzEyMycgfVxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiB0cmFjZSguLi5hcmdzKSB7XG4gIGNhcHR1cmUuY2FwdHVyZUxvZygndHJhY2UnLCAuLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBAc3VtbWFyeSBDYXB0dXJlIGEgbG9nIHdpdGggdGhlIGBkZWJ1Z2AgbGV2ZWwuIFJlcXVpcmVzIHRoZSBgZW5hYmxlTG9nc2Agb3B0aW9uIHRvIGJlIGVuYWJsZWQuXG4gKlxuICogWW91IGNhbiBlaXRoZXIgcGFzcyBhIG1lc3NhZ2UgYW5kIGF0dHJpYnV0ZXMgb3IgYSBtZXNzYWdlIHRlbXBsYXRlLCBwYXJhbXMgYW5kIGF0dHJpYnV0ZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIuZGVidWcoJ0NhY2hlIG1pc3MgZm9yIHVzZXIgcHJvZmlsZScsIHtcbiAqICAgdXNlcklkOiAndXNlcl8xMjMnLFxuICogICBjYWNoZUtleTogJ3Byb2ZpbGU6dXNlcl8xMjMnXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIFdpdGggdGVtcGxhdGUgc3RyaW5nc1xuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci5kZWJ1ZygnQ2FjaGUgJXMgZm9yICVzOiAlcycsXG4gKiAgIFsnbWlzcycsICd1c2VyIHByb2ZpbGUnLCAna2V5IG5vdCBmb3VuZCddLFxuICogICB7IHVzZXJJZDogJ3VzZXJfMTIzJyB9XG4gKiApO1xuICogYGBgXG4gKi9cbmZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcbiAgY2FwdHVyZS5jYXB0dXJlTG9nKCdkZWJ1ZycsIC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIEBzdW1tYXJ5IENhcHR1cmUgYSBsb2cgd2l0aCB0aGUgYGluZm9gIGxldmVsLiBSZXF1aXJlcyB0aGUgYGVuYWJsZUxvZ3NgIG9wdGlvbiB0byBiZSBlbmFibGVkLlxuICpcbiAqIFlvdSBjYW4gZWl0aGVyIHBhc3MgYSBtZXNzYWdlIGFuZCBhdHRyaWJ1dGVzIG9yIGEgbWVzc2FnZSB0ZW1wbGF0ZSwgcGFyYW1zIGFuZCBhdHRyaWJ1dGVzLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgXG4gKiBTZW50cnkubG9nZ2VyLmluZm8oJ1VzZXIgcHJvZmlsZSB1cGRhdGVkJywge1xuICogICB1c2VySWQ6ICd1c2VyXzEyMycsXG4gKiAgIHVwZGF0ZWRGaWVsZHM6IFsnZW1haWwnLCAncHJlZmVyZW5jZXMnXVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSBXaXRoIHRlbXBsYXRlIHN0cmluZ3NcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIuaW5mbygnVXNlciAlcyB1cGRhdGVkIHRoZWlyICVzJyxcbiAqICAgWydKb2huIERvZScsICdwcm9maWxlIHNldHRpbmdzJ10sXG4gKiAgIHsgdXNlcklkOiAndXNlcl8xMjMnIH1cbiAqICk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gaW5mbyguLi5hcmdzKSB7XG4gIGNhcHR1cmUuY2FwdHVyZUxvZygnaW5mbycsIC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIEBzdW1tYXJ5IENhcHR1cmUgYSBsb2cgd2l0aCB0aGUgYHdhcm5gIGxldmVsLiBSZXF1aXJlcyB0aGUgYGVuYWJsZUxvZ3NgIG9wdGlvbiB0byBiZSBlbmFibGVkLlxuICpcbiAqIFlvdSBjYW4gZWl0aGVyIHBhc3MgYSBtZXNzYWdlIGFuZCBhdHRyaWJ1dGVzIG9yIGEgbWVzc2FnZSB0ZW1wbGF0ZSwgcGFyYW1zIGFuZCBhdHRyaWJ1dGVzLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgXG4gKiBTZW50cnkubG9nZ2VyLndhcm4oJ1JhdGUgbGltaXQgYXBwcm9hY2hpbmcnLCB7XG4gKiAgIGVuZHBvaW50OiAnL2FwaS91c2VycycsXG4gKiAgIGN1cnJlbnRSYXRlOiAnOTUvMTAwJyxcbiAqICAgcmVzZXRUaW1lOiAnMjAyNC0wMy0yMFQxMDowMDowMFonXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIFdpdGggdGVtcGxhdGUgc3RyaW5nc1xuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci53YXJuKCdSYXRlIGxpbWl0ICVzIGZvciAlczogJXMnLFxuICogICBbJ2FwcHJvYWNoaW5nJywgJy9hcGkvdXNlcnMnLCAnOTUvMTAwIHJlcXVlc3RzJ10sXG4gKiAgIHsgcmVzZXRUaW1lOiAnMjAyNC0wMy0yMFQxMDowMDowMFonIH1cbiAqICk7XG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gd2FybiguLi5hcmdzKSB7XG4gIGNhcHR1cmUuY2FwdHVyZUxvZygnd2FybicsIC4uLmFyZ3MpO1xufVxuXG4vKipcbiAqIEBzdW1tYXJ5IENhcHR1cmUgYSBsb2cgd2l0aCB0aGUgYGVycm9yYCBsZXZlbC4gUmVxdWlyZXMgdGhlIGBlbmFibGVMb2dzYCBvcHRpb24gdG8gYmUgZW5hYmxlZC5cbiAqXG4gKiBZb3UgY2FuIGVpdGhlciBwYXNzIGEgbWVzc2FnZSBhbmQgYXR0cmlidXRlcyBvciBhIG1lc3NhZ2UgdGVtcGxhdGUsIHBhcmFtcyBhbmQgYXR0cmlidXRlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci5lcnJvcignRmFpbGVkIHRvIHByb2Nlc3MgcGF5bWVudCcsIHtcbiAqICAgb3JkZXJJZDogJ29yZGVyXzEyMycsXG4gKiAgIGVycm9yQ29kZTogJ1BBWU1FTlRfRkFJTEVEJyxcbiAqICAgYW1vdW50OiA5OS45OVxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAZXhhbXBsZSBXaXRoIHRlbXBsYXRlIHN0cmluZ3NcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIuZXJyb3IoJ1BheW1lbnQgcHJvY2Vzc2luZyBmYWlsZWQgZm9yIG9yZGVyICVzOiAlcycsXG4gKiAgIFsnb3JkZXJfMTIzJywgJ2luc3VmZmljaWVudCBmdW5kcyddLFxuICogICB7IGFtb3VudDogOTkuOTkgfVxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBlcnJvciguLi5hcmdzKSB7XG4gIGNhcHR1cmUuY2FwdHVyZUxvZygnZXJyb3InLCAuLi5hcmdzKTtcbn1cblxuLyoqXG4gKiBAc3VtbWFyeSBDYXB0dXJlIGEgbG9nIHdpdGggdGhlIGBmYXRhbGAgbGV2ZWwuIFJlcXVpcmVzIHRoZSBgZW5hYmxlTG9nc2Agb3B0aW9uIHRvIGJlIGVuYWJsZWQuXG4gKlxuICogWW91IGNhbiBlaXRoZXIgcGFzcyBhIG1lc3NhZ2UgYW5kIGF0dHJpYnV0ZXMgb3IgYSBtZXNzYWdlIHRlbXBsYXRlLCBwYXJhbXMgYW5kIGF0dHJpYnV0ZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGBcbiAqIFNlbnRyeS5sb2dnZXIuZmF0YWwoJ0RhdGFiYXNlIGNvbm5lY3Rpb24gcG9vbCBleGhhdXN0ZWQnLCB7XG4gKiAgIGRhdGFiYXNlOiAndXNlcnMnLFxuICogICBhY3RpdmVDb25uZWN0aW9uczogMTAwLFxuICogICBtYXhDb25uZWN0aW9uczogMTAwXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBleGFtcGxlIFdpdGggdGVtcGxhdGUgc3RyaW5nc1xuICpcbiAqIGBgYFxuICogU2VudHJ5LmxvZ2dlci5mYXRhbCgnRGF0YWJhc2UgJXM6ICVzIGNvbm5lY3Rpb25zIGFjdGl2ZScsXG4gKiAgIFsnY29ubmVjdGlvbiBwb29sIGV4aGF1c3RlZCcsICcxMDAvMTAwJ10sXG4gKiAgIHsgZGF0YWJhc2U6ICd1c2VycycgfVxuICogKTtcbiAqIGBgYFxuICovXG5mdW5jdGlvbiBmYXRhbCguLi5hcmdzKSB7XG4gIGNhcHR1cmUuY2FwdHVyZUxvZygnZmF0YWwnLCAuLi5hcmdzKTtcbn1cblxuZXhwb3J0cy5mbXQgPSBjb3JlLmZtdDtcbmV4cG9ydHMuZGVidWcgPSBkZWJ1ZztcbmV4cG9ydHMuZXJyb3IgPSBlcnJvcjtcbmV4cG9ydHMuZmF0YWwgPSBmYXRhbDtcbmV4cG9ydHMuaW5mbyA9IGluZm87XG5leHBvcnRzLnRyYWNlID0gdHJhY2U7XG5leHBvcnRzLndhcm4gPSB3YXJuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXhwb3J0cy5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/logs/exports.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/nodeVersion.js":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/nodeVersion.js ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nconst NODE_VERSION = core.parseSemver(process.versions.node) ;\nconst NODE_MAJOR = NODE_VERSION.major;\nconst NODE_MINOR = NODE_VERSION.minor;\n\nexports.NODE_MAJOR = NODE_MAJOR;\nexports.NODE_MINOR = NODE_MINOR;\nexports.NODE_VERSION = NODE_VERSION;\n//# sourceMappingURL=nodeVersion.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9ub2RlVmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7O0FBRW5DO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEIsa0JBQWtCO0FBQ2xCLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvbm9kZVZlcnNpb24uanM/ZWUwYyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5jb25zdCBOT0RFX1ZFUlNJT04gPSBjb3JlLnBhcnNlU2VtdmVyKHByb2Nlc3MudmVyc2lvbnMubm9kZSkgO1xuY29uc3QgTk9ERV9NQUpPUiA9IE5PREVfVkVSU0lPTi5tYWpvcjtcbmNvbnN0IE5PREVfTUlOT1IgPSBOT0RFX1ZFUlNJT04ubWlub3I7XG5cbmV4cG9ydHMuTk9ERV9NQUpPUiA9IE5PREVfTUFKT1I7XG5leHBvcnRzLk5PREVfTUlOT1IgPSBOT0RFX01JTk9SO1xuZXhwb3J0cy5OT0RFX1ZFUlNJT04gPSBOT0RFX1ZFUlNJT047XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub2RlVmVyc2lvbi5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/nodeVersion.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/contextManager.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/contextManager.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst contextAsyncHooks = __webpack_require__(/*! @opentelemetry/context-async-hooks */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+context-async-hooks@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/context-async-hooks/build/src/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_5qhoifmlgqufioqeczcfzlo2z4/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/**\n * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n * It ensures that we create a new hub per context, so that the OTEL Context & the Sentry Scopes are always in sync.\n *\n * Note that we currently only support AsyncHooks with this,\n * but since this should work for Node 14+ anyhow that should be good enough.\n */\nconst SentryContextManager = opentelemetry.wrapContextManagerClass(contextAsyncHooks.AsyncLocalStorageContextManager);\n\nexports.SentryContextManager = SentryContextManager;\n//# sourceMappingURL=contextManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9vdGVsL2NvbnRleHRNYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLDBCQUEwQixtQkFBTyxDQUFDLHNOQUFvQztBQUN0RSxzQkFBc0IsbUJBQU8sQ0FBQyxtUEFBdUI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9vdGVsL2NvbnRleHRNYW5hZ2VyLmpzPzBkODciXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvbnRleHRBc3luY0hvb2tzID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvY29udGV4dC1hc3luYy1ob29rcycpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBjdXN0b20gQ29udGV4dE1hbmFnZXIgZm9yIE9wZW5UZWxlbWV0cnksIHdoaWNoIGV4dGVuZHMgdGhlIGRlZmF1bHQgQXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlci5cbiAqIEl0IGVuc3VyZXMgdGhhdCB3ZSBjcmVhdGUgYSBuZXcgaHViIHBlciBjb250ZXh0LCBzbyB0aGF0IHRoZSBPVEVMIENvbnRleHQgJiB0aGUgU2VudHJ5IFNjb3BlcyBhcmUgYWx3YXlzIGluIHN5bmMuXG4gKlxuICogTm90ZSB0aGF0IHdlIGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgQXN5bmNIb29rcyB3aXRoIHRoaXMsXG4gKiBidXQgc2luY2UgdGhpcyBzaG91bGQgd29yayBmb3IgTm9kZSAxNCsgYW55aG93IHRoYXQgc2hvdWxkIGJlIGdvb2QgZW5vdWdoLlxuICovXG5jb25zdCBTZW50cnlDb250ZXh0TWFuYWdlciA9IG9wZW50ZWxlbWV0cnkud3JhcENvbnRleHRNYW5hZ2VyQ2xhc3MoY29udGV4dEFzeW5jSG9va3MuQXN5bmNMb2NhbFN0b3JhZ2VDb250ZXh0TWFuYWdlcik7XG5cbmV4cG9ydHMuU2VudHJ5Q29udGV4dE1hbmFnZXIgPSBTZW50cnlDb250ZXh0TWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnRleHRNYW5hZ2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/contextManager.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/instrument.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/instrument.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\n\n/** Exported only for tests. */\nconst INSTRUMENTED = {};\n\n/**\n * Instrument an OpenTelemetry instrumentation once.\n * This will skip running instrumentation again if it was already instrumented.\n */\nfunction generateInstrumentOnce(\n  name,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  creatorOrClass,\n  optionsCallback,\n) {\n  if (optionsCallback) {\n    return _generateInstrumentOnceWithOptions(\n      name,\n      creatorOrClass ,\n      optionsCallback,\n    );\n  }\n\n  return _generateInstrumentOnce(name, creatorOrClass );\n}\n\n// The plain version without handling of options\n// Should not be used with custom options that are mutated in the creator!\nfunction _generateInstrumentOnce(\n  name,\n  creator,\n) {\n  return Object.assign(\n    (options) => {\n      const instrumented = INSTRUMENTED[name] ;\n      if (instrumented) {\n        // If options are provided, ensure we update them\n        if (options) {\n          instrumented.setConfig(options);\n        }\n        return instrumented;\n      }\n\n      const instrumentation$1 = creator(options);\n      INSTRUMENTED[name] = instrumentation$1;\n\n      instrumentation.registerInstrumentations({\n        instrumentations: [instrumentation$1],\n      });\n\n      return instrumentation$1;\n    },\n    { id: name },\n  );\n}\n\n// This version handles options properly\nfunction _generateInstrumentOnceWithOptions\n\n(\n  name,\n  instrumentationClass,\n  optionsCallback,\n) {\n  return Object.assign(\n    (_options) => {\n      const options = optionsCallback(_options);\n\n      const instrumented = INSTRUMENTED[name] ;\n      if (instrumented) {\n        // Ensure we update options\n        instrumented.setConfig(options);\n        return instrumented;\n      }\n\n      const instrumentation$1 = new instrumentationClass(options) ;\n      INSTRUMENTED[name] = instrumentation$1;\n\n      instrumentation.registerInstrumentations({\n        instrumentations: [instrumentation$1],\n      });\n\n      return instrumentation$1;\n    },\n    { id: name },\n  );\n}\n\n/**\n * Ensure a given callback is called when the instrumentation is actually wrapping something.\n * This can be used to ensure some logic is only called when the instrumentation is actually active.\n *\n * This function returns a function that can be invoked with a callback.\n * This callback will either be invoked immediately\n * (e.g. if the instrumentation was already wrapped, or if _wrap could not be patched),\n * or once the instrumentation is actually wrapping something.\n *\n * Make sure to call this function right after adding the instrumentation, otherwise it may be too late!\n * The returned callback can be used any time, and also multiple times.\n */\nfunction instrumentWhenWrapped(instrumentation) {\n  let isWrapped = false;\n  let callbacks = [];\n\n  if (!hasWrap(instrumentation)) {\n    isWrapped = true;\n  } else {\n    const originalWrap = instrumentation['_wrap'];\n\n    instrumentation['_wrap'] = (...args) => {\n      isWrapped = true;\n      callbacks.forEach(callback => callback());\n      callbacks = [];\n      return originalWrap(...args);\n    };\n  }\n\n  const registerCallback = (callback) => {\n    if (isWrapped) {\n      callback();\n    } else {\n      callbacks.push(callback);\n    }\n  };\n\n  return registerCallback;\n}\n\nfunction hasWrap(\n  instrumentation,\n) {\n  return typeof (instrumentation )['_wrap'] === 'function';\n}\n\nexports.INSTRUMENTED = INSTRUMENTED;\nexports.generateInstrumentOnce = generateInstrumentOnce;\nexports.instrumentWhenWrapped = instrumentWhenWrapped;\n//# sourceMappingURL=instrument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9vdGVsL2luc3RydW1lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsd0JBQXdCLG1CQUFPLENBQUMsNE1BQWdDOztBQUVoRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0EsS0FBSztBQUNMLE1BQU0sVUFBVTtBQUNoQjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBLEtBQUs7QUFDTCxNQUFNLFVBQVU7QUFDaEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0I7QUFDcEIsOEJBQThCO0FBQzlCLDZCQUE2QjtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvb3RlbC9pbnN0cnVtZW50LmpzPzQ1ODQiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbicpO1xuXG4vKiogRXhwb3J0ZWQgb25seSBmb3IgdGVzdHMuICovXG5jb25zdCBJTlNUUlVNRU5URUQgPSB7fTtcblxuLyoqXG4gKiBJbnN0cnVtZW50IGFuIE9wZW5UZWxlbWV0cnkgaW5zdHJ1bWVudGF0aW9uIG9uY2UuXG4gKiBUaGlzIHdpbGwgc2tpcCBydW5uaW5nIGluc3RydW1lbnRhdGlvbiBhZ2FpbiBpZiBpdCB3YXMgYWxyZWFkeSBpbnN0cnVtZW50ZWQuXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlSW5zdHJ1bWVudE9uY2UoXG4gIG5hbWUsXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gIGNyZWF0b3JPckNsYXNzLFxuICBvcHRpb25zQ2FsbGJhY2ssXG4pIHtcbiAgaWYgKG9wdGlvbnNDYWxsYmFjaykge1xuICAgIHJldHVybiBfZ2VuZXJhdGVJbnN0cnVtZW50T25jZVdpdGhPcHRpb25zKFxuICAgICAgbmFtZSxcbiAgICAgIGNyZWF0b3JPckNsYXNzICxcbiAgICAgIG9wdGlvbnNDYWxsYmFjayxcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIF9nZW5lcmF0ZUluc3RydW1lbnRPbmNlKG5hbWUsIGNyZWF0b3JPckNsYXNzICk7XG59XG5cbi8vIFRoZSBwbGFpbiB2ZXJzaW9uIHdpdGhvdXQgaGFuZGxpbmcgb2Ygb3B0aW9uc1xuLy8gU2hvdWxkIG5vdCBiZSB1c2VkIHdpdGggY3VzdG9tIG9wdGlvbnMgdGhhdCBhcmUgbXV0YXRlZCBpbiB0aGUgY3JlYXRvciFcbmZ1bmN0aW9uIF9nZW5lcmF0ZUluc3RydW1lbnRPbmNlKFxuICBuYW1lLFxuICBjcmVhdG9yLFxuKSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKFxuICAgIChvcHRpb25zKSA9PiB7XG4gICAgICBjb25zdCBpbnN0cnVtZW50ZWQgPSBJTlNUUlVNRU5URURbbmFtZV0gO1xuICAgICAgaWYgKGluc3RydW1lbnRlZCkge1xuICAgICAgICAvLyBJZiBvcHRpb25zIGFyZSBwcm92aWRlZCwgZW5zdXJlIHdlIHVwZGF0ZSB0aGVtXG4gICAgICAgIGlmIChvcHRpb25zKSB7XG4gICAgICAgICAgaW5zdHJ1bWVudGVkLnNldENvbmZpZyhvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zdHJ1bWVudGVkO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpbnN0cnVtZW50YXRpb24kMSA9IGNyZWF0b3Iob3B0aW9ucyk7XG4gICAgICBJTlNUUlVNRU5URURbbmFtZV0gPSBpbnN0cnVtZW50YXRpb24kMTtcblxuICAgICAgaW5zdHJ1bWVudGF0aW9uLnJlZ2lzdGVySW5zdHJ1bWVudGF0aW9ucyh7XG4gICAgICAgIGluc3RydW1lbnRhdGlvbnM6IFtpbnN0cnVtZW50YXRpb24kMV0sXG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGluc3RydW1lbnRhdGlvbiQxO1xuICAgIH0sXG4gICAgeyBpZDogbmFtZSB9LFxuICApO1xufVxuXG4vLyBUaGlzIHZlcnNpb24gaGFuZGxlcyBvcHRpb25zIHByb3Blcmx5XG5mdW5jdGlvbiBfZ2VuZXJhdGVJbnN0cnVtZW50T25jZVdpdGhPcHRpb25zXG5cbihcbiAgbmFtZSxcbiAgaW5zdHJ1bWVudGF0aW9uQ2xhc3MsXG4gIG9wdGlvbnNDYWxsYmFjayxcbikge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbihcbiAgICAoX29wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25zQ2FsbGJhY2soX29wdGlvbnMpO1xuXG4gICAgICBjb25zdCBpbnN0cnVtZW50ZWQgPSBJTlNUUlVNRU5URURbbmFtZV0gO1xuICAgICAgaWYgKGluc3RydW1lbnRlZCkge1xuICAgICAgICAvLyBFbnN1cmUgd2UgdXBkYXRlIG9wdGlvbnNcbiAgICAgICAgaW5zdHJ1bWVudGVkLnNldENvbmZpZyhvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIGluc3RydW1lbnRlZDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaW5zdHJ1bWVudGF0aW9uJDEgPSBuZXcgaW5zdHJ1bWVudGF0aW9uQ2xhc3Mob3B0aW9ucykgO1xuICAgICAgSU5TVFJVTUVOVEVEW25hbWVdID0gaW5zdHJ1bWVudGF0aW9uJDE7XG5cbiAgICAgIGluc3RydW1lbnRhdGlvbi5yZWdpc3Rlckluc3RydW1lbnRhdGlvbnMoe1xuICAgICAgICBpbnN0cnVtZW50YXRpb25zOiBbaW5zdHJ1bWVudGF0aW9uJDFdLFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBpbnN0cnVtZW50YXRpb24kMTtcbiAgICB9LFxuICAgIHsgaWQ6IG5hbWUgfSxcbiAgKTtcbn1cblxuLyoqXG4gKiBFbnN1cmUgYSBnaXZlbiBjYWxsYmFjayBpcyBjYWxsZWQgd2hlbiB0aGUgaW5zdHJ1bWVudGF0aW9uIGlzIGFjdHVhbGx5IHdyYXBwaW5nIHNvbWV0aGluZy5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gZW5zdXJlIHNvbWUgbG9naWMgaXMgb25seSBjYWxsZWQgd2hlbiB0aGUgaW5zdHJ1bWVudGF0aW9uIGlzIGFjdHVhbGx5IGFjdGl2ZS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSBpbnZva2VkIHdpdGggYSBjYWxsYmFjay5cbiAqIFRoaXMgY2FsbGJhY2sgd2lsbCBlaXRoZXIgYmUgaW52b2tlZCBpbW1lZGlhdGVseVxuICogKGUuZy4gaWYgdGhlIGluc3RydW1lbnRhdGlvbiB3YXMgYWxyZWFkeSB3cmFwcGVkLCBvciBpZiBfd3JhcCBjb3VsZCBub3QgYmUgcGF0Y2hlZCksXG4gKiBvciBvbmNlIHRoZSBpbnN0cnVtZW50YXRpb24gaXMgYWN0dWFsbHkgd3JhcHBpbmcgc29tZXRoaW5nLlxuICpcbiAqIE1ha2Ugc3VyZSB0byBjYWxsIHRoaXMgZnVuY3Rpb24gcmlnaHQgYWZ0ZXIgYWRkaW5nIHRoZSBpbnN0cnVtZW50YXRpb24sIG90aGVyd2lzZSBpdCBtYXkgYmUgdG9vIGxhdGUhXG4gKiBUaGUgcmV0dXJuZWQgY2FsbGJhY2sgY2FuIGJlIHVzZWQgYW55IHRpbWUsIGFuZCBhbHNvIG11bHRpcGxlIHRpbWVzLlxuICovXG5mdW5jdGlvbiBpbnN0cnVtZW50V2hlbldyYXBwZWQoaW5zdHJ1bWVudGF0aW9uKSB7XG4gIGxldCBpc1dyYXBwZWQgPSBmYWxzZTtcbiAgbGV0IGNhbGxiYWNrcyA9IFtdO1xuXG4gIGlmICghaGFzV3JhcChpbnN0cnVtZW50YXRpb24pKSB7XG4gICAgaXNXcmFwcGVkID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBvcmlnaW5hbFdyYXAgPSBpbnN0cnVtZW50YXRpb25bJ193cmFwJ107XG5cbiAgICBpbnN0cnVtZW50YXRpb25bJ193cmFwJ10gPSAoLi4uYXJncykgPT4ge1xuICAgICAgaXNXcmFwcGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpO1xuICAgICAgY2FsbGJhY2tzID0gW107XG4gICAgICByZXR1cm4gb3JpZ2luYWxXcmFwKC4uLmFyZ3MpO1xuICAgIH07XG4gIH1cblxuICBjb25zdCByZWdpc3RlckNhbGxiYWNrID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgaWYgKGlzV3JhcHBlZCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gcmVnaXN0ZXJDYWxsYmFjaztcbn1cblxuZnVuY3Rpb24gaGFzV3JhcChcbiAgaW5zdHJ1bWVudGF0aW9uLFxuKSB7XG4gIHJldHVybiB0eXBlb2YgKGluc3RydW1lbnRhdGlvbiApWydfd3JhcCddID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnRzLklOU1RSVU1FTlRFRCA9IElOU1RSVU1FTlRFRDtcbmV4cG9ydHMuZ2VuZXJhdGVJbnN0cnVtZW50T25jZSA9IGdlbmVyYXRlSW5zdHJ1bWVudE9uY2U7XG5leHBvcnRzLmluc3RydW1lbnRXaGVuV3JhcHBlZCA9IGluc3RydW1lbnRXaGVuV3JhcHBlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluc3RydW1lbnQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/instrument.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/logger.js":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/logger.js ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Setup the OTEL logger to use our own debug logger.\n */\nfunction setupOpenTelemetryLogger() {\n  // Disable diag, to ensure this works even if called multiple times\n  api.diag.disable();\n  api.diag.setLogger(\n    {\n      error: core.debug.error,\n      warn: core.debug.warn,\n      info: core.debug.log,\n      debug: core.debug.log,\n      verbose: core.debug.log,\n    },\n    api.DiagLogLevel.DEBUG,\n  );\n}\n\nexports.setupOpenTelemetryLogger = setupOpenTelemetryLogger;\n//# sourceMappingURL=logger.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9vdGVsL2xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxZQUFZLG1CQUFPLENBQUMsNklBQW9CO0FBQ3hDLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBLGdDQUFnQztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvb3RlbC9sb2dnZXIuanM/MDgwNyJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgYXBpID0gcmVxdWlyZSgnQG9wZW50ZWxlbWV0cnkvYXBpJyk7XG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKlxuICogU2V0dXAgdGhlIE9URUwgbG9nZ2VyIHRvIHVzZSBvdXIgb3duIGRlYnVnIGxvZ2dlci5cbiAqL1xuZnVuY3Rpb24gc2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyKCkge1xuICAvLyBEaXNhYmxlIGRpYWcsIHRvIGVuc3VyZSB0aGlzIHdvcmtzIGV2ZW4gaWYgY2FsbGVkIG11bHRpcGxlIHRpbWVzXG4gIGFwaS5kaWFnLmRpc2FibGUoKTtcbiAgYXBpLmRpYWcuc2V0TG9nZ2VyKFxuICAgIHtcbiAgICAgIGVycm9yOiBjb3JlLmRlYnVnLmVycm9yLFxuICAgICAgd2FybjogY29yZS5kZWJ1Zy53YXJuLFxuICAgICAgaW5mbzogY29yZS5kZWJ1Zy5sb2csXG4gICAgICBkZWJ1ZzogY29yZS5kZWJ1Zy5sb2csXG4gICAgICB2ZXJib3NlOiBjb3JlLmRlYnVnLmxvZyxcbiAgICB9LFxuICAgIGFwaS5EaWFnTG9nTGV2ZWwuREVCVUcsXG4gICk7XG59XG5cbmV4cG9ydHMuc2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyID0gc2V0dXBPcGVuVGVsZW1ldHJ5TG9nZ2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nZ2VyLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/otel/logger.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/proxy/base.js":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/proxy/base.js ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\n__webpack_require__(/*! node:https */ \"node:https\");\n\n/**\n * This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n * With the following LICENSE:\n *\n * (The MIT License)\n *\n * Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:*\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.*\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\n\nclass Agent extends http.Agent {\n\n  // Set by `http.Agent` - missing from `@types/node`\n\n  constructor(opts) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options) {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      if (typeof (options ).secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const { stack } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n\n  createSocket(req, options, cb) {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options),\n    };\n    Promise.resolve()\n      .then(() => this.connect(req, connectOpts))\n      .then(socket => {\n        if (socket instanceof http.Agent) {\n          // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n          return socket.addRequest(req, connectOpts);\n        }\n        this[INTERNAL].currentSocket = socket;\n        // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n        super.createSocket(req, options, cb);\n      }, cb);\n  }\n\n  createConnection() {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n\n  get defaultPort() {\n    return this[INTERNAL].defaultPort ?? (this.protocol === 'https:' ? 443 : 80);\n  }\n\n  set defaultPort(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n\n  get protocol() {\n    return this[INTERNAL].protocol ?? (this.isSecureEndpoint() ? 'https:' : 'http:');\n  }\n\n  set protocol(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\n\nexports.Agent = Agent;\n//# sourceMappingURL=base.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9wcm94eS9iYXNlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw0QkFBVztBQUNoQyxtQkFBTyxDQUFDLDhCQUFZOztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksUUFBUTtBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZS1jb3JlQDEwLjE5LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wX0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYXN5bmMtaG9va3NAMi4xLjBfQF8yZ2RocjZrdmRwd2huamRpb3lta2I0ZGJndS9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL3Byb3h5L2Jhc2UuanM/Y2ZkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgaHR0cCA9IHJlcXVpcmUoJ25vZGU6aHR0cCcpO1xucmVxdWlyZSgnbm9kZTpodHRwcycpO1xuXG4vKipcbiAqIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSBmb3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vVG9vVGFsbE5hdGUvcHJveHktYWdlbnRzL3RyZWUvYjEzMzI5NWZkMTZmNjQ3NTU3OGI2YjE1YmQ5YjRlMzNlY2IwZDBiN1xuICogV2l0aCB0aGUgZm9sbG93aW5nIExJQ0VOU0U6XG4gKlxuICogKFRoZSBNSVQgTGljZW5zZSlcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMgTmF0aGFuIFJhamxpY2ggPG5hdGhhbkB0b290YWxsbmF0ZS5uZXQ+KlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xuICogYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4gKiAnU29mdHdhcmUnKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4gKiB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4gKiBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG9cbiAqIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xuICogdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOipcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuKlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAnQVMgSVMnLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxuICogRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4gKiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXG4gKiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxuICogQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCxcbiAqIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXG4gKiBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cbiAqL1xuXG5cbmNvbnN0IElOVEVSTkFMID0gU3ltYm9sKCdBZ2VudEJhc2VJbnRlcm5hbFN0YXRlJyk7XG5cbmNsYXNzIEFnZW50IGV4dGVuZHMgaHR0cC5BZ2VudCB7XG5cbiAgLy8gU2V0IGJ5IGBodHRwLkFnZW50YCAtIG1pc3NpbmcgZnJvbSBgQHR5cGVzL25vZGVgXG5cbiAgY29uc3RydWN0b3Iob3B0cykge1xuICAgIHN1cGVyKG9wdHMpO1xuICAgIHRoaXNbSU5URVJOQUxdID0ge307XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBpcyBhbiBgaHR0cGAgb3IgYGh0dHBzYCByZXF1ZXN0LlxuICAgKi9cbiAgaXNTZWN1cmVFbmRwb2ludChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIC8vIEZpcnN0IGNoZWNrIHRoZSBgc2VjdXJlRW5kcG9pbnRgIHByb3BlcnR5IGV4cGxpY2l0bHksIHNpbmNlIHRoaXNcbiAgICAgIC8vIG1lYW5zIHRoYXQgYSBwYXJlbnQgYEFnZW50YCBpcyBcInBhc3NpbmcgdGhyb3VnaFwiIHRvIHRoaXMgaW5zdGFuY2UuXG4gICAgICBpZiAodHlwZW9mIChvcHRpb25zICkuc2VjdXJlRW5kcG9pbnQgPT09ICdib29sZWFuJykge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy5zZWN1cmVFbmRwb2ludDtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgbm8gZXhwbGljaXQgYHNlY3VyZWAgZW5kcG9pbnQsIGNoZWNrIGlmIGBwcm90b2NvbGAgcHJvcGVydHkgaXNcbiAgICAgIC8vIHNldC4gVGhpcyB3aWxsIHVzdWFsbHkgYmUgdGhlIGNhc2Ugc2luY2UgdXNpbmcgYSBmdWxsIHN0cmluZyBVUkxcbiAgICAgIC8vIG9yIGBVUkxgIGluc3RhbmNlIHNob3VsZCBiZSB0aGUgbW9zdCBjb21tb24gdXNhZ2UuXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbnMucHJvdG9jb2wgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLnByb3RvY29sID09PSAnaHR0cHM6JztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaW5hbGx5LCBpZiBubyBgcHJvdG9jb2xgIHByb3BlcnR5IHdhcyBzZXQsIHRoZW4gZmFsbCBiYWNrIHRvXG4gICAgLy8gY2hlY2tpbmcgdGhlIHN0YWNrIHRyYWNlIG9mIHRoZSBjdXJyZW50IGNhbGwgc3RhY2ssIGFuZCB0cnkgdG9cbiAgICAvLyBkZXRlY3QgdGhlIFwiaHR0cHNcIiBtb2R1bGUuXG4gICAgY29uc3QgeyBzdGFjayB9ID0gbmV3IEVycm9yKCk7XG4gICAgaWYgKHR5cGVvZiBzdGFjayAhPT0gJ3N0cmluZycpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gc3RhY2suc3BsaXQoJ1xcbicpLnNvbWUobCA9PiBsLmluZGV4T2YoJyhodHRwcy5qczonKSAhPT0gLTEgfHwgbC5pbmRleE9mKCdub2RlOmh0dHBzOicpICE9PSAtMSk7XG4gIH1cblxuICBjcmVhdGVTb2NrZXQocmVxLCBvcHRpb25zLCBjYikge1xuICAgIGNvbnN0IGNvbm5lY3RPcHRzID0ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIHNlY3VyZUVuZHBvaW50OiB0aGlzLmlzU2VjdXJlRW5kcG9pbnQob3B0aW9ucyksXG4gICAgfTtcbiAgICBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5jb25uZWN0KHJlcSwgY29ubmVjdE9wdHMpKVxuICAgICAgLnRoZW4oc29ja2V0ID0+IHtcbiAgICAgICAgaWYgKHNvY2tldCBpbnN0YW5jZW9mIGh0dHAuQWdlbnQpIHtcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBhZGRSZXF1ZXN0KClgIGlzbid0IGRlZmluZWQgaW4gYEB0eXBlcy9ub2RlYFxuICAgICAgICAgIHJldHVybiBzb2NrZXQuYWRkUmVxdWVzdChyZXEsIGNvbm5lY3RPcHRzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0ID0gc29ja2V0O1xuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGBjcmVhdGVTb2NrZXQoKWAgaXNuJ3QgZGVmaW5lZCBpbiBgQHR5cGVzL25vZGVgXG4gICAgICAgIHN1cGVyLmNyZWF0ZVNvY2tldChyZXEsIG9wdGlvbnMsIGNiKTtcbiAgICAgIH0sIGNiKTtcbiAgfVxuXG4gIGNyZWF0ZUNvbm5lY3Rpb24oKSB7XG4gICAgY29uc3Qgc29ja2V0ID0gdGhpc1tJTlRFUk5BTF0uY3VycmVudFNvY2tldDtcbiAgICB0aGlzW0lOVEVSTkFMXS5jdXJyZW50U29ja2V0ID0gdW5kZWZpbmVkO1xuICAgIGlmICghc29ja2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNvY2tldCB3YXMgcmV0dXJuZWQgaW4gdGhlIGBjb25uZWN0KClgIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHJldHVybiBzb2NrZXQ7XG4gIH1cblxuICBnZXQgZGVmYXVsdFBvcnQoKSB7XG4gICAgcmV0dXJuIHRoaXNbSU5URVJOQUxdLmRlZmF1bHRQb3J0ID8/ICh0aGlzLnByb3RvY29sID09PSAnaHR0cHM6JyA/IDQ0MyA6IDgwKTtcbiAgfVxuXG4gIHNldCBkZWZhdWx0UG9ydCh2KSB7XG4gICAgaWYgKHRoaXNbSU5URVJOQUxdKSB7XG4gICAgICB0aGlzW0lOVEVSTkFMXS5kZWZhdWx0UG9ydCA9IHY7XG4gICAgfVxuICB9XG5cbiAgZ2V0IHByb3RvY29sKCkge1xuICAgIHJldHVybiB0aGlzW0lOVEVSTkFMXS5wcm90b2NvbCA/PyAodGhpcy5pc1NlY3VyZUVuZHBvaW50KCkgPyAnaHR0cHM6JyA6ICdodHRwOicpO1xuICB9XG5cbiAgc2V0IHByb3RvY29sKHYpIHtcbiAgICBpZiAodGhpc1tJTlRFUk5BTF0pIHtcbiAgICAgIHRoaXNbSU5URVJOQUxdLnByb3RvY29sID0gdjtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0cy5BZ2VudCA9IEFnZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YmFzZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/proxy/base.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/proxy/index.js":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/proxy/index.js ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst net = __webpack_require__(/*! node:net */ \"node:net\");\nconst tls = __webpack_require__(/*! node:tls */ \"node:tls\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst base = __webpack_require__(/*! ./base.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/proxy/base.js\");\nconst parseProxyResponse = __webpack_require__(/*! ./parse-proxy-response.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/proxy/parse-proxy-response.js\");\n\nfunction debugLog(...args) {\n  core.debug.log('[https-proxy-agent]', ...args);\n}\n\n/**\n * The `HttpsProxyAgent` implements an HTTP Agent subclass that connects to\n * the specified \"HTTP(s) proxy server\" in order to proxy HTTPS requests.\n *\n * Outgoing HTTP requests are first tunneled through the proxy server using the\n * `CONNECT` HTTP request method to establish a connection to the proxy server,\n * and then the proxy server connects to the destination target and issues the\n * HTTP request from the proxy server.\n *\n * `https:` requests have their socket connection upgraded to TLS once\n * the connection to the proxy server has been established.\n */\nclass HttpsProxyAgent extends base.Agent {\n  static __initStatic() {this.protocols = ['http', 'https']; }\n\n  constructor(proxy, opts) {\n    super(opts);\n    this.options = {};\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n    this.proxyHeaders = opts?.headers ?? {};\n    debugLog('Creating new HttpsProxyAgent instance: %o', this.proxy.href);\n\n    // Trim off the brackets from IPv6 addresses\n    const host = (this.proxy.hostname || this.proxy.host).replace(/^\\[|\\]$/g, '');\n    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : this.proxy.protocol === 'https:' ? 443 : 80;\n    this.connectOpts = {\n      // Attempt to negotiate http/1.1 for proxy servers that support http/2\n      ALPNProtocols: ['http/1.1'],\n      ...(opts ? omit(opts, 'headers') : null),\n      host,\n      port,\n    };\n  }\n\n  /**\n   * Called when the node-core HTTP client library is creating a\n   * new HTTP request.\n   */\n  async connect(req, opts) {\n    const { proxy } = this;\n\n    if (!opts.host) {\n      throw new TypeError('No \"host\" provided');\n    }\n\n    // Create a socket connection to the proxy server.\n    let socket;\n    if (proxy.protocol === 'https:') {\n      debugLog('Creating `tls.Socket`: %o', this.connectOpts);\n      const servername = this.connectOpts.servername || this.connectOpts.host;\n      socket = tls.connect({\n        ...this.connectOpts,\n        servername: servername && net.isIP(servername) ? undefined : servername,\n      });\n    } else {\n      debugLog('Creating `net.Socket`: %o', this.connectOpts);\n      socket = net.connect(this.connectOpts);\n    }\n\n    const headers =\n      typeof this.proxyHeaders === 'function' ? this.proxyHeaders() : { ...this.proxyHeaders };\n    const host = net.isIPv6(opts.host) ? `[${opts.host}]` : opts.host;\n    let payload = `CONNECT ${host}:${opts.port} HTTP/1.1\\r\\n`;\n\n    // Inject the `Proxy-Authorization` header if necessary.\n    if (proxy.username || proxy.password) {\n      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;\n      headers['Proxy-Authorization'] = `Basic ${Buffer.from(auth).toString('base64')}`;\n    }\n\n    headers.Host = `${host}:${opts.port}`;\n\n    if (!headers['Proxy-Connection']) {\n      headers['Proxy-Connection'] = this.keepAlive ? 'Keep-Alive' : 'close';\n    }\n    for (const name of Object.keys(headers)) {\n      payload += `${name}: ${headers[name]}\\r\\n`;\n    }\n\n    const proxyResponsePromise = parseProxyResponse.parseProxyResponse(socket);\n\n    socket.write(`${payload}\\r\\n`);\n\n    const { connect, buffered } = await proxyResponsePromise;\n    req.emit('proxyConnect', connect);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not EventEmitter in Node types\n    this.emit('proxyConnect', connect, req);\n\n    if (connect.statusCode === 200) {\n      req.once('socket', resume);\n\n      if (opts.secureEndpoint) {\n        // The proxy is connecting to a TLS server, so upgrade\n        // this socket connection to a TLS connection.\n        debugLog('Upgrading socket connection to TLS');\n        const servername = opts.servername || opts.host;\n        return tls.connect({\n          ...omit(opts, 'host', 'path', 'port'),\n          socket,\n          servername: net.isIP(servername) ? undefined : servername,\n        });\n      }\n\n      return socket;\n    }\n\n    // Some other status code that's not 200... need to re-play the HTTP\n    // header \"data\" events onto the socket once the HTTP machinery is\n    // attached so that the node core `http` can parse and handle the\n    // error status code.\n\n    // Close the original socket, and a new \"fake\" socket is returned\n    // instead, so that the proxy doesn't get the HTTP request\n    // written to it (which may contain `Authorization` headers or other\n    // sensitive data).\n    //\n    // See: https://hackerone.com/reports/541502\n    socket.destroy();\n\n    const fakeSocket = new net.Socket({ writable: false });\n    fakeSocket.readable = true;\n\n    // Need to wait for the \"socket\" event to re-play the \"data\" events.\n    req.once('socket', (s) => {\n      debugLog('Replaying proxy buffer for failed request');\n      // Replay the \"buffered\" Buffer onto the fake `socket`, since at\n      // this point the HTTP module machinery has been hooked up for\n      // the user.\n      s.push(buffered);\n      s.push(null);\n    });\n\n    return fakeSocket;\n  }\n} HttpsProxyAgent.__initStatic();\n\nfunction resume(socket) {\n  socket.resume();\n}\n\nfunction omit(\n  obj,\n  ...keys\n)\n\n {\n  const ret = {}\n\n;\n  let key;\n  for (key in obj) {\n    if (!keys.includes(key)) {\n      ret[key] = obj[key];\n    }\n  }\n  return ret;\n}\n\nexports.HttpsProxyAgent = HttpsProxyAgent;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/proxy/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/proxy/parse-proxy-response.js":
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/proxy/parse-proxy-response.js ***!
  \********************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\nfunction debugLog(...args) {\n  core.debug.log('[https-proxy-agent:parse-proxy-response]', ...args);\n}\n\nfunction parseProxyResponse(socket) {\n  return new Promise((resolve, reject) => {\n    // we need to buffer any HTTP traffic that happens with the proxy before we get\n    // the CONNECT response, so that if the response is anything other than an \"200\"\n    // response code, then we can re-play the \"data\" events on the socket once the\n    // HTTP parser is hooked up...\n    let buffersLength = 0;\n    const buffers = [];\n\n    function read() {\n      const b = socket.read();\n      if (b) ondata(b);\n      else socket.once('readable', read);\n    }\n\n    function cleanup() {\n      socket.removeListener('end', onend);\n      socket.removeListener('error', onerror);\n      socket.removeListener('readable', read);\n    }\n\n    function onend() {\n      cleanup();\n      debugLog('onend');\n      reject(new Error('Proxy connection ended before receiving CONNECT response'));\n    }\n\n    function onerror(err) {\n      cleanup();\n      debugLog('onerror %o', err);\n      reject(err);\n    }\n\n    function ondata(b) {\n      buffers.push(b);\n      buffersLength += b.length;\n\n      const buffered = Buffer.concat(buffers, buffersLength);\n      const endOfHeaders = buffered.indexOf('\\r\\n\\r\\n');\n\n      if (endOfHeaders === -1) {\n        // keep buffering\n        debugLog('have not received end of HTTP headers yet...');\n        read();\n        return;\n      }\n\n      const headerParts = buffered.subarray(0, endOfHeaders).toString('ascii').split('\\r\\n');\n      const firstLine = headerParts.shift();\n      if (!firstLine) {\n        socket.destroy();\n        return reject(new Error('No header received from proxy CONNECT response'));\n      }\n      const firstLineParts = firstLine.split(' ');\n      const statusCode = +(firstLineParts[1] || 0);\n      const statusText = firstLineParts.slice(2).join(' ');\n      const headers = {};\n      for (const header of headerParts) {\n        if (!header) continue;\n        const firstColon = header.indexOf(':');\n        if (firstColon === -1) {\n          socket.destroy();\n          return reject(new Error(`Invalid header from proxy CONNECT response: \"${header}\"`));\n        }\n        const key = header.slice(0, firstColon).toLowerCase();\n        const value = header.slice(firstColon + 1).trimStart();\n        const current = headers[key];\n        if (typeof current === 'string') {\n          headers[key] = [current, value];\n        } else if (Array.isArray(current)) {\n          current.push(value);\n        } else {\n          headers[key] = value;\n        }\n      }\n      debugLog('got proxy server response: %o %o', firstLine, headers);\n      cleanup();\n      resolve({\n        connect: {\n          statusCode,\n          statusText,\n          headers,\n        },\n        buffered,\n      });\n    }\n\n    socket.on('error', onerror);\n    socket.on('end', onend);\n\n    read();\n  });\n}\n\nexports.parseProxyResponse = parseProxyResponse;\n//# sourceMappingURL=parse-proxy-response.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9wcm94eS9wYXJzZS1wcm94eS1yZXNwb25zZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxhQUFhLG1CQUFPLENBQUMsNkhBQWM7O0FBRW5DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRixPQUFPO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBLDBCQUEwQjtBQUMxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvcHJveHkvcGFyc2UtcHJveHktcmVzcG9uc2UuanM/YjZkOCJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG5mdW5jdGlvbiBkZWJ1Z0xvZyguLi5hcmdzKSB7XG4gIGNvcmUuZGVidWcubG9nKCdbaHR0cHMtcHJveHktYWdlbnQ6cGFyc2UtcHJveHktcmVzcG9uc2VdJywgLi4uYXJncyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUHJveHlSZXNwb25zZShzb2NrZXQpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAvLyB3ZSBuZWVkIHRvIGJ1ZmZlciBhbnkgSFRUUCB0cmFmZmljIHRoYXQgaGFwcGVucyB3aXRoIHRoZSBwcm94eSBiZWZvcmUgd2UgZ2V0XG4gICAgLy8gdGhlIENPTk5FQ1QgcmVzcG9uc2UsIHNvIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGFueXRoaW5nIG90aGVyIHRoYW4gYW4gXCIyMDBcIlxuICAgIC8vIHJlc3BvbnNlIGNvZGUsIHRoZW4gd2UgY2FuIHJlLXBsYXkgdGhlIFwiZGF0YVwiIGV2ZW50cyBvbiB0aGUgc29ja2V0IG9uY2UgdGhlXG4gICAgLy8gSFRUUCBwYXJzZXIgaXMgaG9va2VkIHVwLi4uXG4gICAgbGV0IGJ1ZmZlcnNMZW5ndGggPSAwO1xuICAgIGNvbnN0IGJ1ZmZlcnMgPSBbXTtcblxuICAgIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICBjb25zdCBiID0gc29ja2V0LnJlYWQoKTtcbiAgICAgIGlmIChiKSBvbmRhdGEoYik7XG4gICAgICBlbHNlIHNvY2tldC5vbmNlKCdyZWFkYWJsZScsIHJlYWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICBzb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKTtcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcigncmVhZGFibGUnLCByZWFkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVuZCgpIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIGRlYnVnTG9nKCdvbmVuZCcpO1xuICAgICAgcmVqZWN0KG5ldyBFcnJvcignUHJveHkgY29ubmVjdGlvbiBlbmRlZCBiZWZvcmUgcmVjZWl2aW5nIENPTk5FQ1QgcmVzcG9uc2UnKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lcnJvcihlcnIpIHtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIGRlYnVnTG9nKCdvbmVycm9yICVvJywgZXJyKTtcbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uZGF0YShiKSB7XG4gICAgICBidWZmZXJzLnB1c2goYik7XG4gICAgICBidWZmZXJzTGVuZ3RoICs9IGIubGVuZ3RoO1xuXG4gICAgICBjb25zdCBidWZmZXJlZCA9IEJ1ZmZlci5jb25jYXQoYnVmZmVycywgYnVmZmVyc0xlbmd0aCk7XG4gICAgICBjb25zdCBlbmRPZkhlYWRlcnMgPSBidWZmZXJlZC5pbmRleE9mKCdcXHJcXG5cXHJcXG4nKTtcblxuICAgICAgaWYgKGVuZE9mSGVhZGVycyA9PT0gLTEpIHtcbiAgICAgICAgLy8ga2VlcCBidWZmZXJpbmdcbiAgICAgICAgZGVidWdMb2coJ2hhdmUgbm90IHJlY2VpdmVkIGVuZCBvZiBIVFRQIGhlYWRlcnMgeWV0Li4uJyk7XG4gICAgICAgIHJlYWQoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBoZWFkZXJQYXJ0cyA9IGJ1ZmZlcmVkLnN1YmFycmF5KDAsIGVuZE9mSGVhZGVycykudG9TdHJpbmcoJ2FzY2lpJykuc3BsaXQoJ1xcclxcbicpO1xuICAgICAgY29uc3QgZmlyc3RMaW5lID0gaGVhZGVyUGFydHMuc2hpZnQoKTtcbiAgICAgIGlmICghZmlyc3RMaW5lKSB7XG4gICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgIHJldHVybiByZWplY3QobmV3IEVycm9yKCdObyBoZWFkZXIgcmVjZWl2ZWQgZnJvbSBwcm94eSBDT05ORUNUIHJlc3BvbnNlJykpO1xuICAgICAgfVxuICAgICAgY29uc3QgZmlyc3RMaW5lUGFydHMgPSBmaXJzdExpbmUuc3BsaXQoJyAnKTtcbiAgICAgIGNvbnN0IHN0YXR1c0NvZGUgPSArKGZpcnN0TGluZVBhcnRzWzFdIHx8IDApO1xuICAgICAgY29uc3Qgc3RhdHVzVGV4dCA9IGZpcnN0TGluZVBhcnRzLnNsaWNlKDIpLmpvaW4oJyAnKTtcbiAgICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcbiAgICAgIGZvciAoY29uc3QgaGVhZGVyIG9mIGhlYWRlclBhcnRzKSB7XG4gICAgICAgIGlmICghaGVhZGVyKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgZmlyc3RDb2xvbiA9IGhlYWRlci5pbmRleE9mKCc6Jyk7XG4gICAgICAgIGlmIChmaXJzdENvbG9uID09PSAtMSkge1xuICAgICAgICAgIHNvY2tldC5kZXN0cm95KCk7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgRXJyb3IoYEludmFsaWQgaGVhZGVyIGZyb20gcHJveHkgQ09OTkVDVCByZXNwb25zZTogXCIke2hlYWRlcn1cImApKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBrZXkgPSBoZWFkZXIuc2xpY2UoMCwgZmlyc3RDb2xvbikudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBoZWFkZXIuc2xpY2UoZmlyc3RDb2xvbiArIDEpLnRyaW1TdGFydCgpO1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gaGVhZGVyc1trZXldO1xuICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaGVhZGVyc1trZXldID0gW2N1cnJlbnQsIHZhbHVlXTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG4gICAgICAgICAgY3VycmVudC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoZWFkZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGVidWdMb2coJ2dvdCBwcm94eSBzZXJ2ZXIgcmVzcG9uc2U6ICVvICVvJywgZmlyc3RMaW5lLCBoZWFkZXJzKTtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIHJlc29sdmUoe1xuICAgICAgICBjb25uZWN0OiB7XG4gICAgICAgICAgc3RhdHVzQ29kZSxcbiAgICAgICAgICBzdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgIH0sXG4gICAgICAgIGJ1ZmZlcmVkLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgc29ja2V0Lm9uKCdlcnJvcicsIG9uZXJyb3IpO1xuICAgIHNvY2tldC5vbignZW5kJywgb25lbmQpO1xuXG4gICAgcmVhZCgpO1xuICB9KTtcbn1cblxuZXhwb3J0cy5wYXJzZVByb3h5UmVzcG9uc2UgPSBwYXJzZVByb3h5UmVzcG9uc2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZS1wcm94eS1yZXNwb25zZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/proxy/parse-proxy-response.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/api.js":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/api.js ***!
  \*************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst module$1 = __webpack_require__(/*! ../utils/module.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/module.js\");\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nfunction getSentryRelease(fallback) {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (core.GLOBAL_OBJ.SENTRY_RELEASE?.id) {\n    return core.GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Railway - https://docs.railway.app/reference/variables#git-variables\n    process.env['RAILWAY_GIT_COMMIT_SHA'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n\n/** Node.js stack parser */\nconst defaultStackParser = core.createStackParser(core.nodeStackLineParser(module$1.createGetModuleFromFilename()));\n\nexports.defaultStackParser = defaultStackParser;\nexports.getSentryRelease = getSentryRelease;\n//# sourceMappingURL=api.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/api.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/client.js":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/client.js ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst os = __webpack_require__(/*! node:os */ \"node:os\");\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_5qhoifmlgqufioqeczcfzlo2z4/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst worker_threads = __webpack_require__(/*! worker_threads */ \"worker_threads\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/debug-build.js\");\n\nconst DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS = 60000; // 60s was chosen arbitrarily\n\n/** A client for using Sentry with Node & OpenTelemetry. */\nclass NodeClient extends core.ServerRuntimeClient {\n\n   constructor(options) {\n    const serverName =\n      options.includeServerName === false\n        ? undefined\n        : options.serverName || global.process.env.SENTRY_NAME || os.hostname();\n\n    const clientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: { name: 'node', version: global.process.version },\n      serverName,\n    };\n\n    if (options.openTelemetryInstrumentations) {\n      instrumentation.registerInstrumentations({\n        instrumentations: options.openTelemetryInstrumentations,\n      });\n    }\n\n    core.applySdkMetadata(clientOptions, 'node');\n\n    core.debug.log(`Initializing Sentry: process: ${process.pid}, thread: ${worker_threads.isMainThread ? 'main' : `worker-${worker_threads.threadId}`}.`);\n\n    super(clientOptions);\n\n    if (this.getOptions().enableLogs) {\n      this._logOnExitFlushListener = () => {\n        core._INTERNAL_flushLogsBuffer(this);\n      };\n\n      if (serverName) {\n        this.on('beforeCaptureLog', log => {\n          log.attributes = {\n            ...log.attributes,\n            'server.address': serverName,\n          };\n        });\n      }\n\n      process.on('beforeExit', this._logOnExitFlushListener);\n    }\n  }\n\n  /** Get the OTEL tracer. */\n   get tracer() {\n    if (this._tracer) {\n      return this._tracer;\n    }\n\n    const name = '@sentry/node';\n    const version = core.SDK_VERSION;\n    const tracer = api.trace.getTracer(name, version);\n    this._tracer = tracer;\n\n    return tracer;\n  }\n\n  /** @inheritDoc */\n  // @ts-expect-error - PromiseLike is a subset of Promise\n   async flush(timeout) {\n    await this.traceProvider?.forceFlush();\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n\n  /** @inheritDoc */\n  // @ts-expect-error - PromiseLike is a subset of Promise\n   async close(timeout) {\n    if (this._clientReportInterval) {\n      clearInterval(this._clientReportInterval);\n    }\n\n    if (this._clientReportOnExitFlushListener) {\n      process.off('beforeExit', this._clientReportOnExitFlushListener);\n    }\n\n    if (this._logOnExitFlushListener) {\n      process.off('beforeExit', this._logOnExitFlushListener);\n    }\n\n    const allEventsSent = await super.close(timeout);\n    if (this.traceProvider) {\n      await this.traceProvider.shutdown();\n    }\n\n    return allEventsSent;\n  }\n\n  /**\n   * Will start tracking client reports for this client.\n   *\n   * NOTICE: This method will create an interval that is periodically called and attach a `process.on('beforeExit')`\n   * hook. To clean up these resources, call `.close()` when you no longer intend to use the client. Not doing so will\n   * result in a memory leak.\n   */\n  // The reason client reports need to be manually activated with this method instead of just enabling them in a\n  // constructor, is that if users periodically and unboundedly create new clients, we will create more and more\n  // intervals and beforeExit listeners, thus leaking memory. In these situations, users are required to call\n  // `client.close()` in order to dispose of the acquired resources.\n  // We assume that calling this method in Sentry.init() is a sensible default, because calling Sentry.init() over and\n  // over again would also result in memory leaks.\n  // Note: We have experimented with using `FinalizationRegisty` to clear the interval when the client is garbage\n  // collected, but it did not work, because the cleanup function never got called.\n   startClientReportTracking() {\n    const clientOptions = this.getOptions();\n    if (clientOptions.sendClientReports) {\n      this._clientReportOnExitFlushListener = () => {\n        this._flushOutcomes();\n      };\n\n      this._clientReportInterval = setInterval(() => {\n        debugBuild.DEBUG_BUILD && core.debug.log('Flushing client reports based on interval.');\n        this._flushOutcomes();\n      }, clientOptions.clientReportFlushInterval ?? DEFAULT_CLIENT_REPORT_FLUSH_INTERVAL_MS)\n        // Unref is critical for not preventing the process from exiting because the interval is active.\n        .unref();\n\n      process.on('beforeExit', this._clientReportOnExitFlushListener);\n    }\n  }\n\n  /** Custom implementation for OTEL, so we can handle scope-span linking. */\n   _getTraceInfoFromScope(\n    scope,\n  ) {\n    if (!scope) {\n      return [undefined, undefined];\n    }\n\n    return opentelemetry.getTraceContextForScope(this, scope);\n  }\n}\n\nexports.NodeClient = NodeClient;\n//# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/client.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/esmLoader.js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/esmLoader.js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst importInTheMiddle = __webpack_require__(/*! import-in-the-middle */ \"(instrument)/../../node_modules/.pnpm/import-in-the-middle@1.15.0/node_modules/import-in-the-middle/index.js\");\nconst moduleModule = __webpack_require__(/*! module */ \"module\");\nconst detection = __webpack_require__(/*! ../utils/detection.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/detection.js\");\n\nvar _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;\n/**\n * Initialize the ESM loader - This method is private and not part of the public\n * API.\n *\n * @ignore\n */\nfunction initializeEsmLoader() {\n  if (!detection.supportsEsmLoaderHooks()) {\n    return;\n  }\n\n  if (!core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered) {\n    core.GLOBAL_OBJ._sentryEsmLoaderHookRegistered = true;\n\n    try {\n      const { addHookMessagePort } = importInTheMiddle.createAddHookMessageChannel();\n      // @ts-expect-error register is available in these versions\n      moduleModule.register('import-in-the-middle/hook.mjs', (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/esmLoader.js', document.baseURI).href)), {\n        data: { addHookMessagePort, include: [] },\n        transferList: [addHookMessagePort],\n      });\n    } catch (error) {\n      core.debug.warn(\"Failed to register 'import-in-the-middle' hook\", error);\n    }\n  }\n}\n\nexports.initializeEsmLoader = initializeEsmLoader;\n//# sourceMappingURL=esmLoader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9zZGsvZXNtTG9hZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQywwQkFBMEIsbUJBQU8sQ0FBQywwSUFBc0I7QUFDeEQscUJBQXFCLG1CQUFPLENBQUMsc0JBQVE7QUFDckMsa0JBQWtCLG1CQUFPLENBQUMseVBBQXVCOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxjQUFjLHFCQUFxQjtBQUNuQztBQUNBLGdHQUFnRyxxREFBaUM7QUFDakksZ0JBQWdCLGlDQUFpQztBQUNqRDtBQUNBLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9zZGsvZXNtTG9hZGVyLmpzP2QzNmMiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGltcG9ydEluVGhlTWlkZGxlID0gcmVxdWlyZSgnaW1wb3J0LWluLXRoZS1taWRkbGUnKTtcbmNvbnN0IG1vZHVsZU1vZHVsZSA9IHJlcXVpcmUoJ21vZHVsZScpO1xuY29uc3QgZGV0ZWN0aW9uID0gcmVxdWlyZSgnLi4vdXRpbHMvZGV0ZWN0aW9uLmpzJyk7XG5cbnZhciBfZG9jdW1lbnRDdXJyZW50U2NyaXB0ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgOiBudWxsO1xuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBFU00gbG9hZGVyIC0gVGhpcyBtZXRob2QgaXMgcHJpdmF0ZSBhbmQgbm90IHBhcnQgb2YgdGhlIHB1YmxpY1xuICogQVBJLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuZnVuY3Rpb24gaW5pdGlhbGl6ZUVzbUxvYWRlcigpIHtcbiAgaWYgKCFkZXRlY3Rpb24uc3VwcG9ydHNFc21Mb2FkZXJIb29rcygpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFjb3JlLkdMT0JBTF9PQkouX3NlbnRyeUVzbUxvYWRlckhvb2tSZWdpc3RlcmVkKSB7XG4gICAgY29yZS5HTE9CQUxfT0JKLl9zZW50cnlFc21Mb2FkZXJIb29rUmVnaXN0ZXJlZCA9IHRydWU7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBhZGRIb29rTWVzc2FnZVBvcnQgfSA9IGltcG9ydEluVGhlTWlkZGxlLmNyZWF0ZUFkZEhvb2tNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciByZWdpc3RlciBpcyBhdmFpbGFibGUgaW4gdGhlc2UgdmVyc2lvbnNcbiAgICAgIG1vZHVsZU1vZHVsZS5yZWdpc3RlcignaW1wb3J0LWluLXRoZS1taWRkbGUvaG9vay5tanMnLCAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyA/IHJlcXVpcmUoJ3UnICsgJ3JsJykucGF0aFRvRmlsZVVSTChfX2ZpbGVuYW1lKS5ocmVmIDogKF9kb2N1bWVudEN1cnJlbnRTY3JpcHQgJiYgX2RvY3VtZW50Q3VycmVudFNjcmlwdC50YWdOYW1lLnRvVXBwZXJDYXNlKCkgPT09ICdTQ1JJUFQnICYmIF9kb2N1bWVudEN1cnJlbnRTY3JpcHQuc3JjIHx8IG5ldyBVUkwoJ3Nkay9lc21Mb2FkZXIuanMnLCBkb2N1bWVudC5iYXNlVVJJKS5ocmVmKSksIHtcbiAgICAgICAgZGF0YTogeyBhZGRIb29rTWVzc2FnZVBvcnQsIGluY2x1ZGU6IFtdIH0sXG4gICAgICAgIHRyYW5zZmVyTGlzdDogW2FkZEhvb2tNZXNzYWdlUG9ydF0sXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29yZS5kZWJ1Zy53YXJuKFwiRmFpbGVkIHRvIHJlZ2lzdGVyICdpbXBvcnQtaW4tdGhlLW1pZGRsZScgaG9va1wiLCBlcnJvcik7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuaW5pdGlhbGl6ZUVzbUxvYWRlciA9IGluaXRpYWxpemVFc21Mb2FkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lc21Mb2FkZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/esmLoader.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/index.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/index.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_5qhoifmlgqufioqeczcfzlo2z4/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/debug-build.js\");\nconst childProcess = __webpack_require__(/*! ../integrations/childProcess.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/childProcess.js\");\nconst context = __webpack_require__(/*! ../integrations/context.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/context.js\");\nconst contextlines = __webpack_require__(/*! ../integrations/contextlines.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/contextlines.js\");\nconst index = __webpack_require__(/*! ../integrations/http/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/http/index.js\");\nconst index$2 = __webpack_require__(/*! ../integrations/local-variables/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/local-variables/index.js\");\nconst modules = __webpack_require__(/*! ../integrations/modules.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/modules.js\");\nconst index$1 = __webpack_require__(/*! ../integrations/node-fetch/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/node-fetch/index.js\");\nconst onuncaughtexception = __webpack_require__(/*! ../integrations/onuncaughtexception.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/onuncaughtexception.js\");\nconst onunhandledrejection = __webpack_require__(/*! ../integrations/onunhandledrejection.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/onunhandledrejection.js\");\nconst processSession = __webpack_require__(/*! ../integrations/processSession.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/processSession.js\");\nconst spotlight = __webpack_require__(/*! ../integrations/spotlight.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/spotlight.js\");\nconst systemError = __webpack_require__(/*! ../integrations/systemError.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/integrations/systemError.js\");\nconst http = __webpack_require__(/*! ../transports/http.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/transports/http.js\");\nconst detection = __webpack_require__(/*! ../utils/detection.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/detection.js\");\nconst envToBool = __webpack_require__(/*! ../utils/envToBool.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/envToBool.js\");\nconst api = __webpack_require__(/*! ./api.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/api.js\");\nconst client = __webpack_require__(/*! ./client.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/client.js\");\nconst esmLoader = __webpack_require__(/*! ./esmLoader.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/esmLoader.js\");\n\n/**\n * Get default integrations for the Node-Core SDK.\n */\nfunction getDefaultIntegrations() {\n  return [\n    // Common\n    // TODO(v11): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`\n    // eslint-disable-next-line deprecation/deprecation\n    core.inboundFiltersIntegration(),\n    core.functionToStringIntegration(),\n    core.linkedErrorsIntegration(),\n    core.requestDataIntegration(),\n    systemError.systemErrorIntegration(),\n    // Native Wrappers\n    core.consoleIntegration(),\n    index.httpIntegration(),\n    index$1.nativeNodeFetchIntegration(),\n    // Global Handlers\n    onuncaughtexception.onUncaughtExceptionIntegration(),\n    onunhandledrejection.onUnhandledRejectionIntegration(),\n    // Event Info\n    contextlines.contextLinesIntegration(),\n    index$2.localVariablesIntegration(),\n    context.nodeContextIntegration(),\n    childProcess.childProcessIntegration(),\n    processSession.processSessionIntegration(),\n    modules.modulesIntegration(),\n  ];\n}\n\n/**\n * Initialize Sentry for Node.\n */\nfunction init(options = {}) {\n  return _init(options, getDefaultIntegrations);\n}\n\n/**\n * Initialize Sentry for Node, without any integrations added by default.\n */\nfunction initWithoutDefaultIntegrations(options = {}) {\n  return _init(options, () => []);\n}\n\n/**\n * Initialize Sentry for Node, without performance instrumentation.\n */\nfunction _init(\n  _options = {},\n  getDefaultIntegrationsImpl,\n) {\n  const options = getClientOptions(_options, getDefaultIntegrationsImpl);\n\n  if (options.debug === true) {\n    if (debugBuild.DEBUG_BUILD) {\n      core.debug.enable();\n    } else {\n      // use `console.warn` rather than `debug.warn` since by non-debug bundles have all `debug.x` statements stripped\n      core.consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n\n  if (options.registerEsmLoaderHooks !== false) {\n    esmLoader.initializeEsmLoader();\n  }\n\n  opentelemetry.setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = core.getCurrentScope();\n  scope.update(options.initialScope);\n\n  if (options.spotlight && !options.integrations.some(({ name }) => name === spotlight.INTEGRATION_NAME)) {\n    options.integrations.push(\n      spotlight.spotlightIntegration({\n        sidecarUrl: typeof options.spotlight === 'string' ? options.spotlight : undefined,\n      }),\n    );\n  }\n\n  core.applySdkMetadata(options, 'node-core');\n\n  const client$1 = new client.NodeClient(options);\n  // The client is on the current scope, from where it generally is inherited\n  core.getCurrentScope().setClient(client$1);\n\n  client$1.init();\n\n  core.GLOBAL_OBJ._sentryInjectLoaderHookRegister?.();\n\n  core.debug.log(`SDK initialized from ${detection.isCjs() ? 'CommonJS' : 'ESM'}`);\n\n  client$1.startClientReportTracking();\n\n  updateScopeFromEnvVariables();\n\n  opentelemetry.enhanceDscWithOpenTelemetryRootSpanName(client$1);\n  opentelemetry.setupEventContextTrace(client$1);\n\n  return client$1;\n}\n\n/**\n * Validate that your OpenTelemetry setup is correct.\n */\nfunction validateOpenTelemetrySetup() {\n  if (!debugBuild.DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = opentelemetry.openTelemetrySetupCheck();\n\n  const required = ['SentryContextManager', 'SentryPropagator'];\n\n  if (core.hasSpansEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      core.debug.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes('SentrySampler')) {\n    core.debug.warn(\n      'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.',\n    );\n  }\n}\n\nfunction getClientOptions(\n  options,\n  getDefaultIntegrationsImpl,\n) {\n  const release = getRelease(options.release);\n  const spotlight =\n    options.spotlight ?? envToBool.envToBool(process.env.SENTRY_SPOTLIGHT, { strict: true }) ?? process.env.SENTRY_SPOTLIGHT;\n  const tracesSampleRate = getTracesSampleRate(options.tracesSampleRate);\n\n  const mergedOptions = {\n    ...options,\n    dsn: options.dsn ?? process.env.SENTRY_DSN,\n    environment: options.environment ?? process.env.SENTRY_ENVIRONMENT,\n    sendClientReports: options.sendClientReports ?? true,\n    transport: options.transport ?? http.makeNodeTransport,\n    stackParser: core.stackParserFromStackParserOptions(options.stackParser || api.defaultStackParser),\n    release,\n    tracesSampleRate,\n    spotlight,\n    debug: envToBool.envToBool(options.debug ?? process.env.SENTRY_DEBUG),\n  };\n\n  const integrations = options.integrations;\n  const defaultIntegrations = options.defaultIntegrations ?? getDefaultIntegrationsImpl(mergedOptions);\n\n  return {\n    ...mergedOptions,\n    integrations: core.getIntegrationsToSetup({\n      defaultIntegrations,\n      integrations,\n    }),\n  };\n}\n\nfunction getRelease(release) {\n  if (release !== undefined) {\n    return release;\n  }\n\n  const detectedRelease = api.getSentryRelease();\n  if (detectedRelease !== undefined) {\n    return detectedRelease;\n  }\n\n  return undefined;\n}\n\nfunction getTracesSampleRate(tracesSampleRate) {\n  if (tracesSampleRate !== undefined) {\n    return tracesSampleRate;\n  }\n\n  const sampleRateFromEnv = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (!sampleRateFromEnv) {\n    return undefined;\n  }\n\n  const parsed = parseFloat(sampleRateFromEnv);\n  return isFinite(parsed) ? parsed : undefined;\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables() {\n  if (envToBool.envToBool(process.env.SENTRY_USE_ENVIRONMENT) !== false) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const propagationContext = core.propagationContextFromHeaders(sentryTraceEnv, baggageEnv);\n    core.getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\n\nexports.getDefaultIntegrations = getDefaultIntegrations;\nexports.init = init;\nexports.initWithoutDefaultIntegrations = initWithoutDefaultIntegrations;\nexports.validateOpenTelemetrySetup = validateOpenTelemetrySetup;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9zZGsvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLHNCQUFzQixtQkFBTyxDQUFDLG1QQUF1QjtBQUNyRCxtQkFBbUIsbUJBQU8sQ0FBQyxpUEFBbUI7QUFDOUMscUJBQXFCLG1CQUFPLENBQUMsNlFBQWlDO0FBQzlELGdCQUFnQixtQkFBTyxDQUFDLG1RQUE0QjtBQUNwRCxxQkFBcUIsbUJBQU8sQ0FBQyw2UUFBaUM7QUFDOUQsY0FBYyxtQkFBTyxDQUFDLHlRQUErQjtBQUNyRCxnQkFBZ0IsbUJBQU8sQ0FBQywrUkFBMEM7QUFDbEUsZ0JBQWdCLG1CQUFPLENBQUMsbVFBQTRCO0FBQ3BELGdCQUFnQixtQkFBTyxDQUFDLHFSQUFxQztBQUM3RCw0QkFBNEIsbUJBQU8sQ0FBQywyUkFBd0M7QUFDNUUsNkJBQTZCLG1CQUFPLENBQUMsNlJBQXlDO0FBQzlFLHVCQUF1QixtQkFBTyxDQUFDLGlSQUFtQztBQUNsRSxrQkFBa0IsbUJBQU8sQ0FBQyx1UUFBOEI7QUFDeEQsb0JBQW9CLG1CQUFPLENBQUMsMlFBQWdDO0FBQzVELGFBQWEsbUJBQU8sQ0FBQyx5UEFBdUI7QUFDNUMsa0JBQWtCLG1CQUFPLENBQUMseVBBQXVCO0FBQ2pELGtCQUFrQixtQkFBTyxDQUFDLHlQQUF1QjtBQUNqRCxZQUFZLG1CQUFPLENBQUMsb09BQVU7QUFDOUIsZUFBZSxtQkFBTyxDQUFDLDBPQUFhO0FBQ3BDLGtCQUFrQixtQkFBTyxDQUFDLGdQQUFnQjs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEseURBQXlELE1BQU07QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLHlDQUF5Qyx1Q0FBdUM7O0FBRWhGOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLEVBQUU7QUFDcEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsY0FBYztBQUMzRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw4QkFBOEI7QUFDOUIsWUFBWTtBQUNaLHNDQUFzQztBQUN0QyxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZS1jb3JlQDEwLjE5LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wX0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYXN5bmMtaG9va3NAMi4xLjBfQF8yZ2RocjZrdmRwd2huamRpb3lta2I0ZGJndS9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL3Nkay9pbmRleC5qcz8zZmE3Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5jb25zdCBvcGVudGVsZW1ldHJ5ID0gcmVxdWlyZSgnQHNlbnRyeS9vcGVudGVsZW1ldHJ5Jyk7XG5jb25zdCBkZWJ1Z0J1aWxkID0gcmVxdWlyZSgnLi4vZGVidWctYnVpbGQuanMnKTtcbmNvbnN0IGNoaWxkUHJvY2VzcyA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9jaGlsZFByb2Nlc3MuanMnKTtcbmNvbnN0IGNvbnRleHQgPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvY29udGV4dC5qcycpO1xuY29uc3QgY29udGV4dGxpbmVzID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL2NvbnRleHRsaW5lcy5qcycpO1xuY29uc3QgaW5kZXggPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvaHR0cC9pbmRleC5qcycpO1xuY29uc3QgaW5kZXgkMiA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9sb2NhbC12YXJpYWJsZXMvaW5kZXguanMnKTtcbmNvbnN0IG1vZHVsZXMgPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvbW9kdWxlcy5qcycpO1xuY29uc3QgaW5kZXgkMSA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9ub2RlLWZldGNoL2luZGV4LmpzJyk7XG5jb25zdCBvbnVuY2F1Z2h0ZXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL29udW5jYXVnaHRleGNlcHRpb24uanMnKTtcbmNvbnN0IG9udW5oYW5kbGVkcmVqZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL29udW5oYW5kbGVkcmVqZWN0aW9uLmpzJyk7XG5jb25zdCBwcm9jZXNzU2Vzc2lvbiA9IHJlcXVpcmUoJy4uL2ludGVncmF0aW9ucy9wcm9jZXNzU2Vzc2lvbi5qcycpO1xuY29uc3Qgc3BvdGxpZ2h0ID0gcmVxdWlyZSgnLi4vaW50ZWdyYXRpb25zL3Nwb3RsaWdodC5qcycpO1xuY29uc3Qgc3lzdGVtRXJyb3IgPSByZXF1aXJlKCcuLi9pbnRlZ3JhdGlvbnMvc3lzdGVtRXJyb3IuanMnKTtcbmNvbnN0IGh0dHAgPSByZXF1aXJlKCcuLi90cmFuc3BvcnRzL2h0dHAuanMnKTtcbmNvbnN0IGRldGVjdGlvbiA9IHJlcXVpcmUoJy4uL3V0aWxzL2RldGVjdGlvbi5qcycpO1xuY29uc3QgZW52VG9Cb29sID0gcmVxdWlyZSgnLi4vdXRpbHMvZW52VG9Cb29sLmpzJyk7XG5jb25zdCBhcGkgPSByZXF1aXJlKCcuL2FwaS5qcycpO1xuY29uc3QgY2xpZW50ID0gcmVxdWlyZSgnLi9jbGllbnQuanMnKTtcbmNvbnN0IGVzbUxvYWRlciA9IHJlcXVpcmUoJy4vZXNtTG9hZGVyLmpzJyk7XG5cbi8qKlxuICogR2V0IGRlZmF1bHQgaW50ZWdyYXRpb25zIGZvciB0aGUgTm9kZS1Db3JlIFNESy5cbiAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdEludGVncmF0aW9ucygpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBDb21tb25cbiAgICAvLyBUT0RPKHYxMSk6IFJlcGxhY2Ugd2l0aCBgZXZlbnRGaWx0ZXJzSW50ZWdyYXRpb25gIG9uY2Ugd2UgcmVtb3ZlIHRoZSBkZXByZWNhdGVkIGBpbmJvdW5kRmlsdGVyc0ludGVncmF0aW9uYFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZXByZWNhdGlvbi9kZXByZWNhdGlvblxuICAgIGNvcmUuaW5ib3VuZEZpbHRlcnNJbnRlZ3JhdGlvbigpLFxuICAgIGNvcmUuZnVuY3Rpb25Ub1N0cmluZ0ludGVncmF0aW9uKCksXG4gICAgY29yZS5saW5rZWRFcnJvcnNJbnRlZ3JhdGlvbigpLFxuICAgIGNvcmUucmVxdWVzdERhdGFJbnRlZ3JhdGlvbigpLFxuICAgIHN5c3RlbUVycm9yLnN5c3RlbUVycm9ySW50ZWdyYXRpb24oKSxcbiAgICAvLyBOYXRpdmUgV3JhcHBlcnNcbiAgICBjb3JlLmNvbnNvbGVJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4Lmh0dHBJbnRlZ3JhdGlvbigpLFxuICAgIGluZGV4JDEubmF0aXZlTm9kZUZldGNoSW50ZWdyYXRpb24oKSxcbiAgICAvLyBHbG9iYWwgSGFuZGxlcnNcbiAgICBvbnVuY2F1Z2h0ZXhjZXB0aW9uLm9uVW5jYXVnaHRFeGNlcHRpb25JbnRlZ3JhdGlvbigpLFxuICAgIG9udW5oYW5kbGVkcmVqZWN0aW9uLm9uVW5oYW5kbGVkUmVqZWN0aW9uSW50ZWdyYXRpb24oKSxcbiAgICAvLyBFdmVudCBJbmZvXG4gICAgY29udGV4dGxpbmVzLmNvbnRleHRMaW5lc0ludGVncmF0aW9uKCksXG4gICAgaW5kZXgkMi5sb2NhbFZhcmlhYmxlc0ludGVncmF0aW9uKCksXG4gICAgY29udGV4dC5ub2RlQ29udGV4dEludGVncmF0aW9uKCksXG4gICAgY2hpbGRQcm9jZXNzLmNoaWxkUHJvY2Vzc0ludGVncmF0aW9uKCksXG4gICAgcHJvY2Vzc1Nlc3Npb24ucHJvY2Vzc1Nlc3Npb25JbnRlZ3JhdGlvbigpLFxuICAgIG1vZHVsZXMubW9kdWxlc0ludGVncmF0aW9uKCksXG4gIF07XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBTZW50cnkgZm9yIE5vZGUuXG4gKi9cbmZ1bmN0aW9uIGluaXQob3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBfaW5pdChvcHRpb25zLCBnZXREZWZhdWx0SW50ZWdyYXRpb25zKTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIFNlbnRyeSBmb3IgTm9kZSwgd2l0aG91dCBhbnkgaW50ZWdyYXRpb25zIGFkZGVkIGJ5IGRlZmF1bHQuXG4gKi9cbmZ1bmN0aW9uIGluaXRXaXRob3V0RGVmYXVsdEludGVncmF0aW9ucyhvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIF9pbml0KG9wdGlvbnMsICgpID0+IFtdKTtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIFNlbnRyeSBmb3IgTm9kZSwgd2l0aG91dCBwZXJmb3JtYW5jZSBpbnN0cnVtZW50YXRpb24uXG4gKi9cbmZ1bmN0aW9uIF9pbml0KFxuICBfb3B0aW9ucyA9IHt9LFxuICBnZXREZWZhdWx0SW50ZWdyYXRpb25zSW1wbCxcbikge1xuICBjb25zdCBvcHRpb25zID0gZ2V0Q2xpZW50T3B0aW9ucyhfb3B0aW9ucywgZ2V0RGVmYXVsdEludGVncmF0aW9uc0ltcGwpO1xuXG4gIGlmIChvcHRpb25zLmRlYnVnID09PSB0cnVlKSB7XG4gICAgaWYgKGRlYnVnQnVpbGQuREVCVUdfQlVJTEQpIHtcbiAgICAgIGNvcmUuZGVidWcuZW5hYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVzZSBgY29uc29sZS53YXJuYCByYXRoZXIgdGhhbiBgZGVidWcud2FybmAgc2luY2UgYnkgbm9uLWRlYnVnIGJ1bmRsZXMgaGF2ZSBhbGwgYGRlYnVnLnhgIHN0YXRlbWVudHMgc3RyaXBwZWRcbiAgICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ1tTZW50cnldIENhbm5vdCBpbml0aWFsaXplIFNESyB3aXRoIGBkZWJ1Z2Agb3B0aW9uIHVzaW5nIGEgbm9uLWRlYnVnIGJ1bmRsZS4nKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGlmIChvcHRpb25zLnJlZ2lzdGVyRXNtTG9hZGVySG9va3MgIT09IGZhbHNlKSB7XG4gICAgZXNtTG9hZGVyLmluaXRpYWxpemVFc21Mb2FkZXIoKTtcbiAgfVxuXG4gIG9wZW50ZWxlbWV0cnkuc2V0T3BlblRlbGVtZXRyeUNvbnRleHRBc3luY0NvbnRleHRTdHJhdGVneSgpO1xuXG4gIGNvbnN0IHNjb3BlID0gY29yZS5nZXRDdXJyZW50U2NvcGUoKTtcbiAgc2NvcGUudXBkYXRlKG9wdGlvbnMuaW5pdGlhbFNjb3BlKTtcblxuICBpZiAob3B0aW9ucy5zcG90bGlnaHQgJiYgIW9wdGlvbnMuaW50ZWdyYXRpb25zLnNvbWUoKHsgbmFtZSB9KSA9PiBuYW1lID09PSBzcG90bGlnaHQuSU5URUdSQVRJT05fTkFNRSkpIHtcbiAgICBvcHRpb25zLmludGVncmF0aW9ucy5wdXNoKFxuICAgICAgc3BvdGxpZ2h0LnNwb3RsaWdodEludGVncmF0aW9uKHtcbiAgICAgICAgc2lkZWNhclVybDogdHlwZW9mIG9wdGlvbnMuc3BvdGxpZ2h0ID09PSAnc3RyaW5nJyA/IG9wdGlvbnMuc3BvdGxpZ2h0IDogdW5kZWZpbmVkLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGNvcmUuYXBwbHlTZGtNZXRhZGF0YShvcHRpb25zLCAnbm9kZS1jb3JlJyk7XG5cbiAgY29uc3QgY2xpZW50JDEgPSBuZXcgY2xpZW50Lk5vZGVDbGllbnQob3B0aW9ucyk7XG4gIC8vIFRoZSBjbGllbnQgaXMgb24gdGhlIGN1cnJlbnQgc2NvcGUsIGZyb20gd2hlcmUgaXQgZ2VuZXJhbGx5IGlzIGluaGVyaXRlZFxuICBjb3JlLmdldEN1cnJlbnRTY29wZSgpLnNldENsaWVudChjbGllbnQkMSk7XG5cbiAgY2xpZW50JDEuaW5pdCgpO1xuXG4gIGNvcmUuR0xPQkFMX09CSi5fc2VudHJ5SW5qZWN0TG9hZGVySG9va1JlZ2lzdGVyPy4oKTtcblxuICBjb3JlLmRlYnVnLmxvZyhgU0RLIGluaXRpYWxpemVkIGZyb20gJHtkZXRlY3Rpb24uaXNDanMoKSA/ICdDb21tb25KUycgOiAnRVNNJ31gKTtcblxuICBjbGllbnQkMS5zdGFydENsaWVudFJlcG9ydFRyYWNraW5nKCk7XG5cbiAgdXBkYXRlU2NvcGVGcm9tRW52VmFyaWFibGVzKCk7XG5cbiAgb3BlbnRlbGVtZXRyeS5lbmhhbmNlRHNjV2l0aE9wZW5UZWxlbWV0cnlSb290U3Bhbk5hbWUoY2xpZW50JDEpO1xuICBvcGVudGVsZW1ldHJ5LnNldHVwRXZlbnRDb250ZXh0VHJhY2UoY2xpZW50JDEpO1xuXG4gIHJldHVybiBjbGllbnQkMTtcbn1cblxuLyoqXG4gKiBWYWxpZGF0ZSB0aGF0IHlvdXIgT3BlblRlbGVtZXRyeSBzZXR1cCBpcyBjb3JyZWN0LlxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZU9wZW5UZWxlbWV0cnlTZXR1cCgpIHtcbiAgaWYgKCFkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgc2V0dXAgPSBvcGVudGVsZW1ldHJ5Lm9wZW5UZWxlbWV0cnlTZXR1cENoZWNrKCk7XG5cbiAgY29uc3QgcmVxdWlyZWQgPSBbJ1NlbnRyeUNvbnRleHRNYW5hZ2VyJywgJ1NlbnRyeVByb3BhZ2F0b3InXTtcblxuICBpZiAoY29yZS5oYXNTcGFuc0VuYWJsZWQoKSkge1xuICAgIHJlcXVpcmVkLnB1c2goJ1NlbnRyeVNwYW5Qcm9jZXNzb3InKTtcbiAgfVxuXG4gIGZvciAoY29uc3QgayBvZiByZXF1aXJlZCkge1xuICAgIGlmICghc2V0dXAuaW5jbHVkZXMoaykpIHtcbiAgICAgIGNvcmUuZGVidWcuZXJyb3IoXG4gICAgICAgIGBZb3UgaGF2ZSB0byBzZXQgdXAgdGhlICR7a30uIFdpdGhvdXQgdGhpcywgdGhlIE9wZW5UZWxlbWV0cnkgJiBTZW50cnkgaW50ZWdyYXRpb24gd2lsbCBub3Qgd29yayBwcm9wZXJseS5gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIXNldHVwLmluY2x1ZGVzKCdTZW50cnlTYW1wbGVyJykpIHtcbiAgICBjb3JlLmRlYnVnLndhcm4oXG4gICAgICAnWW91IGhhdmUgdG8gc2V0IHVwIHRoZSBTZW50cnlTYW1wbGVyLiBXaXRob3V0IHRoaXMsIHRoZSBPcGVuVGVsZW1ldHJ5ICYgU2VudHJ5IGludGVncmF0aW9uIG1heSBzdGlsbCB3b3JrLCBidXQgc2FtcGxlIHJhdGVzIHNldCBmb3IgdGhlIFNlbnRyeSBTREsgd2lsbCBub3QgYmUgcmVzcGVjdGVkLiBJZiB5b3UgdXNlIGEgY3VzdG9tIHNhbXBsZXIsIG1ha2Ugc3VyZSB0byB1c2UgYHdyYXBTYW1wbGluZ0RlY2lzaW9uYC4nLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Q2xpZW50T3B0aW9ucyhcbiAgb3B0aW9ucyxcbiAgZ2V0RGVmYXVsdEludGVncmF0aW9uc0ltcGwsXG4pIHtcbiAgY29uc3QgcmVsZWFzZSA9IGdldFJlbGVhc2Uob3B0aW9ucy5yZWxlYXNlKTtcbiAgY29uc3Qgc3BvdGxpZ2h0ID1cbiAgICBvcHRpb25zLnNwb3RsaWdodCA/PyBlbnZUb0Jvb2wuZW52VG9Cb29sKHByb2Nlc3MuZW52LlNFTlRSWV9TUE9UTElHSFQsIHsgc3RyaWN0OiB0cnVlIH0pID8/IHByb2Nlc3MuZW52LlNFTlRSWV9TUE9UTElHSFQ7XG4gIGNvbnN0IHRyYWNlc1NhbXBsZVJhdGUgPSBnZXRUcmFjZXNTYW1wbGVSYXRlKG9wdGlvbnMudHJhY2VzU2FtcGxlUmF0ZSk7XG5cbiAgY29uc3QgbWVyZ2VkT3B0aW9ucyA9IHtcbiAgICAuLi5vcHRpb25zLFxuICAgIGRzbjogb3B0aW9ucy5kc24gPz8gcHJvY2Vzcy5lbnYuU0VOVFJZX0RTTixcbiAgICBlbnZpcm9ubWVudDogb3B0aW9ucy5lbnZpcm9ubWVudCA/PyBwcm9jZXNzLmVudi5TRU5UUllfRU5WSVJPTk1FTlQsXG4gICAgc2VuZENsaWVudFJlcG9ydHM6IG9wdGlvbnMuc2VuZENsaWVudFJlcG9ydHMgPz8gdHJ1ZSxcbiAgICB0cmFuc3BvcnQ6IG9wdGlvbnMudHJhbnNwb3J0ID8/IGh0dHAubWFrZU5vZGVUcmFuc3BvcnQsXG4gICAgc3RhY2tQYXJzZXI6IGNvcmUuc3RhY2tQYXJzZXJGcm9tU3RhY2tQYXJzZXJPcHRpb25zKG9wdGlvbnMuc3RhY2tQYXJzZXIgfHwgYXBpLmRlZmF1bHRTdGFja1BhcnNlciksXG4gICAgcmVsZWFzZSxcbiAgICB0cmFjZXNTYW1wbGVSYXRlLFxuICAgIHNwb3RsaWdodCxcbiAgICBkZWJ1ZzogZW52VG9Cb29sLmVudlRvQm9vbChvcHRpb25zLmRlYnVnID8/IHByb2Nlc3MuZW52LlNFTlRSWV9ERUJVRyksXG4gIH07XG5cbiAgY29uc3QgaW50ZWdyYXRpb25zID0gb3B0aW9ucy5pbnRlZ3JhdGlvbnM7XG4gIGNvbnN0IGRlZmF1bHRJbnRlZ3JhdGlvbnMgPSBvcHRpb25zLmRlZmF1bHRJbnRlZ3JhdGlvbnMgPz8gZ2V0RGVmYXVsdEludGVncmF0aW9uc0ltcGwobWVyZ2VkT3B0aW9ucyk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5tZXJnZWRPcHRpb25zLFxuICAgIGludGVncmF0aW9uczogY29yZS5nZXRJbnRlZ3JhdGlvbnNUb1NldHVwKHtcbiAgICAgIGRlZmF1bHRJbnRlZ3JhdGlvbnMsXG4gICAgICBpbnRlZ3JhdGlvbnMsXG4gICAgfSksXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFJlbGVhc2UocmVsZWFzZSkge1xuICBpZiAocmVsZWFzZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlbGVhc2U7XG4gIH1cblxuICBjb25zdCBkZXRlY3RlZFJlbGVhc2UgPSBhcGkuZ2V0U2VudHJ5UmVsZWFzZSgpO1xuICBpZiAoZGV0ZWN0ZWRSZWxlYXNlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZGV0ZWN0ZWRSZWxlYXNlO1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZ2V0VHJhY2VzU2FtcGxlUmF0ZSh0cmFjZXNTYW1wbGVSYXRlKSB7XG4gIGlmICh0cmFjZXNTYW1wbGVSYXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdHJhY2VzU2FtcGxlUmF0ZTtcbiAgfVxuXG4gIGNvbnN0IHNhbXBsZVJhdGVGcm9tRW52ID0gcHJvY2Vzcy5lbnYuU0VOVFJZX1RSQUNFU19TQU1QTEVfUkFURTtcbiAgaWYgKCFzYW1wbGVSYXRlRnJvbUVudikge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBjb25zdCBwYXJzZWQgPSBwYXJzZUZsb2F0KHNhbXBsZVJhdGVGcm9tRW52KTtcbiAgcmV0dXJuIGlzRmluaXRlKHBhcnNlZCkgPyBwYXJzZWQgOiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogVXBkYXRlIHNjb3BlIGFuZCBwcm9wYWdhdGlvbiBjb250ZXh0IGJhc2VkIG9uIGVudmlyb25tZW50YWwgdmFyaWFibGVzLlxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3JmY3MvYmxvYi9tYWluL3RleHQvMDA3MS1jb250aW51ZS10cmFjZS1vdmVyLXByb2Nlc3MtYm91bmRhcmllcy5tZFxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZnVuY3Rpb24gdXBkYXRlU2NvcGVGcm9tRW52VmFyaWFibGVzKCkge1xuICBpZiAoZW52VG9Cb29sLmVudlRvQm9vbChwcm9jZXNzLmVudi5TRU5UUllfVVNFX0VOVklST05NRU5UKSAhPT0gZmFsc2UpIHtcbiAgICBjb25zdCBzZW50cnlUcmFjZUVudiA9IHByb2Nlc3MuZW52LlNFTlRSWV9UUkFDRTtcbiAgICBjb25zdCBiYWdnYWdlRW52ID0gcHJvY2Vzcy5lbnYuU0VOVFJZX0JBR0dBR0U7XG4gICAgY29uc3QgcHJvcGFnYXRpb25Db250ZXh0ID0gY29yZS5wcm9wYWdhdGlvbkNvbnRleHRGcm9tSGVhZGVycyhzZW50cnlUcmFjZUVudiwgYmFnZ2FnZUVudik7XG4gICAgY29yZS5nZXRDdXJyZW50U2NvcGUoKS5zZXRQcm9wYWdhdGlvbkNvbnRleHQocHJvcGFnYXRpb25Db250ZXh0KTtcbiAgfVxufVxuXG5leHBvcnRzLmdldERlZmF1bHRJbnRlZ3JhdGlvbnMgPSBnZXREZWZhdWx0SW50ZWdyYXRpb25zO1xuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMuaW5pdFdpdGhvdXREZWZhdWx0SW50ZWdyYXRpb25zID0gaW5pdFdpdGhvdXREZWZhdWx0SW50ZWdyYXRpb25zO1xuZXhwb3J0cy52YWxpZGF0ZU9wZW5UZWxlbWV0cnlTZXR1cCA9IHZhbGlkYXRlT3BlblRlbGVtZXRyeVNldHVwO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/injectLoader.js":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/injectLoader.js ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst ModulePatch = __webpack_require__(/*! @apm-js-collab/tracing-hooks */ \"(instrument)/../../node_modules/.pnpm/@apm-js-collab+tracing-hooks@0.3.1/node_modules/@apm-js-collab/tracing-hooks/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst moduleModule = __webpack_require__(/*! module */ \"module\");\nconst detection = __webpack_require__(/*! ../utils/detection.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/detection.js\");\n\nvar _documentCurrentScript = typeof document !== 'undefined' ? document.currentScript : null;\nlet instrumentationConfigs;\n\n/**\n * Add an instrumentation config to be used by the injection loader.\n */\nfunction addInstrumentationConfig(config) {\n  if (!detection.supportsEsmLoaderHooks()) {\n    return;\n  }\n\n  if (!instrumentationConfigs) {\n    instrumentationConfigs = [];\n  }\n\n  instrumentationConfigs.push(config);\n\n  core.GLOBAL_OBJ._sentryInjectLoaderHookRegister = () => {\n    if (core.GLOBAL_OBJ._sentryInjectLoaderHookRegistered) {\n      return;\n    }\n\n    core.GLOBAL_OBJ._sentryInjectLoaderHookRegistered = true;\n\n    const instrumentations = instrumentationConfigs || [];\n\n    // Patch require to support CJS modules\n    const requirePatch = new ModulePatch.default({ instrumentations });\n    requirePatch.patch();\n\n    // Add ESM loader to support ESM modules\n    try {\n      // @ts-expect-error register is available in these versions\n      moduleModule.register('@apm-js-collab/tracing-hooks/hook.mjs', (typeof document === 'undefined' ? (__webpack_require__(/*! url */ \"url\").pathToFileURL)(__filename).href : (_documentCurrentScript && _documentCurrentScript.tagName.toUpperCase() === 'SCRIPT' && _documentCurrentScript.src || new URL('sdk/injectLoader.js', document.baseURI).href)), {\n        data: { instrumentations },\n      });\n    } catch (error) {\n      core.debug.warn(\"Failed to register '@apm-js-collab/tracing-hooks' hook\", error);\n    }\n  };\n}\n\nexports.addInstrumentationConfig = addInstrumentationConfig;\n//# sourceMappingURL=injectLoader.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9zZGsvaW5qZWN0TG9hZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLG9CQUFvQixtQkFBTyxDQUFDLGlLQUE4QjtBQUMxRCxhQUFhLG1CQUFPLENBQUMsNkhBQWM7QUFDbkMscUJBQXFCLG1CQUFPLENBQUMsc0JBQVE7QUFDckMsa0JBQWtCLG1CQUFPLENBQUMseVBBQXVCOztBQUVqRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBLG1EQUFtRCxrQkFBa0I7QUFDckU7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0dBQXdHLHFEQUFpQztBQUN6SSxnQkFBZ0Isa0JBQWtCO0FBQ2xDLE9BQU87QUFDUCxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0NBQWdDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9zZGsvaW5qZWN0TG9hZGVyLmpzPzVkMGYiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IE1vZHVsZVBhdGNoID0gcmVxdWlyZSgnQGFwbS1qcy1jb2xsYWIvdHJhY2luZy1ob29rcycpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgbW9kdWxlTW9kdWxlID0gcmVxdWlyZSgnbW9kdWxlJyk7XG5jb25zdCBkZXRlY3Rpb24gPSByZXF1aXJlKCcuLi91dGlscy9kZXRlY3Rpb24uanMnKTtcblxudmFyIF9kb2N1bWVudEN1cnJlbnRTY3JpcHQgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQuY3VycmVudFNjcmlwdCA6IG51bGw7XG5sZXQgaW5zdHJ1bWVudGF0aW9uQ29uZmlncztcblxuLyoqXG4gKiBBZGQgYW4gaW5zdHJ1bWVudGF0aW9uIGNvbmZpZyB0byBiZSB1c2VkIGJ5IHRoZSBpbmplY3Rpb24gbG9hZGVyLlxuICovXG5mdW5jdGlvbiBhZGRJbnN0cnVtZW50YXRpb25Db25maWcoY29uZmlnKSB7XG4gIGlmICghZGV0ZWN0aW9uLnN1cHBvcnRzRXNtTG9hZGVySG9va3MoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICghaW5zdHJ1bWVudGF0aW9uQ29uZmlncykge1xuICAgIGluc3RydW1lbnRhdGlvbkNvbmZpZ3MgPSBbXTtcbiAgfVxuXG4gIGluc3RydW1lbnRhdGlvbkNvbmZpZ3MucHVzaChjb25maWcpO1xuXG4gIGNvcmUuR0xPQkFMX09CSi5fc2VudHJ5SW5qZWN0TG9hZGVySG9va1JlZ2lzdGVyID0gKCkgPT4ge1xuICAgIGlmIChjb3JlLkdMT0JBTF9PQkouX3NlbnRyeUluamVjdExvYWRlckhvb2tSZWdpc3RlcmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29yZS5HTE9CQUxfT0JKLl9zZW50cnlJbmplY3RMb2FkZXJIb29rUmVnaXN0ZXJlZCA9IHRydWU7XG5cbiAgICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0gaW5zdHJ1bWVudGF0aW9uQ29uZmlncyB8fCBbXTtcblxuICAgIC8vIFBhdGNoIHJlcXVpcmUgdG8gc3VwcG9ydCBDSlMgbW9kdWxlc1xuICAgIGNvbnN0IHJlcXVpcmVQYXRjaCA9IG5ldyBNb2R1bGVQYXRjaC5kZWZhdWx0KHsgaW5zdHJ1bWVudGF0aW9ucyB9KTtcbiAgICByZXF1aXJlUGF0Y2gucGF0Y2goKTtcblxuICAgIC8vIEFkZCBFU00gbG9hZGVyIHRvIHN1cHBvcnQgRVNNIG1vZHVsZXNcbiAgICB0cnkge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciByZWdpc3RlciBpcyBhdmFpbGFibGUgaW4gdGhlc2UgdmVyc2lvbnNcbiAgICAgIG1vZHVsZU1vZHVsZS5yZWdpc3RlcignQGFwbS1qcy1jb2xsYWIvdHJhY2luZy1ob29rcy9ob29rLm1qcycsICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnID8gcmVxdWlyZSgndScgKyAncmwnKS5wYXRoVG9GaWxlVVJMKF9fZmlsZW5hbWUpLmhyZWYgOiAoX2RvY3VtZW50Q3VycmVudFNjcmlwdCAmJiBfZG9jdW1lbnRDdXJyZW50U2NyaXB0LnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ1NDUklQVCcgJiYgX2RvY3VtZW50Q3VycmVudFNjcmlwdC5zcmMgfHwgbmV3IFVSTCgnc2RrL2luamVjdExvYWRlci5qcycsIGRvY3VtZW50LmJhc2VVUkkpLmhyZWYpKSwge1xuICAgICAgICBkYXRhOiB7IGluc3RydW1lbnRhdGlvbnMgfSxcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb3JlLmRlYnVnLndhcm4oXCJGYWlsZWQgdG8gcmVnaXN0ZXIgJ0BhcG0tanMtY29sbGFiL3RyYWNpbmctaG9va3MnIGhvb2tcIiwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0cy5hZGRJbnN0cnVtZW50YXRpb25Db25maWcgPSBhZGRJbnN0cnVtZW50YXRpb25Db25maWc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmplY3RMb2FkZXIuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/injectLoader.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/scope.js":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/scope.js ***!
  \***************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst api = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst opentelemetry = __webpack_require__(/*! @sentry/opentelemetry */ \"(instrument)/../../node_modules/.pnpm/@sentry+opentelemetry@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1_5qhoifmlgqufioqeczcfzlo2z4/node_modules/@sentry/opentelemetry/build/cjs/index.js\");\n\n/**\n * Update the active isolation scope.\n * Should be used with caution!\n */\nfunction setIsolationScope(isolationScope) {\n  const scopes = opentelemetry.getScopesFromContext(api.context.active());\n  if (scopes) {\n    scopes.isolationScope = isolationScope;\n  }\n}\n\nexports.setIsolationScope = setIsolationScope;\n//# sourceMappingURL=scope.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy9zZGsvc2NvcGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsWUFBWSxtQkFBTyxDQUFDLDZJQUFvQjtBQUN4QyxzQkFBc0IsbUJBQU8sQ0FBQyxtUEFBdUI7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvc2RrL3Njb3BlLmpzPzIzMTUiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGFwaSA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2FwaScpO1xuY29uc3Qgb3BlbnRlbGVtZXRyeSA9IHJlcXVpcmUoJ0BzZW50cnkvb3BlbnRlbGVtZXRyeScpO1xuXG4vKipcbiAqIFVwZGF0ZSB0aGUgYWN0aXZlIGlzb2xhdGlvbiBzY29wZS5cbiAqIFNob3VsZCBiZSB1c2VkIHdpdGggY2F1dGlvbiFcbiAqL1xuZnVuY3Rpb24gc2V0SXNvbGF0aW9uU2NvcGUoaXNvbGF0aW9uU2NvcGUpIHtcbiAgY29uc3Qgc2NvcGVzID0gb3BlbnRlbGVtZXRyeS5nZXRTY29wZXNGcm9tQ29udGV4dChhcGkuY29udGV4dC5hY3RpdmUoKSk7XG4gIGlmIChzY29wZXMpIHtcbiAgICBzY29wZXMuaXNvbGF0aW9uU2NvcGUgPSBpc29sYXRpb25TY29wZTtcbiAgfVxufVxuXG5leHBvcnRzLnNldElzb2xhdGlvblNjb3BlID0gc2V0SXNvbGF0aW9uU2NvcGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29wZS5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/sdk/scope.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/transports/http.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/transports/http.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst http = __webpack_require__(/*! node:http */ \"node:http\");\nconst https = __webpack_require__(/*! node:https */ \"node:https\");\nconst node_stream = __webpack_require__(/*! node:stream */ \"node:stream\");\nconst node_zlib = __webpack_require__(/*! node:zlib */ \"node:zlib\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst index = __webpack_require__(/*! ../proxy/index.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/proxy/index.js\");\n\n// Estimated maximum size for reasonable standalone event\nconst GZIP_THRESHOLD = 1024 * 32;\n\n/**\n * Gets a stream from a Uint8Array or string\n * Readable.from is ideal but was added in node.js v12.3.0 and v10.17.0\n */\nfunction streamFromBody(body) {\n  return new node_stream.Readable({\n    read() {\n      this.push(body);\n      this.push(null);\n    },\n  });\n}\n\n/**\n * Creates a Transport that uses native the native 'http' and 'https' modules to send events to Sentry.\n */\nfunction makeNodeTransport(options) {\n  let urlSegments;\n\n  try {\n    urlSegments = new URL(options.url);\n  } catch (e) {\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[@sentry/node]: Invalid dsn or tunnel option, will not send any events. The tunnel option must be a full URL when used.',\n      );\n    });\n    return core.createTransport(options, () => Promise.resolve({}));\n  }\n\n  const isHttps = urlSegments.protocol === 'https:';\n\n  // Proxy prioritization: http => `options.proxy` | `process.env.http_proxy`\n  // Proxy prioritization: https => `options.proxy` | `process.env.https_proxy` | `process.env.http_proxy`\n  const proxy = applyNoProxyOption(\n    urlSegments,\n    options.proxy || (isHttps ? process.env.https_proxy : undefined) || process.env.http_proxy,\n  );\n\n  const nativeHttpModule = isHttps ? https : http;\n  const keepAlive = options.keepAlive === undefined ? false : options.keepAlive;\n\n  // TODO(v11): Evaluate if we can set keepAlive to true. This would involve testing for memory leaks in older node\n  // versions(>= 8) as they had memory leaks when using it: #2555\n  const agent = proxy\n    ? (new index.HttpsProxyAgent(proxy) )\n    : new nativeHttpModule.Agent({ keepAlive, maxSockets: 30, timeout: 2000 });\n\n  const requestExecutor = createRequestExecutor(options, options.httpModule ?? nativeHttpModule, agent);\n  return core.createTransport(options, requestExecutor);\n}\n\n/**\n * Honors the `no_proxy` env variable with the highest priority to allow for hosts exclusion.\n *\n * @param transportUrl The URL the transport intends to send events to.\n * @param proxy The client configured proxy.\n * @returns A proxy the transport should use.\n */\nfunction applyNoProxyOption(transportUrlSegments, proxy) {\n  const { no_proxy } = process.env;\n\n  const urlIsExemptFromProxy = no_proxy\n    ?.split(',')\n    .some(\n      exemption => transportUrlSegments.host.endsWith(exemption) || transportUrlSegments.hostname.endsWith(exemption),\n    );\n\n  if (urlIsExemptFromProxy) {\n    return undefined;\n  } else {\n    return proxy;\n  }\n}\n\n/**\n * Creates a RequestExecutor to be used with `createTransport`.\n */\nfunction createRequestExecutor(\n  options,\n  httpModule,\n  agent,\n) {\n  const { hostname, pathname, port, protocol, search } = new URL(options.url);\n  return function makeRequest(request) {\n    return new Promise((resolve, reject) => {\n      // This ensures we do not generate any spans in OpenTelemetry for the transport\n      core.suppressTracing(() => {\n        let body = streamFromBody(request.body);\n\n        const headers = { ...options.headers };\n\n        if (request.body.length > GZIP_THRESHOLD) {\n          headers['content-encoding'] = 'gzip';\n          body = body.pipe(node_zlib.createGzip());\n        }\n\n        const req = httpModule.request(\n          {\n            method: 'POST',\n            agent,\n            headers,\n            hostname,\n            path: `${pathname}${search}`,\n            port,\n            protocol,\n            ca: options.caCerts,\n          },\n          res => {\n            res.on('data', () => {\n              // Drain socket\n            });\n\n            res.on('end', () => {\n              // Drain socket\n            });\n\n            res.setEncoding('utf8');\n\n            // \"Key-value pairs of header names and values. Header names are lower-cased.\"\n            // https://nodejs.org/api/http.html#http_message_headers\n            const retryAfterHeader = res.headers['retry-after'] ?? null;\n            const rateLimitsHeader = res.headers['x-sentry-rate-limits'] ?? null;\n\n            resolve({\n              statusCode: res.statusCode,\n              headers: {\n                'retry-after': retryAfterHeader,\n                'x-sentry-rate-limits': Array.isArray(rateLimitsHeader)\n                  ? rateLimitsHeader[0] || null\n                  : rateLimitsHeader,\n              },\n            });\n          },\n        );\n\n        req.on('error', reject);\n        body.pipe(req);\n      });\n    });\n  };\n}\n\nexports.makeNodeTransport = makeNodeTransport;\n//# sourceMappingURL=http.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/transports/http.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/addOriginToSpan.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/addOriginToSpan.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/** Adds an origin to an OTEL Span. */\nfunction addOriginToSpan(span, origin) {\n  span.setAttribute(core.SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, origin);\n}\n\nexports.addOriginToSpan = addOriginToSpan;\n//# sourceMappingURL=addOriginToSpan.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9hZGRPcmlnaW5Ub1NwYW4uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZS1jb3JlQDEwLjE5LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wX0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYXN5bmMtaG9va3NAMi4xLjBfQF8yZ2RocjZrdmRwd2huamRpb3lta2I0ZGJndS9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL3V0aWxzL2FkZE9yaWdpblRvU3Bhbi5qcz9iY2Q4Il0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBjb3JlID0gcmVxdWlyZSgnQHNlbnRyeS9jb3JlJyk7XG5cbi8qKiBBZGRzIGFuIG9yaWdpbiB0byBhbiBPVEVMIFNwYW4uICovXG5mdW5jdGlvbiBhZGRPcmlnaW5Ub1NwYW4oc3Bhbiwgb3JpZ2luKSB7XG4gIHNwYW4uc2V0QXR0cmlidXRlKGNvcmUuU0VNQU5USUNfQVRUUklCVVRFX1NFTlRSWV9PUklHSU4sIG9yaWdpbik7XG59XG5cbmV4cG9ydHMuYWRkT3JpZ2luVG9TcGFuID0gYWRkT3JpZ2luVG9TcGFuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkT3JpZ2luVG9TcGFuLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/addOriginToSpan.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/baggage.js":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/baggage.js ***!
  \*******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/**\n * Merge two baggage headers into one, where the existing one takes precedence.\n * The order of the existing baggage will be preserved, and new entries will be added to the end.\n */\nfunction mergeBaggageHeaders(\n  existing,\n  baggage,\n) {\n  if (!existing) {\n    return baggage;\n  }\n\n  const existingBaggageEntries = core.parseBaggageHeader(existing);\n  const newBaggageEntries = core.parseBaggageHeader(baggage);\n\n  if (!newBaggageEntries) {\n    return existing;\n  }\n\n  // Existing entries take precedence, ensuring order remains stable for minimal changes\n  const mergedBaggageEntries = { ...existingBaggageEntries };\n  Object.entries(newBaggageEntries).forEach(([key, value]) => {\n    if (!mergedBaggageEntries[key]) {\n      mergedBaggageEntries[key] = value;\n    }\n  });\n\n  return core.objectToBaggageHeader(mergedBaggageEntries);\n}\n\nexports.mergeBaggageHeaders = mergeBaggageHeaders;\n//# sourceMappingURL=baggage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9iYWdnYWdlLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BzZW50cnkrbm9kZS1jb3JlQDEwLjE5LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wX0BvcGVudGVsZW1ldHJ5K2NvbnRleHQtYXN5bmMtaG9va3NAMi4xLjBfQF8yZ2RocjZrdmRwd2huamRpb3lta2I0ZGJndS9ub2RlX21vZHVsZXMvQHNlbnRyeS9ub2RlLWNvcmUvYnVpbGQvY2pzL3V0aWxzL2JhZ2dhZ2UuanM/NzdkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKipcbiAqIE1lcmdlIHR3byBiYWdnYWdlIGhlYWRlcnMgaW50byBvbmUsIHdoZXJlIHRoZSBleGlzdGluZyBvbmUgdGFrZXMgcHJlY2VkZW5jZS5cbiAqIFRoZSBvcmRlciBvZiB0aGUgZXhpc3RpbmcgYmFnZ2FnZSB3aWxsIGJlIHByZXNlcnZlZCwgYW5kIG5ldyBlbnRyaWVzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVuZC5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VCYWdnYWdlSGVhZGVycyhcbiAgZXhpc3RpbmcsXG4gIGJhZ2dhZ2UsXG4pIHtcbiAgaWYgKCFleGlzdGluZykge1xuICAgIHJldHVybiBiYWdnYWdlO1xuICB9XG5cbiAgY29uc3QgZXhpc3RpbmdCYWdnYWdlRW50cmllcyA9IGNvcmUucGFyc2VCYWdnYWdlSGVhZGVyKGV4aXN0aW5nKTtcbiAgY29uc3QgbmV3QmFnZ2FnZUVudHJpZXMgPSBjb3JlLnBhcnNlQmFnZ2FnZUhlYWRlcihiYWdnYWdlKTtcblxuICBpZiAoIW5ld0JhZ2dhZ2VFbnRyaWVzKSB7XG4gICAgcmV0dXJuIGV4aXN0aW5nO1xuICB9XG5cbiAgLy8gRXhpc3RpbmcgZW50cmllcyB0YWtlIHByZWNlZGVuY2UsIGVuc3VyaW5nIG9yZGVyIHJlbWFpbnMgc3RhYmxlIGZvciBtaW5pbWFsIGNoYW5nZXNcbiAgY29uc3QgbWVyZ2VkQmFnZ2FnZUVudHJpZXMgPSB7IC4uLmV4aXN0aW5nQmFnZ2FnZUVudHJpZXMgfTtcbiAgT2JqZWN0LmVudHJpZXMobmV3QmFnZ2FnZUVudHJpZXMpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICAgIGlmICghbWVyZ2VkQmFnZ2FnZUVudHJpZXNba2V5XSkge1xuICAgICAgbWVyZ2VkQmFnZ2FnZUVudHJpZXNba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvcmUub2JqZWN0VG9CYWdnYWdlSGVhZGVyKG1lcmdlZEJhZ2dhZ2VFbnRyaWVzKTtcbn1cblxuZXhwb3J0cy5tZXJnZUJhZ2dhZ2VIZWFkZXJzID0gbWVyZ2VCYWdnYWdlSGVhZGVycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhZ2dhZ2UuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/baggage.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/createMissingInstrumentationContext.js":
/*!***********************************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/createMissingInstrumentationContext.js ***!
  \***********************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst detection = __webpack_require__(/*! ./detection.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/detection.js\");\n\nconst createMissingInstrumentationContext = (pkg) => ({\n  package: pkg,\n  'javascript.is_cjs': detection.isCjs(),\n});\n\nexports.createMissingInstrumentationContext = createMissingInstrumentationContext;\n//# sourceMappingURL=createMissingInstrumentationContext.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RSxrQkFBa0IsbUJBQU8sQ0FBQyxrUEFBZ0I7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQsMkNBQTJDO0FBQzNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dC5qcz80YTVmIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5jb25zdCBkZXRlY3Rpb24gPSByZXF1aXJlKCcuL2RldGVjdGlvbi5qcycpO1xuXG5jb25zdCBjcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dCA9IChwa2cpID0+ICh7XG4gIHBhY2thZ2U6IHBrZyxcbiAgJ2phdmFzY3JpcHQuaXNfY2pzJzogZGV0ZWN0aW9uLmlzQ2pzKCksXG59KTtcblxuZXhwb3J0cy5jcmVhdGVNaXNzaW5nSW5zdHJ1bWVudGF0aW9uQ29udGV4dCA9IGNyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/createMissingInstrumentationContext.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/debug.js":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/debug.js ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nlet cachedDebuggerEnabled;\n\n/**\n * Was the debugger enabled when this function was first called?\n */\nasync function isDebuggerEnabled() {\n  if (cachedDebuggerEnabled === undefined) {\n    try {\n      // Node can be built without inspector support\n      const inspector = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:inspector */ \"node:inspector\", 23));\n      cachedDebuggerEnabled = !!inspector.url();\n    } catch {\n      cachedDebuggerEnabled = false;\n    }\n  }\n\n  return cachedDebuggerEnabled;\n}\n\nexports.isDebuggerEnabled = isDebuggerEnabled;\n//# sourceMappingURL=debug.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9kZWJ1Zy5qcyIsIm1hcHBpbmdzIjoiQUFBQSxxREFBcUQsaUJBQWlCOztBQUV0RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrSUFBd0I7QUFDdEQ7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9kZWJ1Zy5qcz81ZjgxIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG5sZXQgY2FjaGVkRGVidWdnZXJFbmFibGVkO1xuXG4vKipcbiAqIFdhcyB0aGUgZGVidWdnZXIgZW5hYmxlZCB3aGVuIHRoaXMgZnVuY3Rpb24gd2FzIGZpcnN0IGNhbGxlZD9cbiAqL1xuYXN5bmMgZnVuY3Rpb24gaXNEZWJ1Z2dlckVuYWJsZWQoKSB7XG4gIGlmIChjYWNoZWREZWJ1Z2dlckVuYWJsZWQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBOb2RlIGNhbiBiZSBidWlsdCB3aXRob3V0IGluc3BlY3RvciBzdXBwb3J0XG4gICAgICBjb25zdCBpbnNwZWN0b3IgPSBhd2FpdCBpbXBvcnQoJ25vZGU6aW5zcGVjdG9yJyk7XG4gICAgICBjYWNoZWREZWJ1Z2dlckVuYWJsZWQgPSAhIWluc3BlY3Rvci51cmwoKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIGNhY2hlZERlYnVnZ2VyRW5hYmxlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjYWNoZWREZWJ1Z2dlckVuYWJsZWQ7XG59XG5cbmV4cG9ydHMuaXNEZWJ1Z2dlckVuYWJsZWQgPSBpc0RlYnVnZ2VyRW5hYmxlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlYnVnLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/debug.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/detection.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/detection.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst nodeVersion = __webpack_require__(/*! ../nodeVersion.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/nodeVersion.js\");\n\n/** Detect CommonJS. */\nfunction isCjs() {\n  try {\n    return  true && typeof module.exports !== 'undefined';\n  } catch {\n    return false;\n  }\n}\n\nlet hasWarnedAboutNodeVersion;\n\n/**\n * Check if the current Node.js version supports module.register\n */\nfunction supportsEsmLoaderHooks() {\n  if (isCjs()) {\n    return false;\n  }\n\n  if (nodeVersion.NODE_MAJOR >= 21 || (nodeVersion.NODE_MAJOR === 20 && nodeVersion.NODE_MINOR >= 6) || (nodeVersion.NODE_MAJOR === 18 && nodeVersion.NODE_MINOR >= 19)) {\n    return true;\n  }\n\n  if (!hasWarnedAboutNodeVersion) {\n    hasWarnedAboutNodeVersion = true;\n\n    core.consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `[Sentry] You are using Node.js v${process.versions.node} in ESM mode (\"import syntax\"). The Sentry Node.js SDK is not compatible with ESM in Node.js versions before 18.19.0 or before 20.6.0. Please either build your application with CommonJS (\"require() syntax\"), or upgrade your Node.js version.`,\n      );\n    });\n  }\n\n  return false;\n}\n\nexports.isCjs = isCjs;\nexports.supportsEsmLoaderHooks = supportsEsmLoaderHooks;\n//# sourceMappingURL=detection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9kZXRlY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsYUFBYSxtQkFBTyxDQUFDLDZIQUFjO0FBQ25DLG9CQUFvQixtQkFBTyxDQUFDLGlQQUFtQjs7QUFFL0M7QUFDQTtBQUNBO0FBQ0EsV0FBVyxLQUE2QjtBQUN4QyxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyx1QkFBdUI7QUFDbEU7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQSxhQUFhO0FBQ2IsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9kZXRlY3Rpb24uanM/YzE4MSJdLCJzb3VyY2VzQ29udGVudCI6WyJPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblxuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3Qgbm9kZVZlcnNpb24gPSByZXF1aXJlKCcuLi9ub2RlVmVyc2lvbi5qcycpO1xuXG4vKiogRGV0ZWN0IENvbW1vbkpTLiAqL1xuZnVuY3Rpb24gaXNDanMoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCc7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5sZXQgaGFzV2FybmVkQWJvdXROb2RlVmVyc2lvbjtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgY3VycmVudCBOb2RlLmpzIHZlcnNpb24gc3VwcG9ydHMgbW9kdWxlLnJlZ2lzdGVyXG4gKi9cbmZ1bmN0aW9uIHN1cHBvcnRzRXNtTG9hZGVySG9va3MoKSB7XG4gIGlmIChpc0NqcygpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKG5vZGVWZXJzaW9uLk5PREVfTUFKT1IgPj0gMjEgfHwgKG5vZGVWZXJzaW9uLk5PREVfTUFKT1IgPT09IDIwICYmIG5vZGVWZXJzaW9uLk5PREVfTUlOT1IgPj0gNikgfHwgKG5vZGVWZXJzaW9uLk5PREVfTUFKT1IgPT09IDE4ICYmIG5vZGVWZXJzaW9uLk5PREVfTUlOT1IgPj0gMTkpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoIWhhc1dhcm5lZEFib3V0Tm9kZVZlcnNpb24pIHtcbiAgICBoYXNXYXJuZWRBYm91dE5vZGVWZXJzaW9uID0gdHJ1ZTtcblxuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFtTZW50cnldIFlvdSBhcmUgdXNpbmcgTm9kZS5qcyB2JHtwcm9jZXNzLnZlcnNpb25zLm5vZGV9IGluIEVTTSBtb2RlIChcImltcG9ydCBzeW50YXhcIikuIFRoZSBTZW50cnkgTm9kZS5qcyBTREsgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBFU00gaW4gTm9kZS5qcyB2ZXJzaW9ucyBiZWZvcmUgMTguMTkuMCBvciBiZWZvcmUgMjAuNi4wLiBQbGVhc2UgZWl0aGVyIGJ1aWxkIHlvdXIgYXBwbGljYXRpb24gd2l0aCBDb21tb25KUyAoXCJyZXF1aXJlKCkgc3ludGF4XCIpLCBvciB1cGdyYWRlIHlvdXIgTm9kZS5qcyB2ZXJzaW9uLmAsXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnRzLmlzQ2pzID0gaXNDanM7XG5leHBvcnRzLnN1cHBvcnRzRXNtTG9hZGVySG9va3MgPSBzdXBwb3J0c0VzbUxvYWRlckhvb2tzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGV0ZWN0aW9uLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/detection.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/ensureIsWrapped.js":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/ensureIsWrapped.js ***!
  \***************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst instrumentation = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst createMissingInstrumentationContext = __webpack_require__(/*! ./createMissingInstrumentationContext.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/createMissingInstrumentationContext.js\");\nconst detection = __webpack_require__(/*! ./detection.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/detection.js\");\n\n/**\n * Checks and warns if a framework isn't wrapped by opentelemetry.\n */\nfunction ensureIsWrapped(\n  maybeWrappedFunction,\n  name,\n) {\n  const clientOptions = core.getClient()?.getOptions();\n  if (\n    !clientOptions?.disableInstrumentationWarnings &&\n    !instrumentation.isWrapped(maybeWrappedFunction) &&\n    core.isEnabled() &&\n    core.hasSpansEnabled(clientOptions)\n  ) {\n    core.consoleSandbox(() => {\n      if (detection.isCjs()) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. This is likely because you required/imported ${name} before calling \\`Sentry.init()\\`.`,\n        );\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `[Sentry] ${name} is not instrumented. Please make sure to initialize Sentry in a separate file that you \\`--import\\` when running node, see: https://docs.sentry.io/platforms/javascript/guides/${name}/install/esm/.`,\n        );\n      }\n    });\n\n    core.getGlobalScope().setContext('missing_instrumentation', createMissingInstrumentationContext.createMissingInstrumentationContext(name));\n  }\n}\n\nexports.ensureIsWrapped = ensureIsWrapped;\n//# sourceMappingURL=ensureIsWrapped.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9lbnN1cmVJc1dyYXBwZWQuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsd0JBQXdCLG1CQUFPLENBQUMsNE1BQWdDO0FBQ2hFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyw0Q0FBNEMsbUJBQU8sQ0FBQyxzU0FBMEM7QUFDOUYsa0JBQWtCLG1CQUFPLENBQUMsa1BBQWdCOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsTUFBTSxvRUFBb0UsTUFBTTtBQUN0RztBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0Esc0JBQXNCLE1BQU0saUxBQWlMLEtBQUs7QUFDbE47QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvdXRpbHMvZW5zdXJlSXNXcmFwcGVkLmpzP2ZjNTgiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJ0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbicpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuY29uc3QgY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQgPSByZXF1aXJlKCcuL2NyZWF0ZU1pc3NpbmdJbnN0cnVtZW50YXRpb25Db250ZXh0LmpzJyk7XG5jb25zdCBkZXRlY3Rpb24gPSByZXF1aXJlKCcuL2RldGVjdGlvbi5qcycpO1xuXG4vKipcbiAqIENoZWNrcyBhbmQgd2FybnMgaWYgYSBmcmFtZXdvcmsgaXNuJ3Qgd3JhcHBlZCBieSBvcGVudGVsZW1ldHJ5LlxuICovXG5mdW5jdGlvbiBlbnN1cmVJc1dyYXBwZWQoXG4gIG1heWJlV3JhcHBlZEZ1bmN0aW9uLFxuICBuYW1lLFxuKSB7XG4gIGNvbnN0IGNsaWVudE9wdGlvbnMgPSBjb3JlLmdldENsaWVudCgpPy5nZXRPcHRpb25zKCk7XG4gIGlmIChcbiAgICAhY2xpZW50T3B0aW9ucz8uZGlzYWJsZUluc3RydW1lbnRhdGlvbldhcm5pbmdzICYmXG4gICAgIWluc3RydW1lbnRhdGlvbi5pc1dyYXBwZWQobWF5YmVXcmFwcGVkRnVuY3Rpb24pICYmXG4gICAgY29yZS5pc0VuYWJsZWQoKSAmJlxuICAgIGNvcmUuaGFzU3BhbnNFbmFibGVkKGNsaWVudE9wdGlvbnMpXG4gICkge1xuICAgIGNvcmUuY29uc29sZVNhbmRib3goKCkgPT4ge1xuICAgICAgaWYgKGRldGVjdGlvbi5pc0NqcygpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW1NlbnRyeV0gJHtuYW1lfSBpcyBub3QgaW5zdHJ1bWVudGVkLiBUaGlzIGlzIGxpa2VseSBiZWNhdXNlIHlvdSByZXF1aXJlZC9pbXBvcnRlZCAke25hbWV9IGJlZm9yZSBjYWxsaW5nIFxcYFNlbnRyeS5pbml0KClcXGAuYCxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBgW1NlbnRyeV0gJHtuYW1lfSBpcyBub3QgaW5zdHJ1bWVudGVkLiBQbGVhc2UgbWFrZSBzdXJlIHRvIGluaXRpYWxpemUgU2VudHJ5IGluIGEgc2VwYXJhdGUgZmlsZSB0aGF0IHlvdSBcXGAtLWltcG9ydFxcYCB3aGVuIHJ1bm5pbmcgbm9kZSwgc2VlOiBodHRwczovL2RvY3Muc2VudHJ5LmlvL3BsYXRmb3Jtcy9qYXZhc2NyaXB0L2d1aWRlcy8ke25hbWV9L2luc3RhbGwvZXNtLy5gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29yZS5nZXRHbG9iYWxTY29wZSgpLnNldENvbnRleHQoJ21pc3NpbmdfaW5zdHJ1bWVudGF0aW9uJywgY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQuY3JlYXRlTWlzc2luZ0luc3RydW1lbnRhdGlvbkNvbnRleHQobmFtZSkpO1xuICB9XG59XG5cbmV4cG9ydHMuZW5zdXJlSXNXcmFwcGVkID0gZW5zdXJlSXNXcmFwcGVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW5zdXJlSXNXcmFwcGVkLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/ensureIsWrapped.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/envToBool.js":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/envToBool.js ***!
  \*********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst FALSY_ENV_VALUES = new Set(['false', 'f', 'n', 'no', 'off', '0']);\nconst TRUTHY_ENV_VALUES = new Set(['true', 't', 'y', 'yes', 'on', '1']);\n\n/**\n * A helper function which casts an ENV variable value to `true` or `false` using the constants defined above.\n * In strict mode, it may return `null` if the value doesn't match any of the predefined values.\n *\n * @param value The value of the env variable\n * @param options -- Only has `strict` key for now, which requires a strict match for `true` in TRUTHY_ENV_VALUES\n * @returns true/false if the lowercase value matches the predefined values above. If not, null in strict mode,\n *          and Boolean(value) in loose mode.\n */\nfunction envToBool(value, options) {\n  const normalized = String(value).toLowerCase();\n\n  if (FALSY_ENV_VALUES.has(normalized)) {\n    return false;\n  }\n\n  if (TRUTHY_ENV_VALUES.has(normalized)) {\n    return true;\n  }\n\n  return options?.strict ? null : Boolean(value);\n}\n\nexports.FALSY_ENV_VALUES = FALSY_ENV_VALUES;\nexports.TRUTHY_ENV_VALUES = TRUTHY_ENV_VALUES;\nexports.envToBool = envToBool;\n//# sourceMappingURL=envToBool.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9lbnZUb0Jvb2wuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx3QkFBd0I7QUFDeEIseUJBQXlCO0FBQ3pCLGlCQUFpQjtBQUNqQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvdXRpbHMvZW52VG9Cb29sLmpzP2ZiY2QiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IEZBTFNZX0VOVl9WQUxVRVMgPSBuZXcgU2V0KFsnZmFsc2UnLCAnZicsICduJywgJ25vJywgJ29mZicsICcwJ10pO1xuY29uc3QgVFJVVEhZX0VOVl9WQUxVRVMgPSBuZXcgU2V0KFsndHJ1ZScsICd0JywgJ3knLCAneWVzJywgJ29uJywgJzEnXSk7XG5cbi8qKlxuICogQSBoZWxwZXIgZnVuY3Rpb24gd2hpY2ggY2FzdHMgYW4gRU5WIHZhcmlhYmxlIHZhbHVlIHRvIGB0cnVlYCBvciBgZmFsc2VgIHVzaW5nIHRoZSBjb25zdGFudHMgZGVmaW5lZCBhYm92ZS5cbiAqIEluIHN0cmljdCBtb2RlLCBpdCBtYXkgcmV0dXJuIGBudWxsYCBpZiB0aGUgdmFsdWUgZG9lc24ndCBtYXRjaCBhbnkgb2YgdGhlIHByZWRlZmluZWQgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGVudiB2YXJpYWJsZVxuICogQHBhcmFtIG9wdGlvbnMgLS0gT25seSBoYXMgYHN0cmljdGAga2V5IGZvciBub3csIHdoaWNoIHJlcXVpcmVzIGEgc3RyaWN0IG1hdGNoIGZvciBgdHJ1ZWAgaW4gVFJVVEhZX0VOVl9WQUxVRVNcbiAqIEByZXR1cm5zIHRydWUvZmFsc2UgaWYgdGhlIGxvd2VyY2FzZSB2YWx1ZSBtYXRjaGVzIHRoZSBwcmVkZWZpbmVkIHZhbHVlcyBhYm92ZS4gSWYgbm90LCBudWxsIGluIHN0cmljdCBtb2RlLFxuICogICAgICAgICAgYW5kIEJvb2xlYW4odmFsdWUpIGluIGxvb3NlIG1vZGUuXG4gKi9cbmZ1bmN0aW9uIGVudlRvQm9vbCh2YWx1ZSwgb3B0aW9ucykge1xuICBjb25zdCBub3JtYWxpemVkID0gU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpO1xuXG4gIGlmIChGQUxTWV9FTlZfVkFMVUVTLmhhcyhub3JtYWxpemVkKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChUUlVUSFlfRU5WX1ZBTFVFUy5oYXMobm9ybWFsaXplZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBvcHRpb25zPy5zdHJpY3QgPyBudWxsIDogQm9vbGVhbih2YWx1ZSk7XG59XG5cbmV4cG9ydHMuRkFMU1lfRU5WX1ZBTFVFUyA9IEZBTFNZX0VOVl9WQUxVRVM7XG5leHBvcnRzLlRSVVRIWV9FTlZfVkFMVUVTID0gVFJVVEhZX0VOVl9WQUxVRVM7XG5leHBvcnRzLmVudlRvQm9vbCA9IGVudlRvQm9vbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVudlRvQm9vbC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/envToBool.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/errorhandling.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/errorhandling.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\nconst debugBuild = __webpack_require__(/*! ../debug-build.js */ \"(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/debug-build.js\");\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\n/**\n * @hidden\n */\nfunction logAndExitProcess(error) {\n  core.consoleSandbox(() => {\n    // eslint-disable-next-line no-console\n    console.error(error);\n  });\n\n  const client = core.getClient();\n\n  if (client === undefined) {\n    debugBuild.DEBUG_BUILD && core.debug.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    options?.shutdownTimeout && options.shutdownTimeout > 0 ? options.shutdownTimeout : DEFAULT_SHUTDOWN_TIMEOUT;\n  client.close(timeout).then(\n    (result) => {\n      if (!result) {\n        debugBuild.DEBUG_BUILD && core.debug.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    },\n    error => {\n      debugBuild.DEBUG_BUILD && core.debug.error(error);\n    },\n  );\n}\n\nexports.logAndExitProcess = logAndExitProcess;\n//# sourceMappingURL=errorhandling.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9lcnJvcmhhbmRsaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFLGFBQWEsbUJBQU8sQ0FBQyw2SEFBYztBQUNuQyxtQkFBbUIsbUJBQU8sQ0FBQyxpUEFBbUI7O0FBRTlDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUEseUJBQXlCO0FBQ3pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9lcnJvcmhhbmRsaW5nLmpzP2E5MWUiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IGNvcmUgPSByZXF1aXJlKCdAc2VudHJ5L2NvcmUnKTtcbmNvbnN0IGRlYnVnQnVpbGQgPSByZXF1aXJlKCcuLi9kZWJ1Zy1idWlsZC5qcycpO1xuXG5jb25zdCBERUZBVUxUX1NIVVRET1dOX1RJTUVPVVQgPSAyMDAwO1xuXG4vKipcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gbG9nQW5kRXhpdFByb2Nlc3MoZXJyb3IpIHtcbiAgY29yZS5jb25zb2xlU2FuZGJveCgoKSA9PiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfSk7XG5cbiAgY29uc3QgY2xpZW50ID0gY29yZS5nZXRDbGllbnQoKTtcblxuICBpZiAoY2xpZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICBkZWJ1Z0J1aWxkLkRFQlVHX0JVSUxEICYmIGNvcmUuZGVidWcud2FybignTm8gTm9kZUNsaWVudCB3YXMgZGVmaW5lZCwgd2UgYXJlIGV4aXRpbmcgdGhlIHByb2Nlc3Mgbm93LicpO1xuICAgIGdsb2JhbC5wcm9jZXNzLmV4aXQoMSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IGNsaWVudC5nZXRPcHRpb25zKCk7XG4gIGNvbnN0IHRpbWVvdXQgPVxuICAgIG9wdGlvbnM/LnNodXRkb3duVGltZW91dCAmJiBvcHRpb25zLnNodXRkb3duVGltZW91dCA+IDAgPyBvcHRpb25zLnNodXRkb3duVGltZW91dCA6IERFRkFVTFRfU0hVVERPV05fVElNRU9VVDtcbiAgY2xpZW50LmNsb3NlKHRpbWVvdXQpLnRoZW4oXG4gICAgKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLndhcm4oJ1dlIHJlYWNoZWQgdGhlIHRpbWVvdXQgZm9yIGVtcHR5aW5nIHRoZSByZXF1ZXN0IGJ1ZmZlciwgc3RpbGwgZXhpdGluZyBub3chJyk7XG4gICAgICB9XG4gICAgICBnbG9iYWwucHJvY2Vzcy5leGl0KDEpO1xuICAgIH0sXG4gICAgZXJyb3IgPT4ge1xuICAgICAgZGVidWdCdWlsZC5ERUJVR19CVUlMRCAmJiBjb3JlLmRlYnVnLmVycm9yKGVycm9yKTtcbiAgICB9LFxuICApO1xufVxuXG5leHBvcnRzLmxvZ0FuZEV4aXRQcm9jZXNzID0gbG9nQW5kRXhpdFByb2Nlc3M7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcmhhbmRsaW5nLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/errorhandling.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/getRequestUrl.js":
/*!*************************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/getRequestUrl.js ***!
  \*************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\n/** Build a full URL from request options. */\nfunction getRequestUrl(requestOptions) {\n  const protocol = requestOptions.protocol || '';\n  const hostname = requestOptions.hostname || requestOptions.host || '';\n  // Don't log standard :80 (http) and :443 (https) ports to reduce the noise\n  // Also don't add port if the hostname already includes a port\n  const port =\n    !requestOptions.port || requestOptions.port === 80 || requestOptions.port === 443 || /^(.*):(\\d+)$/.test(hostname)\n      ? ''\n      : `:${requestOptions.port}`;\n  const path = requestOptions.path ? requestOptions.path : '/';\n  return `${protocol}//${hostname}${port}${path}`;\n}\n\nexports.getRequestUrl = getRequestUrl;\n//# sourceMappingURL=getRequestUrl.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9nZXRSZXF1ZXN0VXJsLmpzIiwibWFwcGluZ3MiOiJBQUFBLHFEQUFxRCxpQkFBaUI7O0FBRXRFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0EsWUFBWSxTQUFTLElBQUksU0FBUyxFQUFFLEtBQUssRUFBRSxLQUFLO0FBQ2hEOztBQUVBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvdXRpbHMvZ2V0UmVxdWVzdFVybC5qcz8wY2EyIl0sInNvdXJjZXNDb250ZW50IjpbIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXG4vKiogQnVpbGQgYSBmdWxsIFVSTCBmcm9tIHJlcXVlc3Qgb3B0aW9ucy4gKi9cbmZ1bmN0aW9uIGdldFJlcXVlc3RVcmwocmVxdWVzdE9wdGlvbnMpIHtcbiAgY29uc3QgcHJvdG9jb2wgPSByZXF1ZXN0T3B0aW9ucy5wcm90b2NvbCB8fCAnJztcbiAgY29uc3QgaG9zdG5hbWUgPSByZXF1ZXN0T3B0aW9ucy5ob3N0bmFtZSB8fCByZXF1ZXN0T3B0aW9ucy5ob3N0IHx8ICcnO1xuICAvLyBEb24ndCBsb2cgc3RhbmRhcmQgOjgwIChodHRwKSBhbmQgOjQ0MyAoaHR0cHMpIHBvcnRzIHRvIHJlZHVjZSB0aGUgbm9pc2VcbiAgLy8gQWxzbyBkb24ndCBhZGQgcG9ydCBpZiB0aGUgaG9zdG5hbWUgYWxyZWFkeSBpbmNsdWRlcyBhIHBvcnRcbiAgY29uc3QgcG9ydCA9XG4gICAgIXJlcXVlc3RPcHRpb25zLnBvcnQgfHwgcmVxdWVzdE9wdGlvbnMucG9ydCA9PT0gODAgfHwgcmVxdWVzdE9wdGlvbnMucG9ydCA9PT0gNDQzIHx8IC9eKC4qKTooXFxkKykkLy50ZXN0KGhvc3RuYW1lKVxuICAgICAgPyAnJ1xuICAgICAgOiBgOiR7cmVxdWVzdE9wdGlvbnMucG9ydH1gO1xuICBjb25zdCBwYXRoID0gcmVxdWVzdE9wdGlvbnMucGF0aCA/IHJlcXVlc3RPcHRpb25zLnBhdGggOiAnLyc7XG4gIHJldHVybiBgJHtwcm90b2NvbH0vLyR7aG9zdG5hbWV9JHtwb3J0fSR7cGF0aH1gO1xufVxuXG5leHBvcnRzLmdldFJlcXVlc3RVcmwgPSBnZXRSZXF1ZXN0VXJsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0UmVxdWVzdFVybC5qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/getRequestUrl.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/module.js":
/*!******************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/module.js ***!
  \******************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\nconst node_path = __webpack_require__(/*! node:path */ \"node:path\");\nconst core = __webpack_require__(/*! @sentry/core */ \"(instrument)/../../node_modules/.pnpm/@sentry+core@10.19.0/node_modules/@sentry/core/build/cjs/index.js\");\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path) {\n  return path\n    .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n    .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nfunction createGetModuleFromFilename(\n  basePath = process.argv[1] ? core.dirname(process.argv[1]) : process.cwd(),\n  isWindows = node_path.sep === '\\\\',\n) {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n\n  return (filename) => {\n    if (!filename) {\n      return;\n    }\n\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let { dir, base: file, ext } = node_path.posix.parse(normalizedFilename);\n\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n\n    // The file name might be URI-encoded which we want to decode to\n    // the original file name.\n    const decodedFile = decodeURIComponent(file);\n\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${decodedFile}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      const moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n      return moduleName ? `${moduleName}:${decodedFile}` : decodedFile;\n    }\n\n    return decodedFile;\n  };\n}\n\nexports.createGetModuleFromFilename = createGetModuleFromFilename;\n//# sourceMappingURL=module.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2VudHJ5K25vZGUtY29yZUAxMC4xOS4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMF9Ab3BlbnRlbGVtZXRyeStjb250ZXh0LWFzeW5jLWhvb2tzQDIuMS4wX0BfMmdkaHI2a3ZkcHdobmpkaW95bWtiNGRiZ3Uvbm9kZV9tb2R1bGVzL0BzZW50cnkvbm9kZS1jb3JlL2J1aWxkL2Nqcy91dGlscy9tb2R1bGUuanMiLCJtYXBwaW5ncyI6IkFBQUEscURBQXFELGlCQUFpQjs7QUFFdEUsa0JBQWtCLG1CQUFPLENBQUMsNEJBQVc7QUFDckMsYUFBYSxtQkFBTyxDQUFDLDZIQUFjOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxVQUFVLHVCQUF1Qjs7QUFFakM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLHNDQUFzQyxHQUFHLFlBQVk7QUFDckU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsV0FBVyxHQUFHLFlBQVk7QUFDdkQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNlbnRyeStub2RlLWNvcmVAMTAuMTkuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjBfQG9wZW50ZWxlbWV0cnkrY29udGV4dC1hc3luYy1ob29rc0AyLjEuMF9AXzJnZGhyNmt2ZHB3aG5qZGlveW1rYjRkYmd1L25vZGVfbW9kdWxlcy9Ac2VudHJ5L25vZGUtY29yZS9idWlsZC9janMvdXRpbHMvbW9kdWxlLmpzPzIxODIiXSwic291cmNlc0NvbnRlbnQiOlsiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cbmNvbnN0IG5vZGVfcGF0aCA9IHJlcXVpcmUoJ25vZGU6cGF0aCcpO1xuY29uc3QgY29yZSA9IHJlcXVpcmUoJ0BzZW50cnkvY29yZScpO1xuXG4vKiogbm9ybWFsaXplcyBXaW5kb3dzIHBhdGhzICovXG5mdW5jdGlvbiBub3JtYWxpemVXaW5kb3dzUGF0aChwYXRoKSB7XG4gIHJldHVybiBwYXRoXG4gICAgLnJlcGxhY2UoL15bQS1aXTovLCAnJykgLy8gcmVtb3ZlIFdpbmRvd3Mtc3R5bGUgcHJlZml4XG4gICAgLnJlcGxhY2UoL1xcXFwvZywgJy8nKTsgLy8gcmVwbGFjZSBhbGwgYFxcYCBpbnN0YW5jZXMgd2l0aCBgL2Bcbn1cblxuLyoqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIG1vZHVsZSBuYW1lIGZyb20gYSBmaWxlbmFtZSAqL1xuZnVuY3Rpb24gY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lKFxuICBiYXNlUGF0aCA9IHByb2Nlc3MuYXJndlsxXSA/IGNvcmUuZGlybmFtZShwcm9jZXNzLmFyZ3ZbMV0pIDogcHJvY2Vzcy5jd2QoKSxcbiAgaXNXaW5kb3dzID0gbm9kZV9wYXRoLnNlcCA9PT0gJ1xcXFwnLFxuKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWRCYXNlID0gaXNXaW5kb3dzID8gbm9ybWFsaXplV2luZG93c1BhdGgoYmFzZVBhdGgpIDogYmFzZVBhdGg7XG5cbiAgcmV0dXJuIChmaWxlbmFtZSkgPT4ge1xuICAgIGlmICghZmlsZW5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBub3JtYWxpemVkRmlsZW5hbWUgPSBpc1dpbmRvd3MgPyBub3JtYWxpemVXaW5kb3dzUGF0aChmaWxlbmFtZSkgOiBmaWxlbmFtZTtcblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItY29uc3RcbiAgICBsZXQgeyBkaXIsIGJhc2U6IGZpbGUsIGV4dCB9ID0gbm9kZV9wYXRoLnBvc2l4LnBhcnNlKG5vcm1hbGl6ZWRGaWxlbmFtZSk7XG5cbiAgICBpZiAoZXh0ID09PSAnLmpzJyB8fCBleHQgPT09ICcubWpzJyB8fCBleHQgPT09ICcuY2pzJykge1xuICAgICAgZmlsZSA9IGZpbGUuc2xpY2UoMCwgZXh0Lmxlbmd0aCAqIC0xKTtcbiAgICB9XG5cbiAgICAvLyBUaGUgZmlsZSBuYW1lIG1pZ2h0IGJlIFVSSS1lbmNvZGVkIHdoaWNoIHdlIHdhbnQgdG8gZGVjb2RlIHRvXG4gICAgLy8gdGhlIG9yaWdpbmFsIGZpbGUgbmFtZS5cbiAgICBjb25zdCBkZWNvZGVkRmlsZSA9IGRlY29kZVVSSUNvbXBvbmVudChmaWxlKTtcblxuICAgIGlmICghZGlyKSB7XG4gICAgICAvLyBObyBkaXJuYW1lIHdoYXRzb2V2ZXJcbiAgICAgIGRpciA9ICcuJztcbiAgICB9XG5cbiAgICBjb25zdCBuID0gZGlyLmxhc3RJbmRleE9mKCcvbm9kZV9tb2R1bGVzJyk7XG4gICAgaWYgKG4gPiAtMSkge1xuICAgICAgcmV0dXJuIGAke2Rpci5zbGljZShuICsgMTQpLnJlcGxhY2UoL1xcLy9nLCAnLicpfToke2RlY29kZWRGaWxlfWA7XG4gICAgfVxuXG4gICAgLy8gTGV0J3Mgc2VlIGlmIGl0J3MgYSBwYXJ0IG9mIHRoZSBtYWluIG1vZHVsZVxuICAgIC8vIFRvIGJlIGEgcGFydCBvZiBtYWluIG1vZHVsZSwgaXQgaGFzIHRvIHNoYXJlIHRoZSBzYW1lIGJhc2VcbiAgICBpZiAoZGlyLnN0YXJ0c1dpdGgobm9ybWFsaXplZEJhc2UpKSB7XG4gICAgICBjb25zdCBtb2R1bGVOYW1lID0gZGlyLnNsaWNlKG5vcm1hbGl6ZWRCYXNlLmxlbmd0aCArIDEpLnJlcGxhY2UoL1xcLy9nLCAnLicpO1xuICAgICAgcmV0dXJuIG1vZHVsZU5hbWUgPyBgJHttb2R1bGVOYW1lfToke2RlY29kZWRGaWxlfWAgOiBkZWNvZGVkRmlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVjb2RlZEZpbGU7XG4gIH07XG59XG5cbmV4cG9ydHMuY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lID0gY3JlYXRlR2V0TW9kdWxlRnJvbUZpbGVuYW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW9kdWxlLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@sentry+node-core@10.19.0_@opentelemetry+api@1.9.0_@opentelemetry+context-async-hooks@2.1.0_@_2gdhr6kvdpwhnjdioymkb4dbgu/node_modules/@sentry/node-core/build/cjs/utils/module.js\n");

/***/ })

};
;