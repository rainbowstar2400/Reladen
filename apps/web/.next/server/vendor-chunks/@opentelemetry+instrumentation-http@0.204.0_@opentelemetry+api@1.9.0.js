"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0";
exports.ids = ["vendor-chunks/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0"];
exports.modules = {

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AttributeNames = void 0;\n/**\n * https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/http.md\n */\nvar AttributeNames;\n(function (AttributeNames) {\n    AttributeNames[\"HTTP_ERROR_NAME\"] = \"http.error_name\";\n    AttributeNames[\"HTTP_ERROR_MESSAGE\"] = \"http.error_message\";\n    AttributeNames[\"HTTP_STATUS_TEXT\"] = \"http.status_text\";\n})(AttributeNames = exports.AttributeNames || (exports.AttributeNames = {}));\n//# sourceMappingURL=AttributeNames.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taHR0cEAwLjIwNC4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWh0dHAvYnVpbGQvc3JjL2VudW1zL0F0dHJpYnV0ZU5hbWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyw4Q0FBOEMsc0JBQXNCLEtBQUs7QUFDMUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1odHRwQDAuMjA0LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24taHR0cC9idWlsZC9zcmMvZW51bXMvQXR0cmlidXRlTmFtZXMuanM/MzNkZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkF0dHJpYnV0ZU5hbWVzID0gdm9pZCAwO1xuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vb3Blbi10ZWxlbWV0cnkvb3BlbnRlbGVtZXRyeS1zcGVjaWZpY2F0aW9uL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vdHJhY2Uvc2VtYW50aWNfY29udmVudGlvbnMvaHR0cC5tZFxuICovXG52YXIgQXR0cmlidXRlTmFtZXM7XG4oZnVuY3Rpb24gKEF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgQXR0cmlidXRlTmFtZXNbXCJIVFRQX0VSUk9SX05BTUVcIl0gPSBcImh0dHAuZXJyb3JfbmFtZVwiO1xuICAgIEF0dHJpYnV0ZU5hbWVzW1wiSFRUUF9FUlJPUl9NRVNTQUdFXCJdID0gXCJodHRwLmVycm9yX21lc3NhZ2VcIjtcbiAgICBBdHRyaWJ1dGVOYW1lc1tcIkhUVFBfU1RBVFVTX1RFWFRcIl0gPSBcImh0dHAuc3RhdHVzX3RleHRcIjtcbn0pKEF0dHJpYnV0ZU5hbWVzID0gZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyB8fCAoZXhwb3J0cy5BdHRyaWJ1dGVOYW1lcyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdHRyaWJ1dGVOYW1lcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js":
/*!************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js ***!
  \************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\");\n/**\n * `node:http` and `node:https` instrumentation for OpenTelemetry\n */\nclass HttpInstrumentation extends instrumentation_1.InstrumentationBase {\n    /** keep track on spans not ended */\n    _spanNotEnded = new WeakSet();\n    _headerCapture;\n    _semconvStability = instrumentation_1.SemconvStability.OLD;\n    constructor(config = {}) {\n        super('@opentelemetry/instrumentation-http', version_1.VERSION, config);\n        this._headerCapture = this._createHeaderCapture();\n        this._semconvStability = (0, instrumentation_1.semconvStabilityFromStr)('http', process.env.OTEL_SEMCONV_STABILITY_OPT_IN);\n    }\n    _updateMetricInstruments() {\n        this._oldHttpServerDurationHistogram = this.meter.createHistogram('http.server.duration', {\n            description: 'Measures the duration of inbound HTTP requests.',\n            unit: 'ms',\n            valueType: api_1.ValueType.DOUBLE,\n        });\n        this._oldHttpClientDurationHistogram = this.meter.createHistogram('http.client.duration', {\n            description: 'Measures the duration of outbound HTTP requests.',\n            unit: 'ms',\n            valueType: api_1.ValueType.DOUBLE,\n        });\n        this._stableHttpServerDurationHistogram = this.meter.createHistogram(semantic_conventions_1.METRIC_HTTP_SERVER_REQUEST_DURATION, {\n            description: 'Duration of HTTP server requests.',\n            unit: 's',\n            valueType: api_1.ValueType.DOUBLE,\n            advice: {\n                explicitBucketBoundaries: [\n                    0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5,\n                    7.5, 10,\n                ],\n            },\n        });\n        this._stableHttpClientDurationHistogram = this.meter.createHistogram(semantic_conventions_1.METRIC_HTTP_CLIENT_REQUEST_DURATION, {\n            description: 'Duration of HTTP client requests.',\n            unit: 's',\n            valueType: api_1.ValueType.DOUBLE,\n            advice: {\n                explicitBucketBoundaries: [\n                    0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5,\n                    7.5, 10,\n                ],\n            },\n        });\n    }\n    _recordServerDuration(durationMs, oldAttributes, stableAttributes) {\n        if (this._semconvStability & instrumentation_1.SemconvStability.OLD) {\n            // old histogram is counted in MS\n            this._oldHttpServerDurationHistogram.record(durationMs, oldAttributes);\n        }\n        if (this._semconvStability & instrumentation_1.SemconvStability.STABLE) {\n            // stable histogram is counted in S\n            this._stableHttpServerDurationHistogram.record(durationMs / 1000, stableAttributes);\n        }\n    }\n    _recordClientDuration(durationMs, oldAttributes, stableAttributes) {\n        if (this._semconvStability & instrumentation_1.SemconvStability.OLD) {\n            // old histogram is counted in MS\n            this._oldHttpClientDurationHistogram.record(durationMs, oldAttributes);\n        }\n        if (this._semconvStability & instrumentation_1.SemconvStability.STABLE) {\n            // stable histogram is counted in S\n            this._stableHttpClientDurationHistogram.record(durationMs / 1000, stableAttributes);\n        }\n    }\n    setConfig(config = {}) {\n        super.setConfig(config);\n        this._headerCapture = this._createHeaderCapture();\n    }\n    init() {\n        return [this._getHttpsInstrumentation(), this._getHttpInstrumentation()];\n    }\n    _getHttpInstrumentation() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition('http', ['*'], (moduleExports) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const isESM = moduleExports[Symbol.toStringTag] === 'Module';\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                const patchedRequest = this._wrap(moduleExports, 'request', this._getPatchOutgoingRequestFunction('http'));\n                const patchedGet = this._wrap(moduleExports, 'get', this._getPatchOutgoingGetFunction(patchedRequest));\n                if (isESM) {\n                    // To handle `import http from 'http'`, which returns the default\n                    // export, we need to set `module.default.*`.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    moduleExports.default.request = patchedRequest;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    moduleExports.default.get = patchedGet;\n                }\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._wrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction('http'));\n            }\n            return moduleExports;\n        }, (moduleExports) => {\n            if (moduleExports === undefined)\n                return;\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                this._unwrap(moduleExports, 'request');\n                this._unwrap(moduleExports, 'get');\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._unwrap(moduleExports.Server.prototype, 'emit');\n            }\n        });\n    }\n    _getHttpsInstrumentation() {\n        return new instrumentation_1.InstrumentationNodeModuleDefinition('https', ['*'], (moduleExports) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const isESM = moduleExports[Symbol.toStringTag] === 'Module';\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                const patchedRequest = this._wrap(moduleExports, 'request', this._getPatchHttpsOutgoingRequestFunction('https'));\n                const patchedGet = this._wrap(moduleExports, 'get', this._getPatchHttpsOutgoingGetFunction(patchedRequest));\n                if (isESM) {\n                    // To handle `import https from 'https'`, which returns the default\n                    // export, we need to set `module.default.*`.\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    moduleExports.default.request = patchedRequest;\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    moduleExports.default.get = patchedGet;\n                }\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._wrap(moduleExports.Server.prototype, 'emit', this._getPatchIncomingRequestFunction('https'));\n            }\n            return moduleExports;\n        }, (moduleExports) => {\n            if (moduleExports === undefined)\n                return;\n            if (!this.getConfig().disableOutgoingRequestInstrumentation) {\n                this._unwrap(moduleExports, 'request');\n                this._unwrap(moduleExports, 'get');\n            }\n            if (!this.getConfig().disableIncomingRequestInstrumentation) {\n                this._unwrap(moduleExports.Server.prototype, 'emit');\n            }\n        });\n    }\n    /**\n     * Creates spans for incoming requests, restoring spans' context if applied.\n     */\n    _getPatchIncomingRequestFunction(component) {\n        return (original) => {\n            return this._incomingRequestFunction(component, original);\n        };\n    }\n    /**\n     * Creates spans for outgoing requests, sending spans' context for distributed\n     * tracing.\n     */\n    _getPatchOutgoingRequestFunction(component) {\n        return (original) => {\n            return this._outgoingRequestFunction(component, original);\n        };\n    }\n    _getPatchOutgoingGetFunction(clientRequest) {\n        return (_original) => {\n            // Re-implement http.get. This needs to be done (instead of using\n            // getPatchOutgoingRequestFunction to patch it) because we need to\n            // set the trace context header before the returned http.ClientRequest is\n            // ended. The Node.js docs state that the only differences between\n            // request and get are that (1) get defaults to the HTTP GET method and\n            // (2) the returned request object is ended immediately. The former is\n            // already true (at least in supported Node versions up to v10), so we\n            // simply follow the latter. Ref:\n            // https://nodejs.org/dist/latest/docs/api/http.html#http_http_get_options_callback\n            // https://github.com/googleapis/cloud-trace-nodejs/blob/master/src/instrumentations/instrumentation-http.ts#L198\n            return function outgoingGetRequest(options, ...args) {\n                const req = clientRequest(options, ...args);\n                req.end();\n                return req;\n            };\n        };\n    }\n    /** Patches HTTPS outgoing requests */\n    _getPatchHttpsOutgoingRequestFunction(component) {\n        return (original) => {\n            const instrumentation = this;\n            return function httpsOutgoingRequest(\n            // eslint-disable-next-line n/no-unsupported-features/node-builtins\n            options, ...args) {\n                // Makes sure options will have default HTTPS parameters\n                if (component === 'https' &&\n                    typeof options === 'object' &&\n                    options?.constructor?.name !== 'URL') {\n                    options = Object.assign({}, options);\n                    instrumentation._setDefaultOptions(options);\n                }\n                return instrumentation._getPatchOutgoingRequestFunction(component)(original)(options, ...args);\n            };\n        };\n    }\n    _setDefaultOptions(options) {\n        options.protocol = options.protocol || 'https:';\n        options.port = options.port || 443;\n    }\n    /** Patches HTTPS outgoing get requests */\n    _getPatchHttpsOutgoingGetFunction(clientRequest) {\n        return (original) => {\n            const instrumentation = this;\n            return function httpsOutgoingRequest(\n            // eslint-disable-next-line n/no-unsupported-features/node-builtins\n            options, ...args) {\n                return instrumentation._getPatchOutgoingGetFunction(clientRequest)(original)(options, ...args);\n            };\n        };\n    }\n    /**\n     * Attach event listeners to a client request to end span and add span attributes.\n     *\n     * @param request The original request object.\n     * @param span representing the current operation\n     * @param startTime representing the start time of the request to calculate duration in Metric\n     * @param oldMetricAttributes metric attributes for old semantic conventions\n     * @param stableMetricAttributes metric attributes for new semantic conventions\n     */\n    _traceClientRequest(request, span, startTime, oldMetricAttributes, stableMetricAttributes) {\n        if (this.getConfig().requestHook) {\n            this._callRequestHook(span, request);\n        }\n        /**\n         * Determines if the request has errored or the response has ended/errored.\n         */\n        let responseFinished = false;\n        /*\n         * User 'response' event listeners can be added before our listener,\n         * force our listener to be the first, so response emitter is bound\n         * before any user listeners are added to it.\n         */\n        request.prependListener('response', (response) => {\n            this._diag.debug('outgoingRequest on response()');\n            if (request.listenerCount('response') <= 1) {\n                response.resume();\n            }\n            const responseAttributes = (0, utils_1.getOutgoingRequestAttributesOnResponse)(response, this._semconvStability);\n            span.setAttributes(responseAttributes);\n            oldMetricAttributes = Object.assign(oldMetricAttributes, (0, utils_1.getOutgoingRequestMetricAttributesOnResponse)(responseAttributes));\n            stableMetricAttributes = Object.assign(stableMetricAttributes, (0, utils_1.getOutgoingStableRequestMetricAttributesOnResponse)(responseAttributes));\n            if (this.getConfig().responseHook) {\n                this._callResponseHook(span, response);\n            }\n            this._headerCapture.client.captureRequestHeaders(span, header => request.getHeader(header));\n            this._headerCapture.client.captureResponseHeaders(span, header => response.headers[header]);\n            api_1.context.bind(api_1.context.active(), response);\n            const endHandler = () => {\n                this._diag.debug('outgoingRequest on end()');\n                if (responseFinished) {\n                    return;\n                }\n                responseFinished = true;\n                let status;\n                if (response.aborted && !response.complete) {\n                    status = { code: api_1.SpanStatusCode.ERROR };\n                }\n                else {\n                    // behaves same for new and old semconv\n                    status = {\n                        code: (0, utils_1.parseResponseStatus)(api_1.SpanKind.CLIENT, response.statusCode),\n                    };\n                }\n                span.setStatus(status);\n                if (this.getConfig().applyCustomAttributesOnSpan) {\n                    (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().applyCustomAttributesOnSpan(span, request, response), () => { }, true);\n                }\n                this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, oldMetricAttributes, stableMetricAttributes);\n            };\n            response.on('end', endHandler);\n            response.on(events_1.errorMonitor, (error) => {\n                this._diag.debug('outgoingRequest on error()', error);\n                if (responseFinished) {\n                    return;\n                }\n                responseFinished = true;\n                this._onOutgoingRequestError(span, oldMetricAttributes, stableMetricAttributes, startTime, error);\n            });\n        });\n        request.on('close', () => {\n            this._diag.debug('outgoingRequest on request close()');\n            if (request.aborted || responseFinished) {\n                return;\n            }\n            responseFinished = true;\n            this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, oldMetricAttributes, stableMetricAttributes);\n        });\n        request.on(events_1.errorMonitor, (error) => {\n            this._diag.debug('outgoingRequest on request error()', error);\n            if (responseFinished) {\n                return;\n            }\n            responseFinished = true;\n            this._onOutgoingRequestError(span, oldMetricAttributes, stableMetricAttributes, startTime, error);\n        });\n        this._diag.debug('http.ClientRequest return request');\n        return request;\n    }\n    _incomingRequestFunction(component, original) {\n        const instrumentation = this;\n        return function incomingRequest(event, ...args) {\n            // Only traces request events\n            if (event !== 'request') {\n                return original.apply(this, [event, ...args]);\n            }\n            const request = args[0];\n            const response = args[1];\n            const method = request.method || 'GET';\n            instrumentation._diag.debug(`${component} instrumentation incomingRequest`);\n            if ((0, instrumentation_1.safeExecuteInTheMiddle)(() => instrumentation.getConfig().ignoreIncomingRequestHook?.(request), (e) => {\n                if (e != null) {\n                    instrumentation._diag.error('caught ignoreIncomingRequestHook error: ', e);\n                }\n            }, true)) {\n                return api_1.context.with((0, core_1.suppressTracing)(api_1.context.active()), () => {\n                    api_1.context.bind(api_1.context.active(), request);\n                    api_1.context.bind(api_1.context.active(), response);\n                    return original.apply(this, [event, ...args]);\n                });\n            }\n            const headers = request.headers;\n            const spanAttributes = (0, utils_1.getIncomingRequestAttributes)(request, {\n                component: component,\n                serverName: instrumentation.getConfig().serverName,\n                hookAttributes: instrumentation._callStartSpanHook(request, instrumentation.getConfig().startIncomingSpanHook),\n                semconvStability: instrumentation._semconvStability,\n                enableSyntheticSourceDetection: instrumentation.getConfig().enableSyntheticSourceDetection || false,\n            }, instrumentation._diag);\n            const spanOptions = {\n                kind: api_1.SpanKind.SERVER,\n                attributes: spanAttributes,\n            };\n            const startTime = (0, core_1.hrTime)();\n            const oldMetricAttributes = (0, utils_1.getIncomingRequestMetricAttributes)(spanAttributes);\n            // request method and url.scheme are both required span attributes\n            const stableMetricAttributes = {\n                [semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD]: spanAttributes[semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD],\n                [semantic_conventions_1.ATTR_URL_SCHEME]: spanAttributes[semantic_conventions_1.ATTR_URL_SCHEME],\n            };\n            // recommended if and only if one was sent, same as span recommendation\n            if (spanAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION]) {\n                stableMetricAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION] =\n                    spanAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION];\n            }\n            const ctx = api_1.propagation.extract(api_1.ROOT_CONTEXT, headers);\n            const span = instrumentation._startHttpSpan(method, spanOptions, ctx);\n            const rpcMetadata = {\n                type: core_1.RPCType.HTTP,\n                span,\n            };\n            return api_1.context.with((0, core_1.setRPCMetadata)(api_1.trace.setSpan(ctx, span), rpcMetadata), () => {\n                api_1.context.bind(api_1.context.active(), request);\n                api_1.context.bind(api_1.context.active(), response);\n                if (instrumentation.getConfig().requestHook) {\n                    instrumentation._callRequestHook(span, request);\n                }\n                if (instrumentation.getConfig().responseHook) {\n                    instrumentation._callResponseHook(span, response);\n                }\n                instrumentation._headerCapture.server.captureRequestHeaders(span, header => request.headers[header]);\n                // After 'error', no further events other than 'close' should be emitted.\n                let hasError = false;\n                response.on('close', () => {\n                    if (hasError) {\n                        return;\n                    }\n                    instrumentation._onServerResponseFinish(request, response, span, oldMetricAttributes, stableMetricAttributes, startTime);\n                });\n                response.on(events_1.errorMonitor, (err) => {\n                    hasError = true;\n                    instrumentation._onServerResponseError(span, oldMetricAttributes, stableMetricAttributes, startTime, err);\n                });\n                return (0, instrumentation_1.safeExecuteInTheMiddle)(() => original.apply(this, [event, ...args]), error => {\n                    if (error) {\n                        instrumentation._onServerResponseError(span, oldMetricAttributes, stableMetricAttributes, startTime, error);\n                        throw error;\n                    }\n                });\n            });\n        };\n    }\n    _outgoingRequestFunction(component, original) {\n        const instrumentation = this;\n        return function outgoingRequest(options, ...args) {\n            if (!(0, utils_1.isValidOptionsType)(options)) {\n                return original.apply(this, [options, ...args]);\n            }\n            const extraOptions = typeof args[0] === 'object' &&\n                (typeof options === 'string' || options instanceof url.URL)\n                ? args.shift()\n                : undefined;\n            const { method, invalidUrl, optionsParsed } = (0, utils_1.getRequestInfo)(instrumentation._diag, options, extraOptions);\n            if ((0, instrumentation_1.safeExecuteInTheMiddle)(() => instrumentation\n                .getConfig()\n                .ignoreOutgoingRequestHook?.(optionsParsed), (e) => {\n                if (e != null) {\n                    instrumentation._diag.error('caught ignoreOutgoingRequestHook error: ', e);\n                }\n            }, true)) {\n                return original.apply(this, [optionsParsed, ...args]);\n            }\n            const { hostname, port } = (0, utils_1.extractHostnameAndPort)(optionsParsed);\n            const attributes = (0, utils_1.getOutgoingRequestAttributes)(optionsParsed, {\n                component,\n                port,\n                hostname,\n                hookAttributes: instrumentation._callStartSpanHook(optionsParsed, instrumentation.getConfig().startOutgoingSpanHook),\n                redactedQueryParams: instrumentation.getConfig().redactedQueryParams, // Added config for adding custom query strings\n            }, instrumentation._semconvStability, instrumentation.getConfig().enableSyntheticSourceDetection || false);\n            const startTime = (0, core_1.hrTime)();\n            const oldMetricAttributes = (0, utils_1.getOutgoingRequestMetricAttributes)(attributes);\n            // request method, server address, and server port are both required span attributes\n            const stableMetricAttributes = {\n                [semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD]: attributes[semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD],\n                [semantic_conventions_1.ATTR_SERVER_ADDRESS]: attributes[semantic_conventions_1.ATTR_SERVER_ADDRESS],\n                [semantic_conventions_1.ATTR_SERVER_PORT]: attributes[semantic_conventions_1.ATTR_SERVER_PORT],\n            };\n            // required if and only if one was sent, same as span requirement\n            if (attributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE]) {\n                stableMetricAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE] =\n                    attributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE];\n            }\n            // recommended if and only if one was sent, same as span recommendation\n            if (attributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION]) {\n                stableMetricAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION] =\n                    attributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION];\n            }\n            const spanOptions = {\n                kind: api_1.SpanKind.CLIENT,\n                attributes,\n            };\n            const span = instrumentation._startHttpSpan(method, spanOptions);\n            const parentContext = api_1.context.active();\n            const requestContext = api_1.trace.setSpan(parentContext, span);\n            if (!optionsParsed.headers) {\n                optionsParsed.headers = {};\n            }\n            else {\n                // Make a copy of the headers object to avoid mutating an object the\n                // caller might have a reference to.\n                optionsParsed.headers = Object.assign({}, optionsParsed.headers);\n            }\n            api_1.propagation.inject(requestContext, optionsParsed.headers);\n            return api_1.context.with(requestContext, () => {\n                /*\n                 * The response callback is registered before ClientRequest is bound,\n                 * thus it is needed to bind it before the function call.\n                 */\n                const cb = args[args.length - 1];\n                if (typeof cb === 'function') {\n                    args[args.length - 1] = api_1.context.bind(parentContext, cb);\n                }\n                const request = (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                    if (invalidUrl) {\n                        // we know that the url is invalid, there's no point in injecting context as it will fail validation.\n                        // Passing in what the user provided will give the user an error that matches what they'd see without\n                        // the instrumentation.\n                        return original.apply(this, [options, ...args]);\n                    }\n                    else {\n                        return original.apply(this, [optionsParsed, ...args]);\n                    }\n                }, error => {\n                    if (error) {\n                        instrumentation._onOutgoingRequestError(span, oldMetricAttributes, stableMetricAttributes, startTime, error);\n                        throw error;\n                    }\n                });\n                instrumentation._diag.debug(`${component} instrumentation outgoingRequest`);\n                api_1.context.bind(parentContext, request);\n                return instrumentation._traceClientRequest(request, span, startTime, oldMetricAttributes, stableMetricAttributes);\n            });\n        };\n    }\n    _onServerResponseFinish(request, response, span, oldMetricAttributes, stableMetricAttributes, startTime) {\n        const attributes = (0, utils_1.getIncomingRequestAttributesOnResponse)(request, response, this._semconvStability);\n        oldMetricAttributes = Object.assign(oldMetricAttributes, (0, utils_1.getIncomingRequestMetricAttributesOnResponse)(attributes));\n        stableMetricAttributes = Object.assign(stableMetricAttributes, (0, utils_1.getIncomingStableRequestMetricAttributesOnResponse)(attributes));\n        this._headerCapture.server.captureResponseHeaders(span, header => response.getHeader(header));\n        span.setAttributes(attributes).setStatus({\n            code: (0, utils_1.parseResponseStatus)(api_1.SpanKind.SERVER, response.statusCode),\n        });\n        const route = attributes[semantic_conventions_1.ATTR_HTTP_ROUTE];\n        if (route) {\n            span.updateName(`${request.method || 'GET'} ${route}`);\n        }\n        if (this.getConfig().applyCustomAttributesOnSpan) {\n            (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().applyCustomAttributesOnSpan(span, request, response), () => { }, true);\n        }\n        this._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, oldMetricAttributes, stableMetricAttributes);\n    }\n    _onOutgoingRequestError(span, oldMetricAttributes, stableMetricAttributes, startTime, error) {\n        (0, utils_1.setSpanWithError)(span, error, this._semconvStability);\n        stableMetricAttributes[semantic_conventions_1.ATTR_ERROR_TYPE] = error.name;\n        this._closeHttpSpan(span, api_1.SpanKind.CLIENT, startTime, oldMetricAttributes, stableMetricAttributes);\n    }\n    _onServerResponseError(span, oldMetricAttributes, stableMetricAttributes, startTime, error) {\n        (0, utils_1.setSpanWithError)(span, error, this._semconvStability);\n        stableMetricAttributes[semantic_conventions_1.ATTR_ERROR_TYPE] = error.name;\n        this._closeHttpSpan(span, api_1.SpanKind.SERVER, startTime, oldMetricAttributes, stableMetricAttributes);\n    }\n    _startHttpSpan(name, options, ctx = api_1.context.active()) {\n        /*\n         * If a parent is required but not present, we use a `NoopSpan` to still\n         * propagate context without recording it.\n         */\n        const requireParent = options.kind === api_1.SpanKind.CLIENT\n            ? this.getConfig().requireParentforOutgoingSpans\n            : this.getConfig().requireParentforIncomingSpans;\n        let span;\n        const currentSpan = api_1.trace.getSpan(ctx);\n        if (requireParent === true && currentSpan === undefined) {\n            span = api_1.trace.wrapSpanContext(api_1.INVALID_SPAN_CONTEXT);\n        }\n        else if (requireParent === true && currentSpan?.spanContext().isRemote) {\n            span = currentSpan;\n        }\n        else {\n            span = this.tracer.startSpan(name, options, ctx);\n        }\n        this._spanNotEnded.add(span);\n        return span;\n    }\n    _closeHttpSpan(span, spanKind, startTime, oldMetricAttributes, stableMetricAttributes) {\n        if (!this._spanNotEnded.has(span)) {\n            return;\n        }\n        span.end();\n        this._spanNotEnded.delete(span);\n        // Record metrics\n        const duration = (0, core_1.hrTimeToMilliseconds)((0, core_1.hrTimeDuration)(startTime, (0, core_1.hrTime)()));\n        if (spanKind === api_1.SpanKind.SERVER) {\n            this._recordServerDuration(duration, oldMetricAttributes, stableMetricAttributes);\n        }\n        else if (spanKind === api_1.SpanKind.CLIENT) {\n            this._recordClientDuration(duration, oldMetricAttributes, stableMetricAttributes);\n        }\n    }\n    _callResponseHook(span, response) {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().responseHook(span, response), () => { }, true);\n    }\n    _callRequestHook(span, request) {\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => this.getConfig().requestHook(span, request), () => { }, true);\n    }\n    _callStartSpanHook(request, hookFunc) {\n        if (typeof hookFunc === 'function') {\n            return (0, instrumentation_1.safeExecuteInTheMiddle)(() => hookFunc(request), () => { }, true);\n        }\n    }\n    _createHeaderCapture() {\n        const config = this.getConfig();\n        return {\n            client: {\n                captureRequestHeaders: (0, utils_1.headerCapture)('request', config.headersToSpanAttributes?.client?.requestHeaders ?? []),\n                captureResponseHeaders: (0, utils_1.headerCapture)('response', config.headersToSpanAttributes?.client?.responseHeaders ?? []),\n            },\n            server: {\n                captureRequestHeaders: (0, utils_1.headerCapture)('request', config.headersToSpanAttributes?.server?.requestHeaders ?? []),\n                captureResponseHeaders: (0, utils_1.headerCapture)('response', config.headersToSpanAttributes?.server?.responseHeaders ?? []),\n            },\n        };\n    }\n}\nexports.HttpInstrumentation = HttpInstrumentation;\n//# sourceMappingURL=http.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js ***!
  \*************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpInstrumentation = void 0;\nvar http_1 = __webpack_require__(/*! ./http */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/http.js\");\nObject.defineProperty(exports, \"HttpInstrumentation\", ({ enumerable: true, get: function () { return http_1.HttpInstrumentation; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taHR0cEAwLjIwNC4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWh0dHAvYnVpbGQvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQjtBQUMzQixhQUFhLG1CQUFPLENBQUMsNkxBQVE7QUFDN0IsdURBQXNELEVBQUUscUNBQXFDLHNDQUFzQyxFQUFDO0FBQ3BJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taHR0cEAwLjIwNC4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWh0dHAvYnVpbGQvc3JjL2luZGV4LmpzPzEyNjMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5IdHRwSW5zdHJ1bWVudGF0aW9uID0gdm9pZCAwO1xudmFyIGh0dHBfMSA9IHJlcXVpcmUoXCIuL2h0dHBcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJIdHRwSW5zdHJ1bWVudGF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBodHRwXzEuSHR0cEluc3RydW1lbnRhdGlvbjsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/internal-types.js":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/internal-types.js ***!
  \**********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_QUERY_STRINGS_TO_REDACT = exports.STR_REDACTED = exports.SYNTHETIC_BOT_NAMES = exports.SYNTHETIC_TEST_NAMES = void 0;\n/**\n * Names of possible synthetic test sources.\n */\nexports.SYNTHETIC_TEST_NAMES = ['alwayson'];\n/**\n * Names of possible synthetic bot sources.\n */\nexports.SYNTHETIC_BOT_NAMES = ['googlebot', 'bingbot'];\n/**\n * REDACTED string used to replace sensitive information in URLs.\n */\nexports.STR_REDACTED = 'REDACTED';\n/**\n * List of URL query keys that are considered sensitive and whose value should be redacted.\n */\nexports.DEFAULT_QUERY_STRINGS_TO_REDACT = [\n    'sig',\n    'Signature',\n    'AWSAccessKeyId',\n    'X-Goog-Signature',\n];\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taHR0cEAwLjIwNC4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWh0dHAvYnVpbGQvc3JjL2ludGVybmFsLXR5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVDQUF1QyxHQUFHLG9CQUFvQixHQUFHLDJCQUEyQixHQUFHLDRCQUE0QjtBQUMzSDtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taHR0cEAwLjIwNC4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWh0dHAvYnVpbGQvc3JjL2ludGVybmFsLXR5cGVzLmpzPzVjYmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ERUZBVUxUX1FVRVJZX1NUUklOR1NfVE9fUkVEQUNUID0gZXhwb3J0cy5TVFJfUkVEQUNURUQgPSBleHBvcnRzLlNZTlRIRVRJQ19CT1RfTkFNRVMgPSBleHBvcnRzLlNZTlRIRVRJQ19URVNUX05BTUVTID0gdm9pZCAwO1xuLyoqXG4gKiBOYW1lcyBvZiBwb3NzaWJsZSBzeW50aGV0aWMgdGVzdCBzb3VyY2VzLlxuICovXG5leHBvcnRzLlNZTlRIRVRJQ19URVNUX05BTUVTID0gWydhbHdheXNvbiddO1xuLyoqXG4gKiBOYW1lcyBvZiBwb3NzaWJsZSBzeW50aGV0aWMgYm90IHNvdXJjZXMuXG4gKi9cbmV4cG9ydHMuU1lOVEhFVElDX0JPVF9OQU1FUyA9IFsnZ29vZ2xlYm90JywgJ2Jpbmdib3QnXTtcbi8qKlxuICogUkVEQUNURUQgc3RyaW5nIHVzZWQgdG8gcmVwbGFjZSBzZW5zaXRpdmUgaW5mb3JtYXRpb24gaW4gVVJMcy5cbiAqL1xuZXhwb3J0cy5TVFJfUkVEQUNURUQgPSAnUkVEQUNURUQnO1xuLyoqXG4gKiBMaXN0IG9mIFVSTCBxdWVyeSBrZXlzIHRoYXQgYXJlIGNvbnNpZGVyZWQgc2Vuc2l0aXZlIGFuZCB3aG9zZSB2YWx1ZSBzaG91bGQgYmUgcmVkYWN0ZWQuXG4gKi9cbmV4cG9ydHMuREVGQVVMVF9RVUVSWV9TVFJJTkdTX1RPX1JFREFDVCA9IFtcbiAgICAnc2lnJyxcbiAgICAnU2lnbmF0dXJlJyxcbiAgICAnQVdTQWNjZXNzS2V5SWQnLFxuICAgICdYLUdvb2ctU2lnbmF0dXJlJyxcbl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbC10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/semconv.js":
/*!***************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/semconv.js ***!
  \***************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HTTP_FLAVOR_VALUE_HTTP_1_1 = exports.NET_TRANSPORT_VALUE_IP_UDP = exports.NET_TRANSPORT_VALUE_IP_TCP = exports.ATTR_NET_TRANSPORT = exports.ATTR_NET_PEER_PORT = exports.ATTR_NET_PEER_NAME = exports.ATTR_NET_PEER_IP = exports.ATTR_NET_HOST_PORT = exports.ATTR_NET_HOST_NAME = exports.ATTR_NET_HOST_IP = exports.ATTR_HTTP_USER_AGENT = exports.ATTR_HTTP_URL = exports.ATTR_HTTP_TARGET = exports.ATTR_HTTP_STATUS_CODE = exports.ATTR_HTTP_SERVER_NAME = exports.ATTR_HTTP_SCHEME = exports.ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = exports.ATTR_HTTP_RESPONSE_CONTENT_LENGTH = exports.ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = exports.ATTR_HTTP_REQUEST_CONTENT_LENGTH = exports.ATTR_HTTP_METHOD = exports.ATTR_HTTP_HOST = exports.ATTR_HTTP_FLAVOR = exports.ATTR_HTTP_CLIENT_IP = exports.USER_AGENT_SYNTHETIC_TYPE_VALUE_TEST = exports.USER_AGENT_SYNTHETIC_TYPE_VALUE_BOT = exports.ATTR_USER_AGENT_SYNTHETIC_TYPE = void 0;\n/*\n * This file contains a copy of unstable semantic convention definitions\n * used by this package.\n * @see https://github.com/open-telemetry/opentelemetry-js/tree/main/semantic-conventions#unstable-semconv\n */\n/**\n * Specifies the category of synthetic traffic, such as tests or bots.\n *\n * @note This attribute **MAY** be derived from the contents of the `user_agent.original` attribute. Components that populate the attribute are responsible for determining what they consider to be synthetic bot or test traffic. This attribute can either be set for self-identification purposes, or on telemetry detected to be generated as a result of a synthetic request. This attribute is useful for distinguishing between genuine client traffic and synthetic traffic generated by bots or tests.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n */\nexports.ATTR_USER_AGENT_SYNTHETIC_TYPE = 'user_agent.synthetic.type';\n/**\n * Enum value \"bot\" for attribute {@link ATTR_USER_AGENT_SYNTHETIC_TYPE}.\n */\nexports.USER_AGENT_SYNTHETIC_TYPE_VALUE_BOT = 'bot';\n/**\n * Enum value \"test\" for attribute {@link ATTR_USER_AGENT_SYNTHETIC_TYPE}.\n */\nexports.USER_AGENT_SYNTHETIC_TYPE_VALUE_TEST = 'test';\n/**\n * Deprecated, use `client.address` instead.\n *\n * @example \"83.164.160.102\"\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `client.address`.\n */\nexports.ATTR_HTTP_CLIENT_IP = 'http.client_ip';\n/**\n * Deprecated, use `network.protocol.name` instead.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `network.protocol.name`.\n */\nexports.ATTR_HTTP_FLAVOR = 'http.flavor';\n/**\n * Deprecated, use one of `server.address`, `client.address` or `http.request.header.host` instead, depending on the usage.\n *\n * @example www.example.org\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by one of `server.address`, `client.address` or `http.request.header.host`, depending on the usage.\n */\nexports.ATTR_HTTP_HOST = 'http.host';\n/**\n * Deprecated, use `http.request.method` instead.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.request.method`.\n */\nexports.ATTR_HTTP_METHOD = 'http.method';\n/**\n * Deprecated, use `http.request.header.<key>` instead.\n *\n * @example 3495\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.request.header.<key>`.\n */\nexports.ATTR_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\n/**\n * Deprecated, use `http.request.body.size` instead.\n *\n * @example 5493\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.request.body.size`.\n */\nexports.ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';\n/**\n * Deprecated, use `http.response.header.<key>` instead.\n *\n * @example 3495\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.response.header.<key>`.\n */\nexports.ATTR_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\n/**\n * Deprecated, use `http.response.body.size` instead.\n *\n * @example 5493\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replace by `http.response.body.size`.\n */\nexports.ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';\n/**\n * Deprecated, use `url.scheme` instead.\n *\n * @example http\n * @example https\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `url.scheme` instead.\n */\nexports.ATTR_HTTP_SCHEME = 'http.scheme';\n/**\n * Deprecated, use `server.address` instead.\n *\n * @example example.com\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `server.address`.\n */\nexports.ATTR_HTTP_SERVER_NAME = 'http.server_name';\n/**\n * Deprecated, use `http.response.status_code` instead.\n *\n * @example 200\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `http.response.status_code`.\n */\nexports.ATTR_HTTP_STATUS_CODE = 'http.status_code';\n/**\n * Deprecated, use `url.path` and `url.query` instead.\n *\n * @example /search?q=OpenTelemetry#SemConv\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Split to `url.path` and `url.query.\n */\nexports.ATTR_HTTP_TARGET = 'http.target';\n/**\n * Deprecated, use `url.full` instead.\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `url.full`.\n */\nexports.ATTR_HTTP_URL = 'http.url';\n/**\n * Deprecated, use `user_agent.original` instead.\n *\n * @example CERN-LineMode/2.15 libwww/2.17b3\n * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `user_agent.original`.\n */\nexports.ATTR_HTTP_USER_AGENT = 'http.user_agent';\n/**\n * Deprecated, use `network.local.address`.\n *\n * @example \"192.168.0.1\"\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `network.local.address`.\n */\nexports.ATTR_NET_HOST_IP = 'net.host.ip';\n/**\n * Deprecated, use `server.address`.\n *\n * @example example.com\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `server.address`.\n */\nexports.ATTR_NET_HOST_NAME = 'net.host.name';\n/**\n * Deprecated, use `server.port`.\n *\n * @example 8080\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `server.port`.\n */\nexports.ATTR_NET_HOST_PORT = 'net.host.port';\n/**\n * Deprecated, use `network.peer.address`.\n *\n * @example \"127.0.0.1\"\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `network.peer.address`.\n */\nexports.ATTR_NET_PEER_IP = 'net.peer.ip';\n/**\n * Deprecated, use `server.address` on client spans and `client.address` on server spans.\n *\n * @example example.com\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `server.address` on client spans and `client.address` on server spans.\n */\nexports.ATTR_NET_PEER_NAME = 'net.peer.name';\n/**\n * Deprecated, use `server.port` on client spans and `client.port` on server spans.\n *\n * @example 8080\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `server.port` on client spans and `client.port` on server spans.\n */\nexports.ATTR_NET_PEER_PORT = 'net.peer.port';\n/**\n * Deprecated, use `network.transport`.\n *\n * @experimental This attribute is experimental and is subject to breaking changes in minor releases of `@opentelemetry/semantic-conventions`.\n *\n * @deprecated Replaced by `network.transport`.\n */\nexports.ATTR_NET_TRANSPORT = 'net.transport';\n/**\n * Enum value \"ip_tcp\" for attribute {@link ATTR_NET_TRANSPORT}.\n */\nexports.NET_TRANSPORT_VALUE_IP_TCP = 'ip_tcp';\n/**\n * Enum value \"ip_udp\" for attribute {@link ATTR_NET_TRANSPORT}.\n */\nexports.NET_TRANSPORT_VALUE_IP_UDP = 'ip_udp';\n/**\n * Enum value \"1.1\" for attribute {@link ATTR_HTTP_FLAVOR}.\n */\nexports.HTTP_FLAVOR_VALUE_HTTP_1_1 = '1.1';\n//# sourceMappingURL=semconv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/semconv.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js":
/*!*************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js ***!
  \*************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.headerCapture = exports.getIncomingStableRequestMetricAttributesOnResponse = exports.getIncomingRequestMetricAttributesOnResponse = exports.getIncomingRequestAttributesOnResponse = exports.getIncomingRequestMetricAttributes = exports.getIncomingRequestAttributes = exports.getRemoteClientAddress = exports.getOutgoingStableRequestMetricAttributesOnResponse = exports.getOutgoingRequestMetricAttributesOnResponse = exports.getOutgoingRequestAttributesOnResponse = exports.setAttributesFromHttpKind = exports.getOutgoingRequestMetricAttributes = exports.getOutgoingRequestAttributes = exports.extractHostnameAndPort = exports.isValidOptionsType = exports.getRequestInfo = exports.isCompressed = exports.setResponseContentLengthAttribute = exports.setRequestContentLengthAttribute = exports.setSpanWithError = exports.satisfiesPattern = exports.parseResponseStatus = exports.getAbsoluteUrl = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst semconv_1 = __webpack_require__(/*! ./semconv */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/semconv.js\");\nconst core_1 = __webpack_require__(/*! @opentelemetry/core */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+core@2.1.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/core/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst url = __webpack_require__(/*! url */ \"url\");\nconst AttributeNames_1 = __webpack_require__(/*! ./enums/AttributeNames */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/enums/AttributeNames.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/internal-types.js\");\nconst internal_types_2 = __webpack_require__(/*! ./internal-types */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/internal-types.js\");\n// eslint-disable-next-line @typescript-eslint/no-require-imports\nconst forwardedParse = __webpack_require__(/*! forwarded-parse */ \"(instrument)/../../node_modules/.pnpm/forwarded-parse@2.1.2/node_modules/forwarded-parse/index.js\");\n/**\n * Get an absolute url\n */\nconst getAbsoluteUrl = (requestUrl, headers, fallbackProtocol = 'http:', redactedQueryParams = Array.from(internal_types_2.DEFAULT_QUERY_STRINGS_TO_REDACT)) => {\n    const reqUrlObject = requestUrl || {};\n    const protocol = reqUrlObject.protocol || fallbackProtocol;\n    const port = (reqUrlObject.port || '').toString();\n    let path = reqUrlObject.path || '/';\n    let host = reqUrlObject.host || reqUrlObject.hostname || headers.host || 'localhost';\n    // if there is no port in host and there is a port\n    // it should be displayed if it's not 80 and 443 (default ports)\n    if (host.indexOf(':') === -1 &&\n        port &&\n        port !== '80' &&\n        port !== '443') {\n        host += `:${port}`;\n    }\n    // Redact sensitive query parameters\n    if (path.includes('?')) {\n        //const [pathname, query] = path.split('?', 2);\n        const parsedUrl = url.parse(path);\n        const pathname = parsedUrl.pathname || '';\n        const query = parsedUrl.query || '';\n        const searchParams = new URLSearchParams(query);\n        const sensitiveParamsToRedact = redactedQueryParams || [];\n        for (const sensitiveParam of sensitiveParamsToRedact) {\n            if (searchParams.has(sensitiveParam) &&\n                searchParams.get(sensitiveParam) !== '') {\n                searchParams.set(sensitiveParam, internal_types_2.STR_REDACTED);\n            }\n        }\n        const redactedQuery = searchParams.toString();\n        path = `${pathname}?${redactedQuery}`;\n    }\n    const authPart = reqUrlObject.auth ? `${internal_types_2.STR_REDACTED}:${internal_types_2.STR_REDACTED}@` : '';\n    return `${protocol}//${authPart}${host}${path}`;\n};\nexports.getAbsoluteUrl = getAbsoluteUrl;\n/**\n * Parse status code from HTTP response. [More details](https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/data-http.md#status)\n */\nconst parseResponseStatus = (kind, statusCode) => {\n    const upperBound = kind === api_1.SpanKind.CLIENT ? 400 : 500;\n    // 1xx, 2xx, 3xx are OK on client and server\n    // 4xx is OK on server\n    if (statusCode && statusCode >= 100 && statusCode < upperBound) {\n        return api_1.SpanStatusCode.UNSET;\n    }\n    // All other codes are error\n    return api_1.SpanStatusCode.ERROR;\n};\nexports.parseResponseStatus = parseResponseStatus;\n/**\n * Check whether the given obj match pattern\n * @param constant e.g URL of request\n * @param pattern Match pattern\n */\nconst satisfiesPattern = (constant, pattern) => {\n    if (typeof pattern === 'string') {\n        return pattern === constant;\n    }\n    else if (pattern instanceof RegExp) {\n        return pattern.test(constant);\n    }\n    else if (typeof pattern === 'function') {\n        return pattern(constant);\n    }\n    else {\n        throw new TypeError('Pattern is in unsupported datatype');\n    }\n};\nexports.satisfiesPattern = satisfiesPattern;\n/**\n * Sets the span with the error passed in params\n * @param {Span} span the span that need to be set\n * @param {Error} error error that will be set to span\n * @param {SemconvStability} semconvStability determines which semconv version to use\n */\nconst setSpanWithError = (span, error, semconvStability) => {\n    const message = error.message;\n    if (semconvStability & instrumentation_1.SemconvStability.OLD) {\n        span.setAttribute(AttributeNames_1.AttributeNames.HTTP_ERROR_NAME, error.name);\n        span.setAttribute(AttributeNames_1.AttributeNames.HTTP_ERROR_MESSAGE, message);\n    }\n    if (semconvStability & instrumentation_1.SemconvStability.STABLE) {\n        span.setAttribute(semantic_conventions_1.ATTR_ERROR_TYPE, error.name);\n    }\n    span.setStatus({ code: api_1.SpanStatusCode.ERROR, message });\n    span.recordException(error);\n};\nexports.setSpanWithError = setSpanWithError;\n/**\n * Adds attributes for request content-length and content-encoding HTTP headers\n * @param { IncomingMessage } Request object whose headers will be analyzed\n * @param { Attributes } Attributes object to be modified\n */\nconst setRequestContentLengthAttribute = (request, attributes) => {\n    const length = getContentLength(request.headers);\n    if (length === null)\n        return;\n    if ((0, exports.isCompressed)(request.headers)) {\n        attributes[semconv_1.ATTR_HTTP_REQUEST_CONTENT_LENGTH] = length;\n    }\n    else {\n        attributes[semconv_1.ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED] = length;\n    }\n};\nexports.setRequestContentLengthAttribute = setRequestContentLengthAttribute;\n/**\n * Adds attributes for response content-length and content-encoding HTTP headers\n * @param { IncomingMessage } Response object whose headers will be analyzed\n * @param { Attributes } Attributes object to be modified\n *\n * @deprecated this is for an older version of semconv. It is retained for compatibility using OTEL_SEMCONV_STABILITY_OPT_IN\n */\nconst setResponseContentLengthAttribute = (response, attributes) => {\n    const length = getContentLength(response.headers);\n    if (length === null)\n        return;\n    if ((0, exports.isCompressed)(response.headers)) {\n        attributes[semconv_1.ATTR_HTTP_RESPONSE_CONTENT_LENGTH] = length;\n    }\n    else {\n        attributes[semconv_1.ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED] = length;\n    }\n};\nexports.setResponseContentLengthAttribute = setResponseContentLengthAttribute;\nfunction getContentLength(headers) {\n    const contentLengthHeader = headers['content-length'];\n    if (contentLengthHeader === undefined)\n        return null;\n    const contentLength = parseInt(contentLengthHeader, 10);\n    if (isNaN(contentLength))\n        return null;\n    return contentLength;\n}\nconst isCompressed = (headers) => {\n    const encoding = headers['content-encoding'];\n    return !!encoding && encoding !== 'identity';\n};\nexports.isCompressed = isCompressed;\n/**\n * Mimics Node.js conversion of URL strings to RequestOptions expected by\n * `http.request` and `https.request` APIs.\n *\n * See https://github.com/nodejs/node/blob/2505e217bba05fc581b572c685c5cf280a16c5a3/lib/internal/url.js#L1415-L1437\n *\n * @param stringUrl\n * @throws TypeError if the URL is not valid.\n */\nfunction stringUrlToHttpOptions(stringUrl) {\n    // This is heavily inspired by Node.js handling of the same situation, trying\n    // to follow it as closely as possible while keeping in mind that we only\n    // deal with string URLs, not URL objects.\n    const { hostname, pathname, port, username, password, search, protocol, hash, href, origin, host, } = new URL(stringUrl);\n    const options = {\n        protocol: protocol,\n        hostname: hostname && hostname[0] === '[' ? hostname.slice(1, -1) : hostname,\n        hash: hash,\n        search: search,\n        pathname: pathname,\n        path: `${pathname || ''}${search || ''}`,\n        href: href,\n        origin: origin,\n        host: host,\n    };\n    if (port !== '') {\n        options.port = Number(port);\n    }\n    if (username || password) {\n        options.auth = `${decodeURIComponent(username)}:${decodeURIComponent(password)}`;\n    }\n    return options;\n}\n/**\n * Makes sure options is an url object\n * return an object with default value and parsed options\n * @param logger component logger\n * @param options original options for the request\n * @param [extraOptions] additional options for the request\n */\nconst getRequestInfo = (logger, options, extraOptions) => {\n    let pathname;\n    let origin;\n    let optionsParsed;\n    let invalidUrl = false;\n    if (typeof options === 'string') {\n        try {\n            const convertedOptions = stringUrlToHttpOptions(options);\n            optionsParsed = convertedOptions;\n            pathname = convertedOptions.pathname || '/';\n        }\n        catch (e) {\n            invalidUrl = true;\n            logger.verbose('Unable to parse URL provided to HTTP request, using fallback to determine path. Original error:', e);\n            // for backward compatibility with how url.parse() behaved.\n            optionsParsed = {\n                path: options,\n            };\n            pathname = optionsParsed.path || '/';\n        }\n        origin = `${optionsParsed.protocol || 'http:'}//${optionsParsed.host}`;\n        if (extraOptions !== undefined) {\n            Object.assign(optionsParsed, extraOptions);\n        }\n    }\n    else if (options instanceof url.URL) {\n        optionsParsed = {\n            protocol: options.protocol,\n            hostname: typeof options.hostname === 'string' && options.hostname.startsWith('[')\n                ? options.hostname.slice(1, -1)\n                : options.hostname,\n            path: `${options.pathname || ''}${options.search || ''}`,\n        };\n        if (options.port !== '') {\n            optionsParsed.port = Number(options.port);\n        }\n        if (options.username || options.password) {\n            optionsParsed.auth = `${options.username}:${options.password}`;\n        }\n        pathname = options.pathname;\n        origin = options.origin;\n        if (extraOptions !== undefined) {\n            Object.assign(optionsParsed, extraOptions);\n        }\n    }\n    else {\n        optionsParsed = Object.assign({ protocol: options.host ? 'http:' : undefined }, options);\n        const hostname = optionsParsed.host ||\n            (optionsParsed.port != null\n                ? `${optionsParsed.hostname}${optionsParsed.port}`\n                : optionsParsed.hostname);\n        origin = `${optionsParsed.protocol || 'http:'}//${hostname}`;\n        pathname = options.pathname;\n        if (!pathname && optionsParsed.path) {\n            try {\n                const parsedUrl = new URL(optionsParsed.path, origin);\n                pathname = parsedUrl.pathname || '/';\n            }\n            catch {\n                pathname = '/';\n            }\n        }\n    }\n    // some packages return method in lowercase..\n    // ensure upperCase for consistency\n    const method = optionsParsed.method\n        ? optionsParsed.method.toUpperCase()\n        : 'GET';\n    return { origin, pathname, method, optionsParsed, invalidUrl };\n};\nexports.getRequestInfo = getRequestInfo;\n/**\n * Makes sure options is of type string or object\n * @param options for the request\n */\nconst isValidOptionsType = (options) => {\n    if (!options) {\n        return false;\n    }\n    const type = typeof options;\n    return type === 'string' || (type === 'object' && !Array.isArray(options));\n};\nexports.isValidOptionsType = isValidOptionsType;\nconst extractHostnameAndPort = (requestOptions) => {\n    if (requestOptions.hostname && requestOptions.port) {\n        return { hostname: requestOptions.hostname, port: requestOptions.port };\n    }\n    const matches = requestOptions.host?.match(/^([^:/ ]+)(:\\d{1,5})?/) || null;\n    const hostname = requestOptions.hostname || (matches === null ? 'localhost' : matches[1]);\n    let port = requestOptions.port;\n    if (!port) {\n        if (matches && matches[2]) {\n            // remove the leading \":\". The extracted port would be something like \":8080\"\n            port = matches[2].substring(1);\n        }\n        else {\n            port = requestOptions.protocol === 'https:' ? '443' : '80';\n        }\n    }\n    return { hostname, port };\n};\nexports.extractHostnameAndPort = extractHostnameAndPort;\n/**\n * Returns outgoing request attributes scoped to the options passed to the request\n * @param {ParsedRequestOptions} requestOptions the same options used to make the request\n * @param {{ component: string, hostname: string, hookAttributes?: Attributes }} options used to pass data needed to create attributes\n * @param {SemconvStability} semconvStability determines which semconv version to use\n */\nconst getOutgoingRequestAttributes = (requestOptions, options, semconvStability, enableSyntheticSourceDetection) => {\n    const hostname = options.hostname;\n    const port = options.port;\n    const method = requestOptions.method ?? 'GET';\n    const normalizedMethod = normalizeMethod(method);\n    const headers = requestOptions.headers || {};\n    const userAgent = headers['user-agent'];\n    const urlFull = (0, exports.getAbsoluteUrl)(requestOptions, headers, `${options.component}:`, options.redactedQueryParams);\n    const oldAttributes = {\n        [semconv_1.ATTR_HTTP_URL]: urlFull,\n        [semconv_1.ATTR_HTTP_METHOD]: method,\n        [semconv_1.ATTR_HTTP_TARGET]: requestOptions.path || '/',\n        [semconv_1.ATTR_NET_PEER_NAME]: hostname,\n        [semconv_1.ATTR_HTTP_HOST]: headers.host ?? `${hostname}:${port}`,\n    };\n    const newAttributes = {\n        // Required attributes\n        [semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD]: normalizedMethod,\n        [semantic_conventions_1.ATTR_SERVER_ADDRESS]: hostname,\n        [semantic_conventions_1.ATTR_SERVER_PORT]: Number(port),\n        [semantic_conventions_1.ATTR_URL_FULL]: urlFull,\n        [semantic_conventions_1.ATTR_USER_AGENT_ORIGINAL]: userAgent,\n        // leaving out protocol version, it is not yet negotiated\n        // leaving out protocol name, it is only required when protocol version is set\n        // retries and redirects not supported\n        // Opt-in attributes left off for now\n    };\n    // conditionally required if request method required case normalization\n    if (method !== normalizedMethod) {\n        newAttributes[semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD_ORIGINAL] = method;\n    }\n    if (enableSyntheticSourceDetection && userAgent) {\n        newAttributes[semconv_1.ATTR_USER_AGENT_SYNTHETIC_TYPE] = getSyntheticType(userAgent);\n    }\n    if (userAgent !== undefined) {\n        oldAttributes[semconv_1.ATTR_HTTP_USER_AGENT] = userAgent;\n    }\n    switch (semconvStability) {\n        case instrumentation_1.SemconvStability.STABLE:\n            return Object.assign(newAttributes, options.hookAttributes);\n        case instrumentation_1.SemconvStability.OLD:\n            return Object.assign(oldAttributes, options.hookAttributes);\n    }\n    return Object.assign(oldAttributes, newAttributes, options.hookAttributes);\n};\nexports.getOutgoingRequestAttributes = getOutgoingRequestAttributes;\n/**\n * Returns outgoing request Metric attributes scoped to the request data\n * @param {Attributes} spanAttributes the span attributes\n */\nconst getOutgoingRequestMetricAttributes = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semconv_1.ATTR_HTTP_METHOD] = spanAttributes[semconv_1.ATTR_HTTP_METHOD];\n    metricAttributes[semconv_1.ATTR_NET_PEER_NAME] = spanAttributes[semconv_1.ATTR_NET_PEER_NAME];\n    //TODO: http.url attribute, it should substitute any parameters to avoid high cardinality.\n    return metricAttributes;\n};\nexports.getOutgoingRequestMetricAttributes = getOutgoingRequestMetricAttributes;\n/**\n * Returns attributes related to the kind of HTTP protocol used\n * @param {string} [kind] Kind of HTTP protocol used: \"1.0\", \"1.1\", \"2\", \"SPDY\" or \"QUIC\".\n */\nconst setAttributesFromHttpKind = (kind, attributes) => {\n    if (kind) {\n        attributes[semconv_1.ATTR_HTTP_FLAVOR] = kind;\n        if (kind.toUpperCase() !== 'QUIC') {\n            attributes[semconv_1.ATTR_NET_TRANSPORT] = semconv_1.NET_TRANSPORT_VALUE_IP_TCP;\n        }\n        else {\n            attributes[semconv_1.ATTR_NET_TRANSPORT] = semconv_1.NET_TRANSPORT_VALUE_IP_UDP;\n        }\n    }\n};\nexports.setAttributesFromHttpKind = setAttributesFromHttpKind;\n/**\n * Returns the type of synthetic source based on the user agent\n * @param {OutgoingHttpHeader} userAgent the user agent string\n */\nconst getSyntheticType = (userAgent) => {\n    const userAgentString = String(userAgent).toLowerCase();\n    for (const name of internal_types_1.SYNTHETIC_TEST_NAMES) {\n        if (userAgentString.includes(name)) {\n            return semconv_1.USER_AGENT_SYNTHETIC_TYPE_VALUE_TEST;\n        }\n    }\n    for (const name of internal_types_1.SYNTHETIC_BOT_NAMES) {\n        if (userAgentString.includes(name)) {\n            return semconv_1.USER_AGENT_SYNTHETIC_TYPE_VALUE_BOT;\n        }\n    }\n    return;\n};\n/**\n * Returns outgoing request attributes scoped to the response data\n * @param {IncomingMessage} response the response object\n * @param {SemconvStability} semconvStability determines which semconv version to use\n */\nconst getOutgoingRequestAttributesOnResponse = (response, semconvStability) => {\n    const { statusCode, statusMessage, httpVersion, socket } = response;\n    const oldAttributes = {};\n    const stableAttributes = {};\n    if (statusCode != null) {\n        stableAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE] = statusCode;\n    }\n    if (socket) {\n        const { remoteAddress, remotePort } = socket;\n        oldAttributes[semconv_1.ATTR_NET_PEER_IP] = remoteAddress;\n        oldAttributes[semconv_1.ATTR_NET_PEER_PORT] = remotePort;\n        // Recommended\n        stableAttributes[semantic_conventions_1.ATTR_NETWORK_PEER_ADDRESS] = remoteAddress;\n        stableAttributes[semantic_conventions_1.ATTR_NETWORK_PEER_PORT] = remotePort;\n        stableAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION] = response.httpVersion;\n    }\n    (0, exports.setResponseContentLengthAttribute)(response, oldAttributes);\n    if (statusCode) {\n        oldAttributes[semconv_1.ATTR_HTTP_STATUS_CODE] = statusCode;\n        oldAttributes[AttributeNames_1.AttributeNames.HTTP_STATUS_TEXT] = (statusMessage || '').toUpperCase();\n    }\n    (0, exports.setAttributesFromHttpKind)(httpVersion, oldAttributes);\n    switch (semconvStability) {\n        case instrumentation_1.SemconvStability.STABLE:\n            return stableAttributes;\n        case instrumentation_1.SemconvStability.OLD:\n            return oldAttributes;\n    }\n    return Object.assign(oldAttributes, stableAttributes);\n};\nexports.getOutgoingRequestAttributesOnResponse = getOutgoingRequestAttributesOnResponse;\n/**\n * Returns outgoing request Metric attributes scoped to the response data\n * @param {Attributes} spanAttributes the span attributes\n */\nconst getOutgoingRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semconv_1.ATTR_NET_PEER_PORT] = spanAttributes[semconv_1.ATTR_NET_PEER_PORT];\n    metricAttributes[semconv_1.ATTR_HTTP_STATUS_CODE] =\n        spanAttributes[semconv_1.ATTR_HTTP_STATUS_CODE];\n    metricAttributes[semconv_1.ATTR_HTTP_FLAVOR] = spanAttributes[semconv_1.ATTR_HTTP_FLAVOR];\n    return metricAttributes;\n};\nexports.getOutgoingRequestMetricAttributesOnResponse = getOutgoingRequestMetricAttributesOnResponse;\nconst getOutgoingStableRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    if (spanAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION]) {\n        metricAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION] =\n            spanAttributes[semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION];\n    }\n    if (spanAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE]) {\n        metricAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE] =\n            spanAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE];\n    }\n    return metricAttributes;\n};\nexports.getOutgoingStableRequestMetricAttributesOnResponse = getOutgoingStableRequestMetricAttributesOnResponse;\nfunction parseHostHeader(hostHeader, proto) {\n    const parts = hostHeader.split(':');\n    // no semicolon implies ipv4 dotted syntax or host name without port\n    // x.x.x.x\n    // example.com\n    if (parts.length === 1) {\n        if (proto === 'http') {\n            return { host: parts[0], port: '80' };\n        }\n        if (proto === 'https') {\n            return { host: parts[0], port: '443' };\n        }\n        return { host: parts[0] };\n    }\n    // single semicolon implies ipv4 dotted syntax or host name with port\n    // x.x.x.x:yyyy\n    // example.com:yyyy\n    if (parts.length === 2) {\n        return {\n            host: parts[0],\n            port: parts[1],\n        };\n    }\n    // more than 2 parts implies ipv6 syntax with multiple colons\n    // [x:x:x:x:x:x:x:x]\n    // [x:x:x:x:x:x:x:x]:yyyy\n    if (parts[0].startsWith('[')) {\n        if (parts[parts.length - 1].endsWith(']')) {\n            if (proto === 'http') {\n                return { host: hostHeader, port: '80' };\n            }\n            if (proto === 'https') {\n                return { host: hostHeader, port: '443' };\n            }\n        }\n        else if (parts[parts.length - 2].endsWith(']')) {\n            return {\n                host: parts.slice(0, -1).join(':'),\n                port: parts[parts.length - 1],\n            };\n        }\n    }\n    // if nothing above matches just return the host header\n    return { host: hostHeader };\n}\n/**\n * Get server.address and port according to http semconv 1.27\n * https://github.com/open-telemetry/semantic-conventions/blob/bf0a2c1134f206f034408b201dbec37960ed60ec/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes\n */\nfunction getServerAddress(request, component) {\n    const forwardedHeader = request.headers['forwarded'];\n    if (forwardedHeader) {\n        for (const entry of parseForwardedHeader(forwardedHeader)) {\n            if (entry.host) {\n                return parseHostHeader(entry.host, entry.proto);\n            }\n        }\n    }\n    const xForwardedHost = request.headers['x-forwarded-host'];\n    if (typeof xForwardedHost === 'string') {\n        if (typeof request.headers['x-forwarded-proto'] === 'string') {\n            return parseHostHeader(xForwardedHost, request.headers['x-forwarded-proto']);\n        }\n        if (Array.isArray(request.headers['x-forwarded-proto'])) {\n            return parseHostHeader(xForwardedHost, request.headers['x-forwarded-proto'][0]);\n        }\n        return parseHostHeader(xForwardedHost);\n    }\n    else if (Array.isArray(xForwardedHost) &&\n        typeof xForwardedHost[0] === 'string' &&\n        xForwardedHost[0].length > 0) {\n        if (typeof request.headers['x-forwarded-proto'] === 'string') {\n            return parseHostHeader(xForwardedHost[0], request.headers['x-forwarded-proto']);\n        }\n        if (Array.isArray(request.headers['x-forwarded-proto'])) {\n            return parseHostHeader(xForwardedHost[0], request.headers['x-forwarded-proto'][0]);\n        }\n        return parseHostHeader(xForwardedHost[0]);\n    }\n    const host = request.headers['host'];\n    if (typeof host === 'string' && host.length > 0) {\n        return parseHostHeader(host, component);\n    }\n    return null;\n}\n/**\n * Get server.address and port according to http semconv 1.27\n * https://github.com/open-telemetry/semantic-conventions/blob/bf0a2c1134f206f034408b201dbec37960ed60ec/docs/http/http-spans.md#setting-serveraddress-and-serverport-attributes\n */\nfunction getRemoteClientAddress(request) {\n    const forwardedHeader = request.headers['forwarded'];\n    if (forwardedHeader) {\n        for (const entry of parseForwardedHeader(forwardedHeader)) {\n            if (entry.for) {\n                return entry.for;\n            }\n        }\n    }\n    const xForwardedFor = request.headers['x-forwarded-for'];\n    if (typeof xForwardedFor === 'string') {\n        return xForwardedFor;\n    }\n    else if (Array.isArray(xForwardedFor)) {\n        return xForwardedFor[0];\n    }\n    const remote = request.socket.remoteAddress;\n    if (remote) {\n        return remote;\n    }\n    return null;\n}\nexports.getRemoteClientAddress = getRemoteClientAddress;\nfunction getInfoFromIncomingMessage(component, request, logger) {\n    try {\n        if (request.headers.host) {\n            return new URL(request.url ?? '/', `${component}://${request.headers.host}`);\n        }\n        else {\n            const unsafeParsedUrl = new URL(request.url ?? '/', \n            // using localhost as a workaround to still use the URL constructor for parsing\n            `${component}://localhost`);\n            // since we use localhost as a workaround, ensure we hide the rest of the properties to avoid\n            // our workaround leaking though.\n            return {\n                pathname: unsafeParsedUrl.pathname,\n                search: unsafeParsedUrl.search,\n                toString: function () {\n                    // we cannot use the result of unsafeParsedUrl.toString as it's potentially wrong.\n                    return unsafeParsedUrl.pathname + unsafeParsedUrl.search;\n                },\n            };\n        }\n    }\n    catch (e) {\n        // something is wrong, use undefined - this *should* never happen, logging\n        // for troubleshooting in case it does happen.\n        logger.verbose('Unable to get URL from request', e);\n        return {};\n    }\n}\n/**\n * Returns incoming request attributes scoped to the request data\n * @param {IncomingMessage} request the request object\n * @param {{ component: string, serverName?: string, hookAttributes?: Attributes }} options used to pass data needed to create attributes\n * @param {SemconvStability} semconvStability determines which semconv version to use\n */\nconst getIncomingRequestAttributes = (request, options, logger) => {\n    const headers = request.headers;\n    const userAgent = headers['user-agent'];\n    const ips = headers['x-forwarded-for'];\n    const httpVersion = request.httpVersion;\n    const host = headers.host;\n    const hostname = host?.replace(/^(.*)(:[0-9]{1,5})/, '$1') || 'localhost';\n    const method = request.method;\n    const normalizedMethod = normalizeMethod(method);\n    const serverAddress = getServerAddress(request, options.component);\n    const serverName = options.serverName;\n    const remoteClientAddress = getRemoteClientAddress(request);\n    const newAttributes = {\n        [semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD]: normalizedMethod,\n        [semantic_conventions_1.ATTR_URL_SCHEME]: options.component,\n        [semantic_conventions_1.ATTR_SERVER_ADDRESS]: serverAddress?.host,\n        [semantic_conventions_1.ATTR_NETWORK_PEER_ADDRESS]: request.socket.remoteAddress,\n        [semantic_conventions_1.ATTR_NETWORK_PEER_PORT]: request.socket.remotePort,\n        [semantic_conventions_1.ATTR_NETWORK_PROTOCOL_VERSION]: request.httpVersion,\n        [semantic_conventions_1.ATTR_USER_AGENT_ORIGINAL]: userAgent,\n    };\n    const parsedUrl = getInfoFromIncomingMessage(options.component, request, logger);\n    if (parsedUrl?.pathname != null) {\n        newAttributes[semantic_conventions_1.ATTR_URL_PATH] = parsedUrl.pathname;\n    }\n    if (parsedUrl.search) {\n        // Remove leading '?' from URL search (https://developer.mozilla.org/en-US/docs/Web/API/URL/search).\n        newAttributes[semantic_conventions_1.ATTR_URL_QUERY] = parsedUrl.search.slice(1);\n    }\n    if (remoteClientAddress != null) {\n        newAttributes[semantic_conventions_1.ATTR_CLIENT_ADDRESS] = remoteClientAddress.split(',')[0];\n    }\n    if (serverAddress?.port != null) {\n        newAttributes[semantic_conventions_1.ATTR_SERVER_PORT] = Number(serverAddress.port);\n    }\n    // conditionally required if request method required case normalization\n    if (method !== normalizedMethod) {\n        newAttributes[semantic_conventions_1.ATTR_HTTP_REQUEST_METHOD_ORIGINAL] = method;\n    }\n    if (options.enableSyntheticSourceDetection && userAgent) {\n        newAttributes[semconv_1.ATTR_USER_AGENT_SYNTHETIC_TYPE] = getSyntheticType(userAgent);\n    }\n    const oldAttributes = {\n        [semconv_1.ATTR_HTTP_URL]: parsedUrl.toString(),\n        [semconv_1.ATTR_HTTP_HOST]: host,\n        [semconv_1.ATTR_NET_HOST_NAME]: hostname,\n        [semconv_1.ATTR_HTTP_METHOD]: method,\n        [semconv_1.ATTR_HTTP_SCHEME]: options.component,\n    };\n    if (typeof ips === 'string') {\n        oldAttributes[semconv_1.ATTR_HTTP_CLIENT_IP] = ips.split(',')[0];\n    }\n    if (typeof serverName === 'string') {\n        oldAttributes[semconv_1.ATTR_HTTP_SERVER_NAME] = serverName;\n    }\n    if (parsedUrl?.pathname) {\n        oldAttributes[semconv_1.ATTR_HTTP_TARGET] =\n            parsedUrl?.pathname + parsedUrl?.search || '/';\n    }\n    if (userAgent !== undefined) {\n        oldAttributes[semconv_1.ATTR_HTTP_USER_AGENT] = userAgent;\n    }\n    (0, exports.setRequestContentLengthAttribute)(request, oldAttributes);\n    (0, exports.setAttributesFromHttpKind)(httpVersion, oldAttributes);\n    switch (options.semconvStability) {\n        case instrumentation_1.SemconvStability.STABLE:\n            return Object.assign(newAttributes, options.hookAttributes);\n        case instrumentation_1.SemconvStability.OLD:\n            return Object.assign(oldAttributes, options.hookAttributes);\n    }\n    return Object.assign(oldAttributes, newAttributes, options.hookAttributes);\n};\nexports.getIncomingRequestAttributes = getIncomingRequestAttributes;\n/**\n * Returns incoming request Metric attributes scoped to the request data\n * @param {Attributes} spanAttributes the span attributes\n * @param {{ component: string }} options used to pass data needed to create attributes\n */\nconst getIncomingRequestMetricAttributes = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semconv_1.ATTR_HTTP_SCHEME] = spanAttributes[semconv_1.ATTR_HTTP_SCHEME];\n    metricAttributes[semconv_1.ATTR_HTTP_METHOD] = spanAttributes[semconv_1.ATTR_HTTP_METHOD];\n    metricAttributes[semconv_1.ATTR_NET_HOST_NAME] = spanAttributes[semconv_1.ATTR_NET_HOST_NAME];\n    metricAttributes[semconv_1.ATTR_HTTP_FLAVOR] = spanAttributes[semconv_1.ATTR_HTTP_FLAVOR];\n    //TODO: http.target attribute, it should substitute any parameters to avoid high cardinality.\n    return metricAttributes;\n};\nexports.getIncomingRequestMetricAttributes = getIncomingRequestMetricAttributes;\n/**\n * Returns incoming request attributes scoped to the response data\n * @param {(ServerResponse & { socket: Socket; })} response the response object\n */\nconst getIncomingRequestAttributesOnResponse = (request, response, semconvStability) => {\n    // take socket from the request,\n    // since it may be detached from the response object in keep-alive mode\n    const { socket } = request;\n    const { statusCode, statusMessage } = response;\n    const newAttributes = {\n        [semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE]: statusCode,\n    };\n    const rpcMetadata = (0, core_1.getRPCMetadata)(api_1.context.active());\n    const oldAttributes = {};\n    if (socket) {\n        const { localAddress, localPort, remoteAddress, remotePort } = socket;\n        oldAttributes[semconv_1.ATTR_NET_HOST_IP] = localAddress;\n        oldAttributes[semconv_1.ATTR_NET_HOST_PORT] = localPort;\n        oldAttributes[semconv_1.ATTR_NET_PEER_IP] = remoteAddress;\n        oldAttributes[semconv_1.ATTR_NET_PEER_PORT] = remotePort;\n    }\n    oldAttributes[semconv_1.ATTR_HTTP_STATUS_CODE] = statusCode;\n    oldAttributes[AttributeNames_1.AttributeNames.HTTP_STATUS_TEXT] = (statusMessage || '').toUpperCase();\n    if (rpcMetadata?.type === core_1.RPCType.HTTP && rpcMetadata.route !== undefined) {\n        oldAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE] = rpcMetadata.route;\n        newAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE] = rpcMetadata.route;\n    }\n    switch (semconvStability) {\n        case instrumentation_1.SemconvStability.STABLE:\n            return newAttributes;\n        case instrumentation_1.SemconvStability.OLD:\n            return oldAttributes;\n    }\n    return Object.assign(oldAttributes, newAttributes);\n};\nexports.getIncomingRequestAttributesOnResponse = getIncomingRequestAttributesOnResponse;\n/**\n * Returns incoming request Metric attributes scoped to the request data\n * @param {Attributes} spanAttributes the span attributes\n */\nconst getIncomingRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    metricAttributes[semconv_1.ATTR_HTTP_STATUS_CODE] =\n        spanAttributes[semconv_1.ATTR_HTTP_STATUS_CODE];\n    metricAttributes[semconv_1.ATTR_NET_HOST_PORT] = spanAttributes[semconv_1.ATTR_NET_HOST_PORT];\n    if (spanAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE] !== undefined) {\n        metricAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE] = spanAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE];\n    }\n    return metricAttributes;\n};\nexports.getIncomingRequestMetricAttributesOnResponse = getIncomingRequestMetricAttributesOnResponse;\n/**\n * Returns incoming stable request Metric attributes scoped to the request data\n * @param {Attributes} spanAttributes the span attributes\n */\nconst getIncomingStableRequestMetricAttributesOnResponse = (spanAttributes) => {\n    const metricAttributes = {};\n    if (spanAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE] !== undefined) {\n        metricAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE] = spanAttributes[semantic_conventions_1.ATTR_HTTP_ROUTE];\n    }\n    // required if and only if one was sent, same as span requirement\n    if (spanAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE]) {\n        metricAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE] =\n            spanAttributes[semantic_conventions_1.ATTR_HTTP_RESPONSE_STATUS_CODE];\n    }\n    return metricAttributes;\n};\nexports.getIncomingStableRequestMetricAttributesOnResponse = getIncomingStableRequestMetricAttributesOnResponse;\nfunction headerCapture(type, headers) {\n    const normalizedHeaders = new Map();\n    for (let i = 0, len = headers.length; i < len; i++) {\n        const capturedHeader = headers[i].toLowerCase();\n        normalizedHeaders.set(capturedHeader, capturedHeader.replace(/-/g, '_'));\n    }\n    return (span, getHeader) => {\n        for (const capturedHeader of normalizedHeaders.keys()) {\n            const value = getHeader(capturedHeader);\n            if (value === undefined) {\n                continue;\n            }\n            const normalizedHeader = normalizedHeaders.get(capturedHeader);\n            const key = `http.${type}.header.${normalizedHeader}`;\n            if (typeof value === 'string') {\n                span.setAttribute(key, [value]);\n            }\n            else if (Array.isArray(value)) {\n                span.setAttribute(key, value);\n            }\n            else {\n                span.setAttribute(key, [value]);\n            }\n        }\n    };\n}\nexports.headerCapture = headerCapture;\nconst KNOWN_METHODS = new Set([\n    // methods from https://www.rfc-editor.org/rfc/rfc9110.html#name-methods\n    'GET',\n    'HEAD',\n    'POST',\n    'PUT',\n    'DELETE',\n    'CONNECT',\n    'OPTIONS',\n    'TRACE',\n    // PATCH from https://www.rfc-editor.org/rfc/rfc5789.html\n    'PATCH',\n]);\nfunction normalizeMethod(method) {\n    if (method == null) {\n        return 'GET';\n    }\n    const upper = method.toUpperCase();\n    if (KNOWN_METHODS.has(upper)) {\n        return upper;\n    }\n    return '_OTHER';\n}\nfunction parseForwardedHeader(header) {\n    try {\n        return forwardedParse(header);\n    }\n    catch {\n        return [];\n    }\n}\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/utils.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js":
/*!***************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js ***!
  \***************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.VERSION = '0.204.0';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taHR0cEAwLjIwNC4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWh0dHAvYnVpbGQvc3JjL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmO0FBQ0EsZUFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24taHR0cEAwLjIwNC4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLWh0dHAvYnVpbGQvc3JjL3ZlcnNpb24uanM/YTg1NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qXG4gKiBDb3B5cmlnaHQgVGhlIE9wZW5UZWxlbWV0cnkgQXV0aG9yc1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgIGh0dHBzOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuVkVSU0lPTiA9ICcwLjIwNC4wJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-http@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-http/build/src/version.js\n");

/***/ })

};
;