"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0";
exports.ids = ["vendor-chunks/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0"];
exports.modules = {

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongodbCommandType = exports.MongoDBInstrumentation = void 0;\nvar instrumentation_1 = __webpack_require__(/*! ./instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/instrumentation.js\");\nObject.defineProperty(exports, \"MongoDBInstrumentation\", ({ enumerable: true, get: function () { return instrumentation_1.MongoDBInstrumentation; } }));\nvar types_1 = __webpack_require__(/*! ./types */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/types.js\");\nObject.defineProperty(exports, \"MongodbCommandType\", ({ enumerable: true, get: function () { return types_1.MongodbCommandType; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tbW9uZ29kYkAwLjU3LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29kYi9idWlsZC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsOEJBQThCO0FBQzNELHdCQUF3QixtQkFBTyxDQUFDLHdOQUFtQjtBQUNuRCwwREFBeUQsRUFBRSxxQ0FBcUMsb0RBQW9ELEVBQUM7QUFDckosY0FBYyxtQkFBTyxDQUFDLG9NQUFTO0FBQy9CLHNEQUFxRCxFQUFFLHFDQUFxQyxzQ0FBc0MsRUFBQztBQUNuSSIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLW1vbmdvZGJAMC41Ny4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvZGIvYnVpbGQvc3JjL2luZGV4LmpzP2M1MzIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb25nb2RiQ29tbWFuZFR5cGUgPSBleHBvcnRzLk1vbmdvREJJbnN0cnVtZW50YXRpb24gPSB2b2lkIDA7XG52YXIgaW5zdHJ1bWVudGF0aW9uXzEgPSByZXF1aXJlKFwiLi9pbnN0cnVtZW50YXRpb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNb25nb0RCSW5zdHJ1bWVudGF0aW9uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpbnN0cnVtZW50YXRpb25fMS5Nb25nb0RCSW5zdHJ1bWVudGF0aW9uOyB9IH0pO1xudmFyIHR5cGVzXzEgPSByZXF1aXJlKFwiLi90eXBlc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1vbmdvZGJDb21tYW5kVHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHlwZXNfMS5Nb25nb2RiQ29tbWFuZFR5cGU7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/index.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/internal-types.js":
/*!***************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/internal-types.js ***!
  \***************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongodbCommandType = void 0;\nvar MongodbCommandType;\n(function (MongodbCommandType) {\n    MongodbCommandType[\"CREATE_INDEXES\"] = \"createIndexes\";\n    MongodbCommandType[\"FIND_AND_MODIFY\"] = \"findAndModify\";\n    MongodbCommandType[\"IS_MASTER\"] = \"isMaster\";\n    MongodbCommandType[\"COUNT\"] = \"count\";\n    MongodbCommandType[\"AGGREGATE\"] = \"aggregate\";\n    MongodbCommandType[\"UNKNOWN\"] = \"unknown\";\n})(MongodbCommandType = exports.MongodbCommandType || (exports.MongodbCommandType = {}));\n//# sourceMappingURL=internal-types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tbW9uZ29kYkAwLjU3LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29kYi9idWlsZC9zcmMvaW50ZXJuYWwtdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNEQUFzRCwwQkFBMEIsS0FBSztBQUN0RiIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYi8uLi8uLi9ub2RlX21vZHVsZXMvLnBucG0vQG9wZW50ZWxlbWV0cnkraW5zdHJ1bWVudGF0aW9uLW1vbmdvZGJAMC41Ny4wX0BvcGVudGVsZW1ldHJ5K2FwaUAxLjkuMC9ub2RlX21vZHVsZXMvQG9wZW50ZWxlbWV0cnkvaW5zdHJ1bWVudGF0aW9uLW1vbmdvZGIvYnVpbGQvc3JjL2ludGVybmFsLXR5cGVzLmpzP2VlNGMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKlxuICogQ29weXJpZ2h0IFRoZSBPcGVuVGVsZW1ldHJ5IEF1dGhvcnNcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgICBodHRwczovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Nb25nb2RiQ29tbWFuZFR5cGUgPSB2b2lkIDA7XG52YXIgTW9uZ29kYkNvbW1hbmRUeXBlO1xuKGZ1bmN0aW9uIChNb25nb2RiQ29tbWFuZFR5cGUpIHtcbiAgICBNb25nb2RiQ29tbWFuZFR5cGVbXCJDUkVBVEVfSU5ERVhFU1wiXSA9IFwiY3JlYXRlSW5kZXhlc1wiO1xuICAgIE1vbmdvZGJDb21tYW5kVHlwZVtcIkZJTkRfQU5EX01PRElGWVwiXSA9IFwiZmluZEFuZE1vZGlmeVwiO1xuICAgIE1vbmdvZGJDb21tYW5kVHlwZVtcIklTX01BU1RFUlwiXSA9IFwiaXNNYXN0ZXJcIjtcbiAgICBNb25nb2RiQ29tbWFuZFR5cGVbXCJDT1VOVFwiXSA9IFwiY291bnRcIjtcbiAgICBNb25nb2RiQ29tbWFuZFR5cGVbXCJBR0dSRUdBVEVcIl0gPSBcImFnZ3JlZ2F0ZVwiO1xuICAgIE1vbmdvZGJDb21tYW5kVHlwZVtcIlVOS05PV05cIl0gPSBcInVua25vd25cIjtcbn0pKE1vbmdvZGJDb21tYW5kVHlwZSA9IGV4cG9ydHMuTW9uZ29kYkNvbW1hbmRUeXBlIHx8IChleHBvcnRzLk1vbmdvZGJDb21tYW5kVHlwZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbC10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/internal-types.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/types.js":
/*!******************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/types.js ***!
  \******************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongodbCommandType = void 0;\nvar MongodbCommandType;\n(function (MongodbCommandType) {\n    MongodbCommandType[\"CREATE_INDEXES\"] = \"createIndexes\";\n    MongodbCommandType[\"FIND_AND_MODIFY\"] = \"findAndModify\";\n    MongodbCommandType[\"IS_MASTER\"] = \"isMaster\";\n    MongodbCommandType[\"COUNT\"] = \"count\";\n    MongodbCommandType[\"UNKNOWN\"] = \"unknown\";\n})(MongodbCommandType = exports.MongodbCommandType || (exports.MongodbCommandType = {}));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tbW9uZ29kYkAwLjU3LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29kYi9idWlsZC9zcmMvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzREFBc0QsMEJBQTBCLEtBQUs7QUFDdEYiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWIvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BvcGVudGVsZW1ldHJ5K2luc3RydW1lbnRhdGlvbi1tb25nb2RiQDAuNTcuMF9Ab3BlbnRlbGVtZXRyeSthcGlAMS45LjAvbm9kZV9tb2R1bGVzL0BvcGVudGVsZW1ldHJ5L2luc3RydW1lbnRhdGlvbi1tb25nb2RiL2J1aWxkL3NyYy90eXBlcy5qcz9kMWM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTW9uZ29kYkNvbW1hbmRUeXBlID0gdm9pZCAwO1xudmFyIE1vbmdvZGJDb21tYW5kVHlwZTtcbihmdW5jdGlvbiAoTW9uZ29kYkNvbW1hbmRUeXBlKSB7XG4gICAgTW9uZ29kYkNvbW1hbmRUeXBlW1wiQ1JFQVRFX0lOREVYRVNcIl0gPSBcImNyZWF0ZUluZGV4ZXNcIjtcbiAgICBNb25nb2RiQ29tbWFuZFR5cGVbXCJGSU5EX0FORF9NT0RJRllcIl0gPSBcImZpbmRBbmRNb2RpZnlcIjtcbiAgICBNb25nb2RiQ29tbWFuZFR5cGVbXCJJU19NQVNURVJcIl0gPSBcImlzTWFzdGVyXCI7XG4gICAgTW9uZ29kYkNvbW1hbmRUeXBlW1wiQ09VTlRcIl0gPSBcImNvdW50XCI7XG4gICAgTW9uZ29kYkNvbW1hbmRUeXBlW1wiVU5LTk9XTlwiXSA9IFwidW5rbm93blwiO1xufSkoTW9uZ29kYkNvbW1hbmRUeXBlID0gZXhwb3J0cy5Nb25nb2RiQ29tbWFuZFR5cGUgfHwgKGV4cG9ydHMuTW9uZ29kYkNvbW1hbmRUeXBlID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/types.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/version.js":
/*!********************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/version.js ***!
  \********************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PACKAGE_NAME = exports.PACKAGE_VERSION = void 0;\n// this is autogenerated file, see scripts/version-update.js\nexports.PACKAGE_VERSION = '0.57.0';\nexports.PACKAGE_NAME = '@opentelemetry/instrumentation-mongodb';\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGluc3RydW1lbnQpLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tbW9uZ29kYkAwLjU3LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29kYi9idWlsZC9zcmMvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0IsR0FBRyx1QkFBdUI7QUFDOUM7QUFDQSx1QkFBdUI7QUFDdkIsb0JBQW9CO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3BlbnRlbGVtZXRyeStpbnN0cnVtZW50YXRpb24tbW9uZ29kYkAwLjU3LjBfQG9wZW50ZWxlbWV0cnkrYXBpQDEuOS4wL25vZGVfbW9kdWxlcy9Ab3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29kYi9idWlsZC9zcmMvdmVyc2lvbi5qcz80MzFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLypcbiAqIENvcHlyaWdodCBUaGUgT3BlblRlbGVtZXRyeSBBdXRob3JzXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICAgaHR0cHM6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuUEFDS0FHRV9OQU1FID0gZXhwb3J0cy5QQUNLQUdFX1ZFUlNJT04gPSB2b2lkIDA7XG4vLyB0aGlzIGlzIGF1dG9nZW5lcmF0ZWQgZmlsZSwgc2VlIHNjcmlwdHMvdmVyc2lvbi11cGRhdGUuanNcbmV4cG9ydHMuUEFDS0FHRV9WRVJTSU9OID0gJzAuNTcuMCc7XG5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9ICdAb3BlbnRlbGVtZXRyeS9pbnN0cnVtZW50YXRpb24tbW9uZ29kYic7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/version.js\n");

/***/ }),

/***/ "(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/instrumentation.js":
/*!****************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/instrumentation.js ***!
  \****************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval(";globalThis[\"_sentryRewritesTunnelPath\"] = \"/monitoring\";globalThis[\"SENTRY_RELEASE\"] = undefined;globalThis[\"_sentryBasePath\"] = undefined;globalThis[\"_sentryNextJsVersion\"] = \"14.2.3\";globalThis[\"_sentryRewriteFramesDistDir\"] = \".next\";\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MongoDBInstrumentation = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst api_1 = __webpack_require__(/*! @opentelemetry/api */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js\");\nconst instrumentation_1 = __webpack_require__(/*! @opentelemetry/instrumentation */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation@0.204.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation/build/esm/index.js\");\nconst semantic_conventions_1 = __webpack_require__(/*! @opentelemetry/semantic-conventions */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+semantic-conventions@1.37.0/node_modules/@opentelemetry/semantic-conventions/build/esm/index.js\");\nconst internal_types_1 = __webpack_require__(/*! ./internal-types */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/internal-types.js\");\n/** @knipignore */\nconst version_1 = __webpack_require__(/*! ./version */ \"(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/version.js\");\nconst DEFAULT_CONFIG = {\n    requireParentSpan: true,\n};\n/** mongodb instrumentation plugin for OpenTelemetry */\nclass MongoDBInstrumentation extends instrumentation_1.InstrumentationBase {\n    constructor(config = {}) {\n        super(version_1.PACKAGE_NAME, version_1.PACKAGE_VERSION, { ...DEFAULT_CONFIG, ...config });\n    }\n    setConfig(config = {}) {\n        super.setConfig({ ...DEFAULT_CONFIG, ...config });\n    }\n    _updateMetricInstruments() {\n        this._connectionsUsage = this.meter.createUpDownCounter('db.client.connections.usage', {\n            description: 'The number of connections that are currently in state described by the state attribute.',\n            unit: '{connection}',\n        });\n    }\n    init() {\n        const { v3PatchConnection: v3PatchConnection, v3UnpatchConnection: v3UnpatchConnection, } = this._getV3ConnectionPatches();\n        const { v4PatchConnect, v4UnpatchConnect } = this._getV4ConnectPatches();\n        const { v4PatchConnectionCallback, v4PatchConnectionPromise, v4UnpatchConnection, } = this._getV4ConnectionPatches();\n        const { v4PatchConnectionPool, v4UnpatchConnectionPool } = this._getV4ConnectionPoolPatches();\n        const { v4PatchSessions, v4UnpatchSessions } = this._getV4SessionsPatches();\n        return [\n            new instrumentation_1.InstrumentationNodeModuleDefinition('mongodb', ['>=3.3.0 <4'], undefined, undefined, [\n                new instrumentation_1.InstrumentationNodeModuleFile('mongodb/lib/core/wireprotocol/index.js', ['>=3.3.0 <4'], v3PatchConnection, v3UnpatchConnection),\n            ]),\n            new instrumentation_1.InstrumentationNodeModuleDefinition('mongodb', ['>=4.0.0 <7'], undefined, undefined, [\n                new instrumentation_1.InstrumentationNodeModuleFile('mongodb/lib/cmap/connection.js', ['>=4.0.0 <6.4'], v4PatchConnectionCallback, v4UnpatchConnection),\n                new instrumentation_1.InstrumentationNodeModuleFile('mongodb/lib/cmap/connection.js', ['>=6.4.0 <7'], v4PatchConnectionPromise, v4UnpatchConnection),\n                new instrumentation_1.InstrumentationNodeModuleFile('mongodb/lib/cmap/connection_pool.js', ['>=4.0.0 <6.4'], v4PatchConnectionPool, v4UnpatchConnectionPool),\n                new instrumentation_1.InstrumentationNodeModuleFile('mongodb/lib/cmap/connect.js', ['>=4.0.0 <7'], v4PatchConnect, v4UnpatchConnect),\n                new instrumentation_1.InstrumentationNodeModuleFile('mongodb/lib/sessions.js', ['>=4.0.0 <7'], v4PatchSessions, v4UnpatchSessions),\n            ]),\n        ];\n    }\n    _getV3ConnectionPatches() {\n        return {\n            v3PatchConnection: (moduleExports) => {\n                // patch insert operation\n                if ((0, instrumentation_1.isWrapped)(moduleExports.insert)) {\n                    this._unwrap(moduleExports, 'insert');\n                }\n                this._wrap(moduleExports, 'insert', this._getV3PatchOperation('insert'));\n                // patch remove operation\n                if ((0, instrumentation_1.isWrapped)(moduleExports.remove)) {\n                    this._unwrap(moduleExports, 'remove');\n                }\n                this._wrap(moduleExports, 'remove', this._getV3PatchOperation('remove'));\n                // patch update operation\n                if ((0, instrumentation_1.isWrapped)(moduleExports.update)) {\n                    this._unwrap(moduleExports, 'update');\n                }\n                this._wrap(moduleExports, 'update', this._getV3PatchOperation('update'));\n                // patch other command\n                if ((0, instrumentation_1.isWrapped)(moduleExports.command)) {\n                    this._unwrap(moduleExports, 'command');\n                }\n                this._wrap(moduleExports, 'command', this._getV3PatchCommand());\n                // patch query\n                if ((0, instrumentation_1.isWrapped)(moduleExports.query)) {\n                    this._unwrap(moduleExports, 'query');\n                }\n                this._wrap(moduleExports, 'query', this._getV3PatchFind());\n                // patch get more operation on cursor\n                if ((0, instrumentation_1.isWrapped)(moduleExports.getMore)) {\n                    this._unwrap(moduleExports, 'getMore');\n                }\n                this._wrap(moduleExports, 'getMore', this._getV3PatchCursor());\n                return moduleExports;\n            },\n            v3UnpatchConnection: (moduleExports) => {\n                if (moduleExports === undefined)\n                    return;\n                this._unwrap(moduleExports, 'insert');\n                this._unwrap(moduleExports, 'remove');\n                this._unwrap(moduleExports, 'update');\n                this._unwrap(moduleExports, 'command');\n                this._unwrap(moduleExports, 'query');\n                this._unwrap(moduleExports, 'getMore');\n            },\n        };\n    }\n    _getV4SessionsPatches() {\n        return {\n            v4PatchSessions: (moduleExports) => {\n                if ((0, instrumentation_1.isWrapped)(moduleExports.acquire)) {\n                    this._unwrap(moduleExports, 'acquire');\n                }\n                this._wrap(moduleExports.ServerSessionPool.prototype, 'acquire', this._getV4AcquireCommand());\n                if ((0, instrumentation_1.isWrapped)(moduleExports.release)) {\n                    this._unwrap(moduleExports, 'release');\n                }\n                this._wrap(moduleExports.ServerSessionPool.prototype, 'release', this._getV4ReleaseCommand());\n                return moduleExports;\n            },\n            v4UnpatchSessions: (moduleExports) => {\n                if (moduleExports === undefined)\n                    return;\n                if ((0, instrumentation_1.isWrapped)(moduleExports.acquire)) {\n                    this._unwrap(moduleExports, 'acquire');\n                }\n                if ((0, instrumentation_1.isWrapped)(moduleExports.release)) {\n                    this._unwrap(moduleExports, 'release');\n                }\n            },\n        };\n    }\n    _getV4AcquireCommand() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchAcquire() {\n                const nSessionsBeforeAcquire = this.sessions.length;\n                const session = original.call(this);\n                const nSessionsAfterAcquire = this.sessions.length;\n                if (nSessionsBeforeAcquire === nSessionsAfterAcquire) {\n                    //no session in the pool. a new session was created and used\n                    instrumentation._connectionsUsage.add(1, {\n                        state: 'used',\n                        'pool.name': instrumentation._poolName,\n                    });\n                }\n                else if (nSessionsBeforeAcquire - 1 === nSessionsAfterAcquire) {\n                    //a session was already in the pool. remove it from the pool and use it.\n                    instrumentation._connectionsUsage.add(-1, {\n                        state: 'idle',\n                        'pool.name': instrumentation._poolName,\n                    });\n                    instrumentation._connectionsUsage.add(1, {\n                        state: 'used',\n                        'pool.name': instrumentation._poolName,\n                    });\n                }\n                return session;\n            };\n        };\n    }\n    _getV4ReleaseCommand() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchRelease(session) {\n                const cmdPromise = original.call(this, session);\n                instrumentation._connectionsUsage.add(-1, {\n                    state: 'used',\n                    'pool.name': instrumentation._poolName,\n                });\n                instrumentation._connectionsUsage.add(1, {\n                    state: 'idle',\n                    'pool.name': instrumentation._poolName,\n                });\n                return cmdPromise;\n            };\n        };\n    }\n    _getV4ConnectionPoolPatches() {\n        return {\n            v4PatchConnectionPool: (moduleExports) => {\n                const poolPrototype = moduleExports.ConnectionPool.prototype;\n                if ((0, instrumentation_1.isWrapped)(poolPrototype.checkOut)) {\n                    this._unwrap(poolPrototype, 'checkOut');\n                }\n                this._wrap(poolPrototype, 'checkOut', this._getV4ConnectionPoolCheckOut());\n                return moduleExports;\n            },\n            v4UnpatchConnectionPool: (moduleExports) => {\n                if (moduleExports === undefined)\n                    return;\n                this._unwrap(moduleExports.ConnectionPool.prototype, 'checkOut');\n            },\n        };\n    }\n    _getV4ConnectPatches() {\n        return {\n            v4PatchConnect: (moduleExports) => {\n                if ((0, instrumentation_1.isWrapped)(moduleExports.connect)) {\n                    this._unwrap(moduleExports, 'connect');\n                }\n                this._wrap(moduleExports, 'connect', this._getV4ConnectCommand());\n                return moduleExports;\n            },\n            v4UnpatchConnect: (moduleExports) => {\n                if (moduleExports === undefined)\n                    return;\n                this._unwrap(moduleExports, 'connect');\n            },\n        };\n    }\n    // This patch will become unnecessary once\n    // https://jira.mongodb.org/browse/NODE-5639 is done.\n    _getV4ConnectionPoolCheckOut() {\n        return (original) => {\n            return function patchedCheckout(callback) {\n                const patchedCallback = api_1.context.bind(api_1.context.active(), callback);\n                return original.call(this, patchedCallback);\n            };\n        };\n    }\n    _getV4ConnectCommand() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedConnect(options, callback) {\n                // from v6.4 `connect` method only accepts an options param and returns a promise\n                // with the connection\n                if (original.length === 1) {\n                    const result = original.call(this, options);\n                    if (result && typeof result.then === 'function') {\n                        result.then(() => instrumentation.setPoolName(options), \n                        // this handler is set to pass the lint rules\n                        () => undefined);\n                    }\n                    return result;\n                }\n                // Earlier versions expects a callback param and return void\n                const patchedCallback = function (err, conn) {\n                    if (err || !conn) {\n                        callback(err, conn);\n                        return;\n                    }\n                    instrumentation.setPoolName(options);\n                    callback(err, conn);\n                };\n                return original.call(this, options, patchedCallback);\n            };\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    _getV4ConnectionPatches() {\n        return {\n            v4PatchConnectionCallback: (moduleExports) => {\n                // patch insert operation\n                if ((0, instrumentation_1.isWrapped)(moduleExports.Connection.prototype.command)) {\n                    this._unwrap(moduleExports.Connection.prototype, 'command');\n                }\n                this._wrap(moduleExports.Connection.prototype, 'command', this._getV4PatchCommandCallback());\n                return moduleExports;\n            },\n            v4PatchConnectionPromise: (moduleExports) => {\n                // patch insert operation\n                if ((0, instrumentation_1.isWrapped)(moduleExports.Connection.prototype.command)) {\n                    this._unwrap(moduleExports.Connection.prototype, 'command');\n                }\n                this._wrap(moduleExports.Connection.prototype, 'command', this._getV4PatchCommandPromise());\n                return moduleExports;\n            },\n            v4UnpatchConnection: (moduleExports) => {\n                if (moduleExports === undefined)\n                    return;\n                this._unwrap(moduleExports.Connection.prototype, 'command');\n            },\n        };\n    }\n    /** Creates spans for common operations */\n    _getV3PatchOperation(operationName) {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedServerCommand(server, ns, ops, options, callback) {\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const skipInstrumentation = instrumentation._checkSkipInstrumentation(currentSpan);\n                const resultHandler = typeof options === 'function' ? options : callback;\n                if (skipInstrumentation ||\n                    typeof resultHandler !== 'function' ||\n                    typeof ops !== 'object') {\n                    if (typeof options === 'function') {\n                        return original.call(this, server, ns, ops, options);\n                    }\n                    else {\n                        return original.call(this, server, ns, ops, options, callback);\n                    }\n                }\n                const span = instrumentation.tracer.startSpan(`mongodb.${operationName}`, {\n                    kind: api_1.SpanKind.CLIENT,\n                });\n                instrumentation._populateV3Attributes(span, ns, server, \n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                ops[0], operationName);\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n                // handle when options is the callback to send the correct number of args\n                if (typeof options === 'function') {\n                    return original.call(this, server, ns, ops, patchedCallback);\n                }\n                else {\n                    return original.call(this, server, ns, ops, options, patchedCallback);\n                }\n            };\n        };\n    }\n    /** Creates spans for command operation */\n    _getV3PatchCommand() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedServerCommand(server, ns, cmd, options, callback) {\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const skipInstrumentation = instrumentation._checkSkipInstrumentation(currentSpan);\n                const resultHandler = typeof options === 'function' ? options : callback;\n                if (skipInstrumentation ||\n                    typeof resultHandler !== 'function' ||\n                    typeof cmd !== 'object') {\n                    if (typeof options === 'function') {\n                        return original.call(this, server, ns, cmd, options);\n                    }\n                    else {\n                        return original.call(this, server, ns, cmd, options, callback);\n                    }\n                }\n                const commandType = MongoDBInstrumentation._getCommandType(cmd);\n                const type = commandType === internal_types_1.MongodbCommandType.UNKNOWN ? 'command' : commandType;\n                const span = instrumentation.tracer.startSpan(`mongodb.${type}`, {\n                    kind: api_1.SpanKind.CLIENT,\n                });\n                const operation = commandType === internal_types_1.MongodbCommandType.UNKNOWN ? undefined : commandType;\n                instrumentation._populateV3Attributes(span, ns, server, cmd, operation);\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n                // handle when options is the callback to send the correct number of args\n                if (typeof options === 'function') {\n                    return original.call(this, server, ns, cmd, patchedCallback);\n                }\n                else {\n                    return original.call(this, server, ns, cmd, options, patchedCallback);\n                }\n            };\n        };\n    }\n    /** Creates spans for command operation */\n    _getV4PatchCommandCallback() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedV4ServerCommand(ns, cmd, options, callback) {\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const skipInstrumentation = instrumentation._checkSkipInstrumentation(currentSpan);\n                const resultHandler = callback;\n                const commandType = Object.keys(cmd)[0];\n                if (typeof cmd !== 'object' || cmd.ismaster || cmd.hello) {\n                    return original.call(this, ns, cmd, options, callback);\n                }\n                let span = undefined;\n                if (!skipInstrumentation) {\n                    span = instrumentation.tracer.startSpan(`mongodb.${commandType}`, {\n                        kind: api_1.SpanKind.CLIENT,\n                    });\n                    instrumentation._populateV4Attributes(span, this, ns, cmd, commandType);\n                }\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler, this.id, commandType);\n                return original.call(this, ns, cmd, options, patchedCallback);\n            };\n        };\n    }\n    _getV4PatchCommandPromise() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedV4ServerCommand(...args) {\n                const [ns, cmd] = args;\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const skipInstrumentation = instrumentation._checkSkipInstrumentation(currentSpan);\n                const commandType = Object.keys(cmd)[0];\n                const resultHandler = () => undefined;\n                if (typeof cmd !== 'object' || cmd.ismaster || cmd.hello) {\n                    return original.apply(this, args);\n                }\n                let span = undefined;\n                if (!skipInstrumentation) {\n                    span = instrumentation.tracer.startSpan(`mongodb.${commandType}`, {\n                        kind: api_1.SpanKind.CLIENT,\n                    });\n                    instrumentation._populateV4Attributes(span, this, ns, cmd, commandType);\n                }\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler, this.id, commandType);\n                const result = original.apply(this, args);\n                result.then((res) => patchedCallback(null, res), (err) => patchedCallback(err));\n                return result;\n            };\n        };\n    }\n    /** Creates spans for find operation */\n    _getV3PatchFind() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedServerCommand(server, ns, cmd, cursorState, options, callback) {\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const skipInstrumentation = instrumentation._checkSkipInstrumentation(currentSpan);\n                const resultHandler = typeof options === 'function' ? options : callback;\n                if (skipInstrumentation ||\n                    typeof resultHandler !== 'function' ||\n                    typeof cmd !== 'object') {\n                    if (typeof options === 'function') {\n                        return original.call(this, server, ns, cmd, cursorState, options);\n                    }\n                    else {\n                        return original.call(this, server, ns, cmd, cursorState, options, callback);\n                    }\n                }\n                const span = instrumentation.tracer.startSpan('mongodb.find', {\n                    kind: api_1.SpanKind.CLIENT,\n                });\n                instrumentation._populateV3Attributes(span, ns, server, cmd, 'find');\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n                // handle when options is the callback to send the correct number of args\n                if (typeof options === 'function') {\n                    return original.call(this, server, ns, cmd, cursorState, patchedCallback);\n                }\n                else {\n                    return original.call(this, server, ns, cmd, cursorState, options, patchedCallback);\n                }\n            };\n        };\n    }\n    /** Creates spans for find operation */\n    _getV3PatchCursor() {\n        const instrumentation = this;\n        return (original) => {\n            return function patchedServerCommand(server, ns, cursorState, batchSize, options, callback) {\n                const currentSpan = api_1.trace.getSpan(api_1.context.active());\n                const skipInstrumentation = instrumentation._checkSkipInstrumentation(currentSpan);\n                const resultHandler = typeof options === 'function' ? options : callback;\n                if (skipInstrumentation || typeof resultHandler !== 'function') {\n                    if (typeof options === 'function') {\n                        return original.call(this, server, ns, cursorState, batchSize, options);\n                    }\n                    else {\n                        return original.call(this, server, ns, cursorState, batchSize, options, callback);\n                    }\n                }\n                const span = instrumentation.tracer.startSpan('mongodb.getMore', {\n                    kind: api_1.SpanKind.CLIENT,\n                });\n                instrumentation._populateV3Attributes(span, ns, server, cursorState.cmd, 'getMore');\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n                // handle when options is the callback to send the correct number of args\n                if (typeof options === 'function') {\n                    return original.call(this, server, ns, cursorState, batchSize, patchedCallback);\n                }\n                else {\n                    return original.call(this, server, ns, cursorState, batchSize, options, patchedCallback);\n                }\n            };\n        };\n    }\n    /**\n     * Get the mongodb command type from the object.\n     * @param command Internal mongodb command object\n     */\n    static _getCommandType(command) {\n        if (command.createIndexes !== undefined) {\n            return internal_types_1.MongodbCommandType.CREATE_INDEXES;\n        }\n        else if (command.findandmodify !== undefined) {\n            return internal_types_1.MongodbCommandType.FIND_AND_MODIFY;\n        }\n        else if (command.ismaster !== undefined) {\n            return internal_types_1.MongodbCommandType.IS_MASTER;\n        }\n        else if (command.count !== undefined) {\n            return internal_types_1.MongodbCommandType.COUNT;\n        }\n        else if (command.aggregate !== undefined) {\n            return internal_types_1.MongodbCommandType.AGGREGATE;\n        }\n        else {\n            return internal_types_1.MongodbCommandType.UNKNOWN;\n        }\n    }\n    /**\n     * Populate span's attributes by fetching related metadata from the context\n     * @param span span to add attributes to\n     * @param connectionCtx mongodb internal connection context\n     * @param ns mongodb namespace\n     * @param command mongodb internal representation of a command\n     */\n    _populateV4Attributes(span, connectionCtx, ns, command, operation) {\n        let host, port;\n        if (connectionCtx) {\n            const hostParts = typeof connectionCtx.address === 'string'\n                ? connectionCtx.address.split(':')\n                : '';\n            if (hostParts.length === 2) {\n                host = hostParts[0];\n                port = hostParts[1];\n            }\n        }\n        // capture parameters within the query as well if enhancedDatabaseReporting is enabled.\n        let commandObj;\n        if (command?.documents && command.documents[0]) {\n            commandObj = command.documents[0];\n        }\n        else if (command?.cursors) {\n            commandObj = command.cursors;\n        }\n        else {\n            commandObj = command;\n        }\n        this._addAllSpanAttributes(span, ns.db, ns.collection, host, port, commandObj, operation);\n    }\n    /**\n     * Populate span's attributes by fetching related metadata from the context\n     * @param span span to add attributes to\n     * @param ns mongodb namespace\n     * @param topology mongodb internal representation of the network topology\n     * @param command mongodb internal representation of a command\n     */\n    _populateV3Attributes(span, ns, topology, command, operation) {\n        // add network attributes to determine the remote server\n        let host;\n        let port;\n        if (topology && topology.s) {\n            host = topology.s.options?.host ?? topology.s.host;\n            port = (topology.s.options?.port ?? topology.s.port)?.toString();\n            if (host == null || port == null) {\n                const address = topology.description?.address;\n                if (address) {\n                    const addressSegments = address.split(':');\n                    host = addressSegments[0];\n                    port = addressSegments[1];\n                }\n            }\n        }\n        // The namespace is a combination of the database name and the name of the\n        // collection or index, like so: [database-name].[collection-or-index-name].\n        // It could be a string or an instance of MongoDBNamespace, as such we\n        // always coerce to a string to extract db and collection.\n        const [dbName, dbCollection] = ns.toString().split('.');\n        // capture parameters within the query as well if enhancedDatabaseReporting is enabled.\n        const commandObj = command?.query ?? command?.q ?? command;\n        this._addAllSpanAttributes(span, dbName, dbCollection, host, port, commandObj, operation);\n    }\n    _addAllSpanAttributes(span, dbName, dbCollection, host, port, commandObj, operation) {\n        // add database related attributes\n        span.setAttributes({\n            [semantic_conventions_1.SEMATTRS_DB_SYSTEM]: semantic_conventions_1.DBSYSTEMVALUES_MONGODB,\n            [semantic_conventions_1.SEMATTRS_DB_NAME]: dbName,\n            [semantic_conventions_1.SEMATTRS_DB_MONGODB_COLLECTION]: dbCollection,\n            [semantic_conventions_1.SEMATTRS_DB_OPERATION]: operation,\n            [semantic_conventions_1.SEMATTRS_DB_CONNECTION_STRING]: `mongodb://${host}:${port}/${dbName}`,\n        });\n        if (host && port) {\n            span.setAttribute(semantic_conventions_1.SEMATTRS_NET_PEER_NAME, host);\n            const portNumber = parseInt(port, 10);\n            if (!isNaN(portNumber)) {\n                span.setAttribute(semantic_conventions_1.SEMATTRS_NET_PEER_PORT, portNumber);\n            }\n        }\n        if (!commandObj)\n            return;\n        const { dbStatementSerializer: configDbStatementSerializer } = this.getConfig();\n        const dbStatementSerializer = typeof configDbStatementSerializer === 'function'\n            ? configDbStatementSerializer\n            : this._defaultDbStatementSerializer.bind(this);\n        (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n            const query = dbStatementSerializer(commandObj);\n            span.setAttribute(semantic_conventions_1.SEMATTRS_DB_STATEMENT, query);\n        }, err => {\n            if (err) {\n                this._diag.error('Error running dbStatementSerializer hook', err);\n            }\n        }, true);\n    }\n    _defaultDbStatementSerializer(commandObj) {\n        const { enhancedDatabaseReporting } = this.getConfig();\n        const resultObj = enhancedDatabaseReporting\n            ? commandObj\n            : this._scrubStatement(commandObj);\n        return JSON.stringify(resultObj);\n    }\n    _scrubStatement(value) {\n        if (Array.isArray(value)) {\n            return value.map(element => this._scrubStatement(element));\n        }\n        if (typeof value === 'object' && value !== null) {\n            return Object.fromEntries(Object.entries(value).map(([key, element]) => [\n                key,\n                this._scrubStatement(element),\n            ]));\n        }\n        // A value like string or number, possible contains PII, scrub it\n        return '?';\n    }\n    /**\n     * Triggers the response hook in case it is defined.\n     * @param span The span to add the results to.\n     * @param result The command result\n     */\n    _handleExecutionResult(span, result) {\n        const { responseHook } = this.getConfig();\n        if (typeof responseHook === 'function') {\n            (0, instrumentation_1.safeExecuteInTheMiddle)(() => {\n                responseHook(span, { data: result });\n            }, err => {\n                if (err) {\n                    this._diag.error('Error running response hook', err);\n                }\n            }, true);\n        }\n    }\n    /**\n     * Ends a created span.\n     * @param span The created span to end.\n     * @param resultHandler A callback function.\n     * @param connectionId: The connection ID of the Command response.\n     */\n    _patchEnd(span, resultHandler, connectionId, commandType) {\n        // mongodb is using \"tick\" when calling a callback, this way the context\n        // in final callback (resultHandler) is lost\n        const activeContext = api_1.context.active();\n        const instrumentation = this;\n        return function patchedEnd(...args) {\n            const error = args[0];\n            if (span) {\n                if (error instanceof Error) {\n                    span?.setStatus({\n                        code: api_1.SpanStatusCode.ERROR,\n                        message: error.message,\n                    });\n                }\n                else {\n                    const result = args[1];\n                    instrumentation._handleExecutionResult(span, result);\n                }\n                span.end();\n            }\n            return api_1.context.with(activeContext, () => {\n                if (commandType === 'endSessions') {\n                    instrumentation._connectionsUsage.add(-1, {\n                        state: 'idle',\n                        'pool.name': instrumentation._poolName,\n                    });\n                }\n                return resultHandler.apply(this, args);\n            });\n        };\n    }\n    setPoolName(options) {\n        const host = options.hostAddress?.host;\n        const port = options.hostAddress?.port;\n        const database = options.dbName;\n        const poolName = `mongodb://${host}:${port}/${database}`;\n        this._poolName = poolName;\n    }\n    _checkSkipInstrumentation(currentSpan) {\n        const requireParentSpan = this.getConfig().requireParentSpan;\n        const hasNoParentSpan = currentSpan === undefined;\n        return requireParentSpan === true && hasNoParentSpan;\n    }\n}\nexports.MongoDBInstrumentation = MongoDBInstrumentation;\n//# sourceMappingURL=instrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(instrument)/../../node_modules/.pnpm/@opentelemetry+instrumentation-mongodb@0.57.0_@opentelemetry+api@1.9.0/node_modules/@opentelemetry/instrumentation-mongodb/build/src/instrumentation.js\n");

/***/ })

};
;